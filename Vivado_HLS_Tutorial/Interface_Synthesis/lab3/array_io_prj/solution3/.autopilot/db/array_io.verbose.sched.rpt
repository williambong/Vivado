

================================================================
== Vivado HLS Report for 'array_io'
================================================================
* Date:           Sat Aug 08 16:05:09 2015

* Version:        2015.2 (Build 1266856 on Fri Jun 26 16:57:37 PM 2015)
* Project:        array_io_prj
* Solution:       solution3
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.00|      3.40|        0.50|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   11|   11|   12|   12|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+--------+
|       Name      | BRAM_18K| DSP48E|   FF   |   LUT  |
+-----------------+---------+-------+--------+--------+
|Expression       |        -|      -|       -|       -|
|FIFO             |        -|      -|       -|       -|
|Instance         |        -|      -|       -|       -|
|Memory           |        -|      -|       -|       -|
|Multiplexer      |        -|      -|       -|       -|
|Register         |        -|      -|       -|       -|
+-----------------+---------+-------+--------+--------+
|Total            |        0|      0|       0|       0|
+-----------------+---------+-------+--------+--------+
|Available        |      650|    600|  202800|  101400|
+-----------------+---------+-------+--------+--------+
|Utilization (%)  |        0|      0|       0|       0|
+-----------------+---------+-------+--------+--------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 12
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: d_i_0_addr [1/1] 0.00ns
:10  %d_i_0_addr = getelementptr [16 x i16]* %d_i_0, i64 0, i64 0

ST_1: d_i_0_load [2/2] 2.39ns
:11  %d_i_0_load = load i16* %d_i_0_addr, align 2


 <State 2>: 2.39ns
ST_2: d_i_0_load [1/2] 2.39ns
:11  %d_i_0_load = load i16* %d_i_0_addr, align 2

ST_2: d_i_0_addr_1 [1/1] 0.00ns
:17  %d_i_0_addr_1 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 1

ST_2: d_i_0_load_1 [2/2] 2.39ns
:18  %d_i_0_load_1 = load i16* %d_i_0_addr_1, align 2

ST_2: d_i_0_addr_8 [1/1] 0.00ns
:65  %d_i_0_addr_8 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 8

ST_2: d_i_0_load_8 [2/2] 2.39ns
:66  %d_i_0_load_8 = load i16* %d_i_0_addr_8, align 2

ST_2: d_i_1_addr [1/1] 0.00ns
:113  %d_i_1_addr = getelementptr [16 x i16]* %d_i_1, i64 0, i64 0

ST_2: d_i_1_load [2/2] 2.39ns
:114  %d_i_1_load = load i16* %d_i_1_addr, align 2


 <State 3>: 2.39ns
ST_3: acc_0_load [1/1] 0.00ns
:9  %acc_0_load = load i32* @acc_0, align 4

ST_3: tmp_2 [1/1] 0.00ns
:12  %tmp_2 = sext i16 %d_i_0_load to i32

ST_3: acc_0_loc_assign_2 [1/1] 1.70ns
:13  %acc_0_loc_assign_2 = add nsw i32 %acc_0_load, %tmp_2

ST_3: tmp [1/1] 0.00ns
:14  %tmp = trunc i32 %acc_0_loc_assign_2 to i16

ST_3: d_i_0_load_1 [1/2] 2.39ns
:18  %d_i_0_load_1 = load i16* %d_i_0_addr_1, align 2

ST_3: d_i_0_addr_2 [1/1] 0.00ns
:24  %d_i_0_addr_2 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 2

ST_3: d_i_0_load_2 [2/2] 2.39ns
:25  %d_i_0_load_2 = load i16* %d_i_0_addr_2, align 2

ST_3: d_i_0_load_8 [1/2] 2.39ns
:66  %d_i_0_load_8 = load i16* %d_i_0_addr_8, align 2

ST_3: d_i_0_addr_9 [1/1] 0.00ns
:71  %d_i_0_addr_9 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 9

ST_3: d_i_0_load_9 [2/2] 2.39ns
:72  %d_i_0_load_9 = load i16* %d_i_0_addr_9, align 2

ST_3: d_i_1_load [1/2] 2.39ns
:114  %d_i_1_load = load i16* %d_i_1_addr, align 2

ST_3: d_i_1_addr_1 [1/1] 0.00ns
:119  %d_i_1_addr_1 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 1

ST_3: d_i_1_load_1 [2/2] 2.39ns
:120  %d_i_1_load_1 = load i16* %d_i_1_addr_1, align 2

ST_3: d_i_1_addr_8 [1/1] 0.00ns
:161  %d_i_1_addr_8 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 8

ST_3: d_i_1_load_8 [2/2] 2.39ns
:162  %d_i_1_load_8 = load i16* %d_i_1_addr_8, align 2


 <State 4>: 3.40ns
ST_4: acc_1_load [1/1] 0.00ns
:16  %acc_1_load = load i32* @acc_1, align 4

ST_4: tmp_2_1 [1/1] 0.00ns
:19  %tmp_2_1 = sext i16 %d_i_0_load_1 to i32

ST_4: acc_1_loc_assign_2 [1/1] 1.70ns
:20  %acc_1_loc_assign_2 = add nsw i32 %acc_1_load, %tmp_2_1

ST_4: tmp_1 [1/1] 0.00ns
:21  %tmp_1 = trunc i32 %acc_1_loc_assign_2 to i16

ST_4: d_i_0_load_2 [1/2] 2.39ns
:25  %d_i_0_load_2 = load i16* %d_i_0_addr_2, align 2

ST_4: d_i_0_addr_3 [1/1] 0.00ns
:31  %d_i_0_addr_3 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 3

ST_4: d_i_0_load_3 [2/2] 2.39ns
:32  %d_i_0_load_3 = load i16* %d_i_0_addr_3, align 2

ST_4: tmp_2_8 [1/1] 0.00ns
:67  %tmp_2_8 = sext i16 %d_i_0_load_8 to i32

ST_4: acc_0_loc_assign_1 [1/1] 1.70ns
:68  %acc_0_loc_assign_1 = add nsw i32 %acc_0_loc_assign_2, %tmp_2_8

ST_4: tmp_9 [1/1] 0.00ns
:69  %tmp_9 = trunc i32 %acc_0_loc_assign_1 to i16

ST_4: d_i_0_load_9 [1/2] 2.39ns
:72  %d_i_0_load_9 = load i16* %d_i_0_addr_9, align 2

ST_4: d_i_0_addr_10 [1/1] 0.00ns
:77  %d_i_0_addr_10 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 10

ST_4: d_i_0_load_10 [2/2] 2.39ns
:78  %d_i_0_load_10 = load i16* %d_i_0_addr_10, align 2

ST_4: tmp_2_15 [1/1] 0.00ns
:115  %tmp_2_15 = sext i16 %d_i_1_load to i32

ST_4: acc_0_loc [1/1] 1.70ns
:116  %acc_0_loc = add nsw i32 %acc_0_loc_assign_1, %tmp_2_15

ST_4: tmp_17 [1/1] 0.00ns
:117  %tmp_17 = trunc i32 %acc_0_loc to i16

ST_4: d_i_1_load_1 [1/2] 2.39ns
:120  %d_i_1_load_1 = load i16* %d_i_1_addr_1, align 2

ST_4: d_i_1_addr_2 [1/1] 0.00ns
:125  %d_i_1_addr_2 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 2

ST_4: d_i_1_load_2 [2/2] 2.39ns
:126  %d_i_1_load_2 = load i16* %d_i_1_addr_2, align 2

ST_4: d_i_1_load_8 [1/2] 2.39ns
:162  %d_i_1_load_8 = load i16* %d_i_1_addr_8, align 2

ST_4: d_i_1_addr_9 [1/1] 0.00ns
:168  %d_i_1_addr_9 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 9

ST_4: d_i_1_load_9 [2/2] 2.39ns
:169  %d_i_1_load_9 = load i16* %d_i_1_addr_9, align 2


 <State 5>: 3.40ns
ST_5: stg_59 [1/1] 1.00ns
:15  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp)

ST_5: acc_2_load [1/1] 0.00ns
:23  %acc_2_load = load i32* @acc_2, align 4

ST_5: tmp_2_2 [1/1] 0.00ns
:26  %tmp_2_2 = sext i16 %d_i_0_load_2 to i32

ST_5: acc_2_loc_assign_2 [1/1] 1.70ns
:27  %acc_2_loc_assign_2 = add nsw i32 %acc_2_load, %tmp_2_2

ST_5: tmp_3 [1/1] 0.00ns
:28  %tmp_3 = trunc i32 %acc_2_loc_assign_2 to i16

ST_5: d_i_0_load_3 [1/2] 2.39ns
:32  %d_i_0_load_3 = load i16* %d_i_0_addr_3, align 2

ST_5: d_i_0_addr_4 [1/1] 0.00ns
:38  %d_i_0_addr_4 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 4

ST_5: d_i_0_load_4 [2/2] 2.39ns
:39  %d_i_0_load_4 = load i16* %d_i_0_addr_4, align 2

ST_5: stg_67 [1/1] 1.00ns
:70  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_9)

ST_5: tmp_2_9 [1/1] 0.00ns
:73  %tmp_2_9 = sext i16 %d_i_0_load_9 to i32

ST_5: acc_1_loc_assign_1 [1/1] 1.70ns
:74  %acc_1_loc_assign_1 = add nsw i32 %acc_1_loc_assign_2, %tmp_2_9

ST_5: tmp_10 [1/1] 0.00ns
:75  %tmp_10 = trunc i32 %acc_1_loc_assign_1 to i16

ST_5: d_i_0_load_10 [1/2] 2.39ns
:78  %d_i_0_load_10 = load i16* %d_i_0_addr_10, align 2

ST_5: d_i_0_addr_11 [1/1] 0.00ns
:83  %d_i_0_addr_11 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 11

ST_5: d_i_0_load_11 [2/2] 2.39ns
:84  %d_i_0_load_11 = load i16* %d_i_0_addr_11, align 2

ST_5: stg_74 [1/1] 1.00ns
:118  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_17)

ST_5: tmp_2_16 [1/1] 0.00ns
:121  %tmp_2_16 = sext i16 %d_i_1_load_1 to i32

ST_5: acc_1_loc [1/1] 1.70ns
:122  %acc_1_loc = add nsw i32 %acc_1_loc_assign_1, %tmp_2_16

ST_5: tmp_18 [1/1] 0.00ns
:123  %tmp_18 = trunc i32 %acc_1_loc to i16

ST_5: d_i_1_load_2 [1/2] 2.39ns
:126  %d_i_1_load_2 = load i16* %d_i_1_addr_2, align 2

ST_5: d_i_1_addr_3 [1/1] 0.00ns
:131  %d_i_1_addr_3 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 3

ST_5: d_i_1_load_3 [2/2] 2.39ns
:132  %d_i_1_load_3 = load i16* %d_i_1_addr_3, align 2

ST_5: tmp_2_23 [1/1] 0.00ns
:163  %tmp_2_23 = sext i16 %d_i_1_load_8 to i32

ST_5: temp_s [1/1] 1.70ns
:164  %temp_s = add nsw i32 %acc_0_loc, %tmp_2_23

ST_5: stg_83 [1/1] 0.00ns
:165  store i32 %temp_s, i32* @acc_0, align 16

ST_5: tmp_25 [1/1] 0.00ns
:166  %tmp_25 = trunc i32 %temp_s to i16

ST_5: stg_85 [1/1] 1.00ns
:167  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_25)

ST_5: d_i_1_load_9 [1/2] 2.39ns
:169  %d_i_1_load_9 = load i16* %d_i_1_addr_9, align 2

ST_5: d_i_1_addr_10 [1/1] 0.00ns
:175  %d_i_1_addr_10 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 10

ST_5: d_i_1_load_10 [2/2] 2.39ns
:176  %d_i_1_load_10 = load i16* %d_i_1_addr_10, align 2


 <State 6>: 3.40ns
ST_6: stg_89 [1/1] 1.00ns
:22  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_1)

ST_6: acc_3_load [1/1] 0.00ns
:30  %acc_3_load = load i32* @acc_3, align 4

ST_6: tmp_2_3 [1/1] 0.00ns
:33  %tmp_2_3 = sext i16 %d_i_0_load_3 to i32

ST_6: acc_3_loc_assign_2 [1/1] 1.70ns
:34  %acc_3_loc_assign_2 = add nsw i32 %acc_3_load, %tmp_2_3

ST_6: tmp_4 [1/1] 0.00ns
:35  %tmp_4 = trunc i32 %acc_3_loc_assign_2 to i16

ST_6: d_i_0_load_4 [1/2] 2.39ns
:39  %d_i_0_load_4 = load i16* %d_i_0_addr_4, align 2

ST_6: d_i_0_addr_5 [1/1] 0.00ns
:45  %d_i_0_addr_5 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 5

ST_6: d_i_0_load_5 [2/2] 2.39ns
:46  %d_i_0_load_5 = load i16* %d_i_0_addr_5, align 2

ST_6: stg_97 [1/1] 1.00ns
:76  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_10)

ST_6: tmp_2_s [1/1] 0.00ns
:79  %tmp_2_s = sext i16 %d_i_0_load_10 to i32

ST_6: acc_2_loc_assign_1 [1/1] 1.70ns
:80  %acc_2_loc_assign_1 = add nsw i32 %acc_2_loc_assign_2, %tmp_2_s

ST_6: tmp_11 [1/1] 0.00ns
:81  %tmp_11 = trunc i32 %acc_2_loc_assign_1 to i16

ST_6: d_i_0_load_11 [1/2] 2.39ns
:84  %d_i_0_load_11 = load i16* %d_i_0_addr_11, align 2

ST_6: d_i_0_addr_12 [1/1] 0.00ns
:89  %d_i_0_addr_12 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 12

ST_6: d_i_0_load_12 [2/2] 2.39ns
:90  %d_i_0_load_12 = load i16* %d_i_0_addr_12, align 2

ST_6: stg_104 [1/1] 1.00ns
:124  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_18)

ST_6: tmp_2_17 [1/1] 0.00ns
:127  %tmp_2_17 = sext i16 %d_i_1_load_2 to i32

ST_6: acc_2_loc [1/1] 1.70ns
:128  %acc_2_loc = add nsw i32 %acc_2_loc_assign_1, %tmp_2_17

ST_6: tmp_19 [1/1] 0.00ns
:129  %tmp_19 = trunc i32 %acc_2_loc to i16

ST_6: d_i_1_load_3 [1/2] 2.39ns
:132  %d_i_1_load_3 = load i16* %d_i_1_addr_3, align 2

ST_6: d_i_1_addr_4 [1/1] 0.00ns
:137  %d_i_1_addr_4 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 4

ST_6: d_i_1_load_4 [2/2] 2.39ns
:138  %d_i_1_load_4 = load i16* %d_i_1_addr_4, align 2

ST_6: tmp_2_24 [1/1] 0.00ns
:170  %tmp_2_24 = sext i16 %d_i_1_load_9 to i32

ST_6: temp_1 [1/1] 1.70ns
:171  %temp_1 = add nsw i32 %acc_1_loc, %tmp_2_24

ST_6: stg_113 [1/1] 0.00ns
:172  store i32 %temp_1, i32* @acc_1, align 4

ST_6: tmp_26 [1/1] 0.00ns
:173  %tmp_26 = trunc i32 %temp_1 to i16

ST_6: stg_115 [1/1] 1.00ns
:174  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_26)

ST_6: d_i_1_load_10 [1/2] 2.39ns
:176  %d_i_1_load_10 = load i16* %d_i_1_addr_10, align 2

ST_6: d_i_1_addr_11 [1/1] 0.00ns
:182  %d_i_1_addr_11 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 11

ST_6: d_i_1_load_11 [2/2] 2.39ns
:183  %d_i_1_load_11 = load i16* %d_i_1_addr_11, align 2


 <State 7>: 3.40ns
ST_7: stg_119 [1/1] 1.00ns
:29  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_3)

ST_7: acc_4_load [1/1] 0.00ns
:37  %acc_4_load = load i32* @acc_4, align 4

ST_7: tmp_2_4 [1/1] 0.00ns
:40  %tmp_2_4 = sext i16 %d_i_0_load_4 to i32

ST_7: acc_4_loc_assign_2 [1/1] 1.70ns
:41  %acc_4_loc_assign_2 = add nsw i32 %acc_4_load, %tmp_2_4

ST_7: tmp_5 [1/1] 0.00ns
:42  %tmp_5 = trunc i32 %acc_4_loc_assign_2 to i16

ST_7: d_i_0_load_5 [1/2] 2.39ns
:46  %d_i_0_load_5 = load i16* %d_i_0_addr_5, align 2

ST_7: d_i_0_addr_6 [1/1] 0.00ns
:52  %d_i_0_addr_6 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 6

ST_7: d_i_0_load_6 [2/2] 2.39ns
:53  %d_i_0_load_6 = load i16* %d_i_0_addr_6, align 2

ST_7: stg_127 [1/1] 1.00ns
:82  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_11)

ST_7: tmp_2_10 [1/1] 0.00ns
:85  %tmp_2_10 = sext i16 %d_i_0_load_11 to i32

ST_7: acc_3_loc_assign_1 [1/1] 1.70ns
:86  %acc_3_loc_assign_1 = add nsw i32 %acc_3_loc_assign_2, %tmp_2_10

ST_7: tmp_12 [1/1] 0.00ns
:87  %tmp_12 = trunc i32 %acc_3_loc_assign_1 to i16

ST_7: d_i_0_load_12 [1/2] 2.39ns
:90  %d_i_0_load_12 = load i16* %d_i_0_addr_12, align 2

ST_7: d_i_0_addr_13 [1/1] 0.00ns
:95  %d_i_0_addr_13 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 13

ST_7: d_i_0_load_13 [2/2] 2.39ns
:96  %d_i_0_load_13 = load i16* %d_i_0_addr_13, align 2

ST_7: stg_134 [1/1] 1.00ns
:130  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_19)

ST_7: tmp_2_18 [1/1] 0.00ns
:133  %tmp_2_18 = sext i16 %d_i_1_load_3 to i32

ST_7: acc_3_loc [1/1] 1.70ns
:134  %acc_3_loc = add nsw i32 %acc_3_loc_assign_1, %tmp_2_18

ST_7: tmp_20 [1/1] 0.00ns
:135  %tmp_20 = trunc i32 %acc_3_loc to i16

ST_7: d_i_1_load_4 [1/2] 2.39ns
:138  %d_i_1_load_4 = load i16* %d_i_1_addr_4, align 2

ST_7: d_i_1_addr_5 [1/1] 0.00ns
:143  %d_i_1_addr_5 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 5

ST_7: d_i_1_load_5 [2/2] 2.39ns
:144  %d_i_1_load_5 = load i16* %d_i_1_addr_5, align 2

ST_7: tmp_2_25 [1/1] 0.00ns
:177  %tmp_2_25 = sext i16 %d_i_1_load_10 to i32

ST_7: temp_2 [1/1] 1.70ns
:178  %temp_2 = add nsw i32 %acc_2_loc, %tmp_2_25

ST_7: stg_143 [1/1] 0.00ns
:179  store i32 %temp_2, i32* @acc_2, align 8

ST_7: tmp_27 [1/1] 0.00ns
:180  %tmp_27 = trunc i32 %temp_2 to i16

ST_7: stg_145 [1/1] 1.00ns
:181  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_27)

ST_7: d_i_1_load_11 [1/2] 2.39ns
:183  %d_i_1_load_11 = load i16* %d_i_1_addr_11, align 2

ST_7: d_i_1_addr_12 [1/1] 0.00ns
:189  %d_i_1_addr_12 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 12

ST_7: d_i_1_load_12 [2/2] 2.39ns
:190  %d_i_1_load_12 = load i16* %d_i_1_addr_12, align 2


 <State 8>: 3.40ns
ST_8: stg_149 [1/1] 1.00ns
:36  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_4)

ST_8: acc_5_load [1/1] 0.00ns
:44  %acc_5_load = load i32* @acc_5, align 4

ST_8: tmp_2_5 [1/1] 0.00ns
:47  %tmp_2_5 = sext i16 %d_i_0_load_5 to i32

ST_8: acc_5_loc_assign_2 [1/1] 1.70ns
:48  %acc_5_loc_assign_2 = add nsw i32 %acc_5_load, %tmp_2_5

ST_8: tmp_6 [1/1] 0.00ns
:49  %tmp_6 = trunc i32 %acc_5_loc_assign_2 to i16

ST_8: d_i_0_load_6 [1/2] 2.39ns
:53  %d_i_0_load_6 = load i16* %d_i_0_addr_6, align 2

ST_8: d_i_0_addr_7 [1/1] 0.00ns
:59  %d_i_0_addr_7 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 7

ST_8: d_i_0_load_7 [2/2] 2.39ns
:60  %d_i_0_load_7 = load i16* %d_i_0_addr_7, align 2

ST_8: stg_157 [1/1] 1.00ns
:88  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_12)

ST_8: tmp_2_11 [1/1] 0.00ns
:91  %tmp_2_11 = sext i16 %d_i_0_load_12 to i32

ST_8: acc_4_loc_assign_1 [1/1] 1.70ns
:92  %acc_4_loc_assign_1 = add nsw i32 %acc_4_loc_assign_2, %tmp_2_11

ST_8: tmp_13 [1/1] 0.00ns
:93  %tmp_13 = trunc i32 %acc_4_loc_assign_1 to i16

ST_8: d_i_0_load_13 [1/2] 2.39ns
:96  %d_i_0_load_13 = load i16* %d_i_0_addr_13, align 2

ST_8: d_i_0_addr_14 [1/1] 0.00ns
:101  %d_i_0_addr_14 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 14

ST_8: d_i_0_load_14 [2/2] 2.39ns
:102  %d_i_0_load_14 = load i16* %d_i_0_addr_14, align 2

ST_8: stg_164 [1/1] 1.00ns
:136  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_20)

ST_8: tmp_2_19 [1/1] 0.00ns
:139  %tmp_2_19 = sext i16 %d_i_1_load_4 to i32

ST_8: acc_4_loc [1/1] 1.70ns
:140  %acc_4_loc = add nsw i32 %acc_4_loc_assign_1, %tmp_2_19

ST_8: tmp_21 [1/1] 0.00ns
:141  %tmp_21 = trunc i32 %acc_4_loc to i16

ST_8: d_i_1_load_5 [1/2] 2.39ns
:144  %d_i_1_load_5 = load i16* %d_i_1_addr_5, align 2

ST_8: d_i_1_addr_6 [1/1] 0.00ns
:149  %d_i_1_addr_6 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 6

ST_8: d_i_1_load_6 [2/2] 2.39ns
:150  %d_i_1_load_6 = load i16* %d_i_1_addr_6, align 2

ST_8: tmp_2_26 [1/1] 0.00ns
:184  %tmp_2_26 = sext i16 %d_i_1_load_11 to i32

ST_8: temp_3 [1/1] 1.70ns
:185  %temp_3 = add nsw i32 %acc_3_loc, %tmp_2_26

ST_8: stg_173 [1/1] 0.00ns
:186  store i32 %temp_3, i32* @acc_3, align 4

ST_8: tmp_28 [1/1] 0.00ns
:187  %tmp_28 = trunc i32 %temp_3 to i16

ST_8: stg_175 [1/1] 1.00ns
:188  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_28)

ST_8: d_i_1_load_12 [1/2] 2.39ns
:190  %d_i_1_load_12 = load i16* %d_i_1_addr_12, align 2

ST_8: d_i_1_addr_13 [1/1] 0.00ns
:196  %d_i_1_addr_13 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 13

ST_8: d_i_1_load_13 [2/2] 2.39ns
:197  %d_i_1_load_13 = load i16* %d_i_1_addr_13, align 2


 <State 9>: 3.40ns
ST_9: stg_179 [1/1] 1.00ns
:43  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_5)

ST_9: acc_6_load [1/1] 0.00ns
:51  %acc_6_load = load i32* @acc_6, align 4

ST_9: tmp_2_6 [1/1] 0.00ns
:54  %tmp_2_6 = sext i16 %d_i_0_load_6 to i32

ST_9: acc_6_loc_assign_2 [1/1] 1.70ns
:55  %acc_6_loc_assign_2 = add nsw i32 %acc_6_load, %tmp_2_6

ST_9: tmp_7 [1/1] 0.00ns
:56  %tmp_7 = trunc i32 %acc_6_loc_assign_2 to i16

ST_9: d_i_0_load_7 [1/2] 2.39ns
:60  %d_i_0_load_7 = load i16* %d_i_0_addr_7, align 2

ST_9: stg_185 [1/1] 1.00ns
:94  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_13)

ST_9: tmp_2_12 [1/1] 0.00ns
:97  %tmp_2_12 = sext i16 %d_i_0_load_13 to i32

ST_9: acc_5_loc_assign_1 [1/1] 1.70ns
:98  %acc_5_loc_assign_1 = add nsw i32 %acc_5_loc_assign_2, %tmp_2_12

ST_9: tmp_14 [1/1] 0.00ns
:99  %tmp_14 = trunc i32 %acc_5_loc_assign_1 to i16

ST_9: d_i_0_load_14 [1/2] 2.39ns
:102  %d_i_0_load_14 = load i16* %d_i_0_addr_14, align 2

ST_9: d_i_0_addr_15 [1/1] 0.00ns
:107  %d_i_0_addr_15 = getelementptr [16 x i16]* %d_i_0, i64 0, i64 15

ST_9: d_i_0_load_15 [2/2] 2.39ns
:108  %d_i_0_load_15 = load i16* %d_i_0_addr_15, align 2

ST_9: stg_192 [1/1] 1.00ns
:142  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_21)

ST_9: tmp_2_20 [1/1] 0.00ns
:145  %tmp_2_20 = sext i16 %d_i_1_load_5 to i32

ST_9: acc_5_loc [1/1] 1.70ns
:146  %acc_5_loc = add nsw i32 %acc_5_loc_assign_1, %tmp_2_20

ST_9: tmp_22 [1/1] 0.00ns
:147  %tmp_22 = trunc i32 %acc_5_loc to i16

ST_9: d_i_1_load_6 [1/2] 2.39ns
:150  %d_i_1_load_6 = load i16* %d_i_1_addr_6, align 2

ST_9: d_i_1_addr_7 [1/1] 0.00ns
:155  %d_i_1_addr_7 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 7

ST_9: d_i_1_load_7 [2/2] 2.39ns
:156  %d_i_1_load_7 = load i16* %d_i_1_addr_7, align 2

ST_9: tmp_2_27 [1/1] 0.00ns
:191  %tmp_2_27 = sext i16 %d_i_1_load_12 to i32

ST_9: temp_4 [1/1] 1.70ns
:192  %temp_4 = add nsw i32 %acc_4_loc, %tmp_2_27

ST_9: stg_201 [1/1] 0.00ns
:193  store i32 %temp_4, i32* @acc_4, align 16

ST_9: tmp_29 [1/1] 0.00ns
:194  %tmp_29 = trunc i32 %temp_4 to i16

ST_9: stg_203 [1/1] 1.00ns
:195  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_29)

ST_9: d_i_1_load_13 [1/2] 2.39ns
:197  %d_i_1_load_13 = load i16* %d_i_1_addr_13, align 2

ST_9: d_i_1_addr_14 [1/1] 0.00ns
:203  %d_i_1_addr_14 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 14

ST_9: d_i_1_load_14 [2/2] 2.39ns
:204  %d_i_1_load_14 = load i16* %d_i_1_addr_14, align 2


 <State 10>: 3.40ns
ST_10: stg_207 [1/1] 1.00ns
:50  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_6)

ST_10: acc_7_load [1/1] 0.00ns
:58  %acc_7_load = load i32* @acc_7, align 4

ST_10: tmp_2_7 [1/1] 0.00ns
:61  %tmp_2_7 = sext i16 %d_i_0_load_7 to i32

ST_10: acc_7_loc_assign_2 [1/1] 1.70ns
:62  %acc_7_loc_assign_2 = add nsw i32 %acc_7_load, %tmp_2_7

ST_10: tmp_8 [1/1] 0.00ns
:63  %tmp_8 = trunc i32 %acc_7_loc_assign_2 to i16

ST_10: stg_212 [1/1] 1.00ns
:100  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_14)

ST_10: tmp_2_13 [1/1] 0.00ns
:103  %tmp_2_13 = sext i16 %d_i_0_load_14 to i32

ST_10: acc_6_loc_assign_1 [1/1] 1.70ns
:104  %acc_6_loc_assign_1 = add nsw i32 %acc_6_loc_assign_2, %tmp_2_13

ST_10: tmp_15 [1/1] 0.00ns
:105  %tmp_15 = trunc i32 %acc_6_loc_assign_1 to i16

ST_10: d_i_0_load_15 [1/2] 2.39ns
:108  %d_i_0_load_15 = load i16* %d_i_0_addr_15, align 2

ST_10: stg_217 [1/1] 1.00ns
:148  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_22)

ST_10: tmp_2_21 [1/1] 0.00ns
:151  %tmp_2_21 = sext i16 %d_i_1_load_6 to i32

ST_10: acc_6_loc [1/1] 1.70ns
:152  %acc_6_loc = add nsw i32 %acc_6_loc_assign_1, %tmp_2_21

ST_10: tmp_23 [1/1] 0.00ns
:153  %tmp_23 = trunc i32 %acc_6_loc to i16

ST_10: d_i_1_load_7 [1/2] 2.39ns
:156  %d_i_1_load_7 = load i16* %d_i_1_addr_7, align 2

ST_10: tmp_2_28 [1/1] 0.00ns
:198  %tmp_2_28 = sext i16 %d_i_1_load_13 to i32

ST_10: temp_5 [1/1] 1.70ns
:199  %temp_5 = add nsw i32 %acc_5_loc, %tmp_2_28

ST_10: stg_224 [1/1] 0.00ns
:200  store i32 %temp_5, i32* @acc_5, align 4

ST_10: tmp_30 [1/1] 0.00ns
:201  %tmp_30 = trunc i32 %temp_5 to i16

ST_10: stg_226 [1/1] 1.00ns
:202  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_30)

ST_10: d_i_1_load_14 [1/2] 2.39ns
:204  %d_i_1_load_14 = load i16* %d_i_1_addr_14, align 2

ST_10: d_i_1_addr_15 [1/1] 0.00ns
:210  %d_i_1_addr_15 = getelementptr [16 x i16]* %d_i_1, i64 0, i64 15

ST_10: d_i_1_load_15 [2/2] 2.39ns
:211  %d_i_1_load_15 = load i16* %d_i_1_addr_15, align 2


 <State 11>: 3.40ns
ST_11: stg_230 [1/1] 1.00ns
:57  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_7)

ST_11: stg_231 [1/1] 1.00ns
:106  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_15)

ST_11: tmp_2_14 [1/1] 0.00ns
:109  %tmp_2_14 = sext i16 %d_i_0_load_15 to i32

ST_11: acc_7_loc_assign_1 [1/1] 1.70ns
:110  %acc_7_loc_assign_1 = add nsw i32 %acc_7_loc_assign_2, %tmp_2_14

ST_11: tmp_16 [1/1] 0.00ns
:111  %tmp_16 = trunc i32 %acc_7_loc_assign_1 to i16

ST_11: stg_235 [1/1] 1.00ns
:154  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_23)

ST_11: tmp_2_22 [1/1] 0.00ns
:157  %tmp_2_22 = sext i16 %d_i_1_load_7 to i32

ST_11: acc_7_loc [1/1] 1.70ns
:158  %acc_7_loc = add nsw i32 %acc_7_loc_assign_1, %tmp_2_22

ST_11: tmp_24 [1/1] 0.00ns
:159  %tmp_24 = trunc i32 %acc_7_loc to i16

ST_11: tmp_2_29 [1/1] 0.00ns
:205  %tmp_2_29 = sext i16 %d_i_1_load_14 to i32

ST_11: temp_6 [1/1] 1.70ns
:206  %temp_6 = add nsw i32 %acc_6_loc, %tmp_2_29

ST_11: stg_241 [1/1] 0.00ns
:207  store i32 %temp_6, i32* @acc_6, align 8

ST_11: tmp_31 [1/1] 0.00ns
:208  %tmp_31 = trunc i32 %temp_6 to i16

ST_11: stg_243 [1/1] 1.00ns
:209  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_31)

ST_11: d_i_1_load_15 [1/2] 2.39ns
:211  %d_i_1_load_15 = load i16* %d_i_1_addr_15, align 2


 <State 12>: 2.70ns
ST_12: stg_245 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i16* %d_o_3), !map !0

ST_12: stg_246 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i16* %d_o_2), !map !6

ST_12: stg_247 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i16* %d_o_1), !map !12

ST_12: stg_248 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i16* %d_o_0), !map !18

ST_12: stg_249 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap([16 x i16]* %d_i_1), !map !24

ST_12: stg_250 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap([16 x i16]* %d_i_0), !map !30

ST_12: stg_251 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecTopModule([9 x i8]* @array_io_str) nounwind

ST_12: stg_252 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecInterface(i16* %d_o_0, i16* %d_o_1, i16* %d_o_2, i16* %d_o_3, [8 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_12: stg_253 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecMemCore([16 x i16]* %d_i_0, [16 x i16]* %d_i_1, [1 x i8]* @p_str1, [12 x i8]* @p_str3, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_12: stg_254 [1/1] 1.00ns
:64  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_0, i16 %tmp_8)

ST_12: stg_255 [1/1] 1.00ns
:112  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_1, i16 %tmp_16)

ST_12: stg_256 [1/1] 1.00ns
:160  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_2, i16 %tmp_24)

ST_12: tmp_2_30 [1/1] 0.00ns
:212  %tmp_2_30 = sext i16 %d_i_1_load_15 to i32

ST_12: temp_7 [1/1] 1.70ns
:213  %temp_7 = add nsw i32 %acc_7_loc, %tmp_2_30

ST_12: stg_259 [1/1] 0.00ns
:214  store i32 %temp_7, i32* @acc_7, align 4

ST_12: tmp_32 [1/1] 0.00ns
:215  %tmp_32 = trunc i32 %temp_7 to i16

ST_12: stg_261 [1/1] 1.00ns
:216  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o_3, i16 %tmp_32)

ST_12: stg_262 [1/1] 0.00ns
:217  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
