-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce1 : OUT STD_LOGIC;
    in_block_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st6_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_pp1_stg0_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal indvar_flatten_reg_145 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_167 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten2_reg_190 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_66 : BOOLEAN;
    signal i_4_fu_258_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_476 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_77 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_mid2_fu_282_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_reg_490 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_296_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal i_5_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten2_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next2_fu_380_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_mid2_fu_392_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_mid2_reg_529 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_fu_406_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_534 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_441_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce1 : STD_LOGIC;
    signal col_inbuf_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_223_ap_start : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_ap_done : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_ap_idle : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_ap_ready : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_223_src_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_223_src_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_223_src_ce1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_src_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_223_tmp_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_223_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_223_dst_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_dst_we0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_223_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_223_tmp_11 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_209 : BOOLEAN;
    signal j_phi_fu_160_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal j_1_phi_fu_205_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_223_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_6_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_308_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_trn_cast_fu_304_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_340_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_trn_cast_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr6_cast_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_400_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_418_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_trn_cast_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr8_cast_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr9_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_450_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_trn_cast_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_cast_fu_457_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_fu_461_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_452 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component dct_dct_1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce1 : OUT STD_LOGIC;
        src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_dct_2d_col_inbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => row_outbuf_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => col_outbuf_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_dct_2d_col_inbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => col_inbuf_d0,
        q0 => col_inbuf_q0,
        address1 => col_inbuf_address1,
        ce1 => col_inbuf_ce1,
        q1 => col_inbuf_q1);

    grp_dct_dct_1d_fu_223 : component dct_dct_1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_dct_1d_fu_223_ap_start,
        ap_done => grp_dct_dct_1d_fu_223_ap_done,
        ap_idle => grp_dct_dct_1d_fu_223_ap_idle,
        ap_ready => grp_dct_dct_1d_fu_223_ap_ready,
        src_address0 => grp_dct_dct_1d_fu_223_src_address0,
        src_ce0 => grp_dct_dct_1d_fu_223_src_ce0,
        src_q0 => grp_dct_dct_1d_fu_223_src_q0,
        src_address1 => grp_dct_dct_1d_fu_223_src_address1,
        src_ce1 => grp_dct_dct_1d_fu_223_src_ce1,
        src_q1 => grp_dct_dct_1d_fu_223_src_q1,
        tmp_1 => grp_dct_dct_1d_fu_223_tmp_1,
        dst_address0 => grp_dct_dct_1d_fu_223_dst_address0,
        dst_ce0 => grp_dct_dct_1d_fu_223_dst_ce0,
        dst_we0 => grp_dct_dct_1d_fu_223_dst_we0,
        dst_d0 => grp_dct_dct_1d_fu_223_dst_d0,
        tmp_11 => grp_dct_dct_1d_fu_223_tmp_11);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((exitcond_flatten_fu_264_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_252_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_flatten_fu_264_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_252_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((exitcond_flatten_fu_264_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_flatten2_fu_374_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_362_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_362_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_dct_dct_1d_fu_223_ap_start_ap_start_reg assign process. --
    grp_dct_dct_1d_fu_223_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_dct_1d_fu_223_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_252_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_362_p2)))) then 
                    grp_dct_dct_1d_fu_223_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_dct_1d_fu_223_ap_ready)) then 
                    grp_dct_dct_1d_fu_223_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_167 assign process. --
    i_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_252_p2 = ap_const_lv1_0)))) then 
                i_1_reg_167 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_264_p2 = ap_const_lv1_0))) then 
                i_1_reg_167 <= i_6_fu_331_p2;
            end if; 
        end if;
    end process;

    -- i_2_reg_178 assign process. --
    i_2_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_264_p2 = ap_const_lv1_0)))) then 
                i_2_reg_178 <= ap_const_lv4_0;
            elsif ((not((ap_const_logic_0 = grp_dct_dct_1d_fu_223_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5))) then 
                i_2_reg_178 <= i_5_reg_515;
            end if; 
        end if;
    end process;

    -- i_3_reg_212 assign process. --
    i_3_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_362_p2)))) then 
                i_3_reg_212 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))) then 
                i_3_reg_212 <= i_7_fu_441_p2;
            end if; 
        end if;
    end process;

    -- i_reg_133 assign process. --
    i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_dct_dct_1d_fu_223_ap_done)))) then 
                i_reg_133 <= i_4_reg_476;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten2_reg_190 assign process. --
    indvar_flatten2_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_362_p2)))) then 
                indvar_flatten2_reg_190 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))) then 
                indvar_flatten2_reg_190 <= indvar_flatten_next2_fu_380_p2;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_145 assign process. --
    indvar_flatten_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_252_p2 = ap_const_lv1_0)))) then 
                indvar_flatten_reg_145 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_264_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_145 <= indvar_flatten_next_fu_270_p2;
            end if; 
        end if;
    end process;

    -- j_1_reg_201 assign process. --
    j_1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_362_p2)))) then 
                j_1_reg_201 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_520))) then 
                j_1_reg_201 <= j_1_mid2_reg_534;
            end if; 
        end if;
    end process;

    -- j_reg_156 assign process. --
    j_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_252_p2 = ap_const_lv1_0)))) then 
                j_reg_156 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_481 = ap_const_lv1_0))) then 
                j_reg_156 <= j_mid2_reg_495;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) then
                exitcond_flatten2_reg_520 <= exitcond_flatten2_fu_374_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                exitcond_flatten_reg_481 <= exitcond_flatten_fu_264_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_flatten_fu_264_p2 = ap_const_lv1_0))) then
                i_1_mid2_reg_490 <= i_1_mid2_fu_282_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))) then
                i_3_mid2_reg_529 <= i_3_mid2_fu_392_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_476 <= i_4_fu_258_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4)) then
                i_5_reg_515 <= i_5_fu_368_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))) then
                j_1_mid2_reg_534 <= j_1_mid2_fu_406_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_264_p2 = ap_const_lv1_0))) then
                j_mid2_reg_495 <= j_mid2_fu_296_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_252_p2, exitcond_flatten_fu_264_p2, ap_reg_ppiten_pp0_it0, exitcond2_fu_362_p2, exitcond_flatten2_fu_374_p2, ap_reg_ppiten_pp1_it0, grp_dct_dct_1d_fu_223_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond5_fu_252_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_dct_dct_1d_fu_223_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_264_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_4;
                end if;
            when ap_ST_st6_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_362_p2))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (not((ap_const_logic_0 = grp_dct_dct_1d_fu_223_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_flatten2_fu_374_p2))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when ap_ST_st10_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st10_fsm_7)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_209 assign process. --
    ap_sig_bdd_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_209 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_452 assign process. --
    ap_sig_bdd_452_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_452 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_66 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_77 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_77)
    begin
        if (ap_sig_bdd_77) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_6_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_7 assign process. --
    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_bdd_452)
    begin
        if (ap_sig_bdd_452) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_66)
    begin
        if (ap_sig_bdd_66) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_209)
    begin
        if (ap_sig_bdd_209) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_4 assign process. --
    ap_sig_cseq_ST_st6_fsm_4_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st6_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_inbuf_address0 assign process. --
    col_inbuf_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, grp_dct_dct_1d_fu_223_src_address0, ap_sig_cseq_ST_st7_fsm_5, tmp_8_fu_357_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_address0 <= tmp_8_fu_357_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_inbuf_address0 <= grp_dct_dct_1d_fu_223_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;

    col_inbuf_address1 <= grp_dct_dct_1d_fu_223_src_address1;

    -- col_inbuf_ce0 assign process. --
    col_inbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, grp_dct_dct_1d_fu_223_src_ce0, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_inbuf_ce0 <= grp_dct_dct_1d_fu_223_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_inbuf_ce1 assign process. --
    col_inbuf_ce1_assign_proc : process(grp_dct_dct_1d_fu_223_src_ce1, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_inbuf_ce1 <= grp_dct_dct_1d_fu_223_src_ce1;
        else 
            col_inbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= row_outbuf_q0;

    -- col_inbuf_we0 assign process. --
    col_inbuf_we0_assign_proc : process(exitcond_flatten_reg_481, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_481 = ap_const_lv1_0)))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_outbuf_address0 assign process. --
    col_outbuf_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it0, grp_dct_dct_1d_fu_223_dst_address0, ap_sig_cseq_ST_st7_fsm_5, tmp_1_fu_436_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            col_outbuf_address0 <= tmp_1_fu_436_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_outbuf_address0 <= grp_dct_dct_1d_fu_223_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_outbuf_ce0 assign process. --
    col_outbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it0, grp_dct_dct_1d_fu_223_dst_ce0, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_outbuf_ce0 <= grp_dct_dct_1d_fu_223_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_d0 <= grp_dct_dct_1d_fu_223_dst_d0;

    -- col_outbuf_we0 assign process. --
    col_outbuf_we0_assign_proc : process(grp_dct_dct_1d_fu_223_dst_we0, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_outbuf_we0 <= grp_dct_dct_1d_fu_223_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_386_p2 <= "1" when (i_3_reg_212 = ap_const_lv4_8) else "0";
    exitcond2_fu_362_p2 <= "1" when (i_2_reg_178 = ap_const_lv4_8) else "0";
    exitcond5_fu_252_p2 <= "1" when (i_reg_133 = ap_const_lv4_8) else "0";
    exitcond_flatten2_fu_374_p2 <= "1" when (indvar_flatten2_reg_190 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_264_p2 <= "1" when (indvar_flatten_reg_145 = ap_const_lv7_40) else "0";
    exitcond_fu_276_p2 <= "1" when (i_1_reg_167 = ap_const_lv4_8) else "0";
    grp_dct_dct_1d_fu_223_ap_start <= grp_dct_dct_1d_fu_223_ap_start_ap_start_reg;

    -- grp_dct_dct_1d_fu_223_src_q0 assign process. --
    grp_dct_dct_1d_fu_223_src_q0_assign_proc : process(in_block_q0, col_inbuf_q0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_223_src_q0 <= col_inbuf_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_223_src_q0 <= in_block_q0;
        else 
            grp_dct_dct_1d_fu_223_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_223_src_q1 assign process. --
    grp_dct_dct_1d_fu_223_src_q1_assign_proc : process(in_block_q1, col_inbuf_q1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_223_src_q1 <= col_inbuf_q1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_223_src_q1 <= in_block_q1;
        else 
            grp_dct_dct_1d_fu_223_src_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_223_tmp_1 assign process. --
    grp_dct_dct_1d_fu_223_tmp_1_assign_proc : process(i_reg_133, ap_sig_cseq_ST_st3_fsm_2, i_2_reg_178, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_223_tmp_1 <= i_2_reg_178;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_223_tmp_1 <= i_reg_133;
        else 
            grp_dct_dct_1d_fu_223_tmp_1 <= "XXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_223_tmp_11 assign process. --
    grp_dct_dct_1d_fu_223_tmp_11_assign_proc : process(i_reg_133, ap_sig_cseq_ST_st3_fsm_2, i_2_reg_178, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_223_tmp_11 <= i_2_reg_178;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_223_tmp_11 <= i_reg_133;
        else 
            grp_dct_dct_1d_fu_223_tmp_11 <= "XXXX";
        end if; 
    end process;

    i_1_mid2_fu_282_p3 <= 
        ap_const_lv4_0 when (exitcond_fu_276_p2(0) = '1') else 
        i_1_reg_167;
    i_3_mid2_fu_392_p3 <= 
        ap_const_lv4_0 when (exitcond1_fu_386_p2(0) = '1') else 
        i_3_reg_212;
    i_4_fu_258_p2 <= std_logic_vector(unsigned(i_reg_133) + unsigned(ap_const_lv4_1));
    i_5_fu_368_p2 <= std_logic_vector(unsigned(i_2_reg_178) + unsigned(ap_const_lv4_1));
    i_6_fu_331_p2 <= std_logic_vector(unsigned(i_1_mid2_fu_282_p3) + unsigned(ap_const_lv4_1));
    i_7_fu_441_p2 <= std_logic_vector(unsigned(i_3_mid2_fu_392_p3) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_dct_1d_fu_223_src_address0;
    in_block_address1 <= grp_dct_dct_1d_fu_223_src_address1;

    -- in_block_ce0 assign process. --
    in_block_ce0_assign_proc : process(grp_dct_dct_1d_fu_223_src_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_block_ce0 <= grp_dct_dct_1d_fu_223_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- in_block_ce1 assign process. --
    in_block_ce1_assign_proc : process(grp_dct_dct_1d_fu_223_src_ce1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_block_ce1 <= grp_dct_dct_1d_fu_223_src_ce1;
        else 
            in_block_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next2_fu_380_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_190) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_270_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_145) + unsigned(ap_const_lv7_1));
    j_1_mid2_fu_406_p3 <= 
        j_2_fu_400_p2 when (exitcond1_fu_386_p2(0) = '1') else 
        j_1_phi_fu_205_p4;

    -- j_1_phi_fu_205_p4 assign process. --
    j_1_phi_fu_205_p4_assign_proc : process(j_1_reg_201, exitcond_flatten2_reg_520, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it1, j_1_mid2_reg_534)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_520))) then 
            j_1_phi_fu_205_p4 <= j_1_mid2_reg_534;
        else 
            j_1_phi_fu_205_p4 <= j_1_reg_201;
        end if; 
    end process;

    j_2_fu_400_p2 <= std_logic_vector(unsigned(j_1_phi_fu_205_p4) + unsigned(ap_const_lv4_1));
    j_mid2_fu_296_p3 <= 
        j_s_fu_290_p2 when (exitcond_fu_276_p2(0) = '1') else 
        j_phi_fu_160_p4;

    -- j_phi_fu_160_p4 assign process. --
    j_phi_fu_160_p4_assign_proc : process(j_reg_156, exitcond_flatten_reg_481, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, j_mid2_reg_495)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_481 = ap_const_lv1_0))) then 
            j_phi_fu_160_p4 <= j_mid2_reg_495;
        else 
            j_phi_fu_160_p4 <= j_reg_156;
        end if; 
    end process;

    j_s_fu_290_p2 <= std_logic_vector(unsigned(j_phi_fu_160_p4) + unsigned(ap_const_lv4_1));
    out_block_address0 <= tmp_3_fu_467_p1(6 - 1 downto 0);

    -- out_block_ce0 assign process. --
    out_block_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    -- out_block_we0 assign process. --
    out_block_we0_assign_proc : process(exitcond_flatten2_reg_520, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_520)))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr3_cast_fu_457_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_450_p3),8));
    p_addr4_fu_461_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_447_p1) + unsigned(p_addr3_cast_fu_457_p1));
    p_addr5_fu_320_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_304_p1) + unsigned(p_addr_cast_fu_316_p1));
    p_addr6_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_340_p3),8));
    p_addr7_fu_351_p2 <= std_logic_vector(unsigned(tmp_2_trn_cast_fu_337_p1) + unsigned(p_addr6_cast_fu_347_p1));
    p_addr8_cast_fu_426_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_418_p3),8));
    p_addr9_fu_430_p2 <= std_logic_vector(unsigned(tmp_3_trn_cast_fu_414_p1) + unsigned(p_addr8_cast_fu_426_p1));
    p_addr_cast_fu_316_p1 <= std_logic_vector(resize(unsigned(tmp_fu_308_p3),8));

    -- row_outbuf_address0 assign process. --
    row_outbuf_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, grp_dct_dct_1d_fu_223_dst_address0, ap_sig_cseq_ST_st3_fsm_2, tmp_6_fu_326_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_outbuf_address0 <= tmp_6_fu_326_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_address0 <= grp_dct_dct_1d_fu_223_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, grp_dct_dct_1d_fu_223_dst_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_ce0 <= grp_dct_dct_1d_fu_223_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= grp_dct_dct_1d_fu_223_dst_d0;

    -- row_outbuf_we0 assign process. --
    row_outbuf_we0_assign_proc : process(grp_dct_dct_1d_fu_223_dst_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_we0 <= grp_dct_dct_1d_fu_223_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_436_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_430_p2),64));
    tmp_2_fu_450_p3 <= (j_1_mid2_reg_534 & ap_const_lv3_0);
    tmp_2_trn_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_reg_490),8));
    tmp_3_fu_467_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_461_p2),64));
    tmp_3_trn_cast_fu_414_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_fu_406_p3),8));
    tmp_4_trn_cast_fu_447_p1 <= std_logic_vector(resize(unsigned(i_3_mid2_reg_529),8));
    tmp_6_fu_326_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_320_p2),64));
    tmp_7_fu_340_p3 <= (j_mid2_reg_495 & ap_const_lv3_0);
    tmp_8_fu_357_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_351_p2),64));
    tmp_fu_308_p3 <= (i_1_mid2_fu_282_p3 & ap_const_lv3_0);
    tmp_s_fu_418_p3 <= (i_3_mid2_fu_392_p3 & ap_const_lv3_0);
    tmp_trn_cast_fu_304_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_296_p3),8));
end behav;
