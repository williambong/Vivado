-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st10_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_278 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal exitcond1_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal reg_282 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_addr_reg_608 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_1_reg_613 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_2_reg_618 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_3_reg_623 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_4_reg_628 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_5_reg_633 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_6_reg_638 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_7_reg_643 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr16_cast_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr16_cast_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_653_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_450_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_657 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_662 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr7_fu_465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_p_addr7_reg_678_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_1_load_reg_688 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_0_load_reg_698 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_1_fu_477_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_1_reg_703 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_3_load_reg_713 : STD_LOGIC_VECTOR (14 downto 0);
    signal src_load_5_reg_728 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_2_load_reg_743 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_3_fu_497_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_3_reg_748 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_4_load_reg_753 : STD_LOGIC_VECTOR (14 downto 0);
    signal src_load_4_reg_758 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_5_load_reg_763 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_load_reg_768 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_load_reg_773 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_592_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_reg_778 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_5_fu_516_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_5_reg_783 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_fu_522_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp1_fu_522_p2 : signal is "no";
    signal tmp1_reg_788 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_585_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_reg_793 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_reg_798 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_phi_fu_271_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_299_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_318_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr1_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_337_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr2_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr3_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_375_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr4_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr5_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr6_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_432_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_trn_cast_fu_461_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_1_fu_477_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_fu_477_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_3_fu_497_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_3_fu_497_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_5_fu_516_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_5_fu_516_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_569_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_577_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_546_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp4_fu_546_p2 : signal is "no";
    signal tmp_2_fu_550_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_577_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_577_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_585_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_585_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_592_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_592_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_481 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_592_p10 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mac_muladd_16s_15s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_dct_1d_dct_coeff_table_0
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_dct_1d_dct_coeff_table_1
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_dct_1d_dct_coeff_table_2
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_dct_1d_dct_coeff_table_3
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_dct_1d_dct_coeff_table_4
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_dct_1d_dct_coeff_table_5
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_dct_1d_dct_coeff_table_6
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_dct_1d_dct_coeff_table_7
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mac_muladd_16s_15s_29s_29_1_U0 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_569_p0,
        din1 => grp_fu_569_p1,
        din2 => grp_fu_569_p2,
        dout => grp_fu_569_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U1 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_577_p0,
        din1 => grp_fu_577_p1,
        din2 => grp_fu_577_p2,
        dout => grp_fu_577_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U2 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_585_p0,
        din1 => grp_fu_585_p1,
        din2 => grp_fu_585_p2,
        dout => grp_fu_585_p3);

    dct_mac_muladd_16s_14ns_29s_29_1_U3 : component dct_mac_muladd_16s_14ns_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_592_p0,
        din1 => grp_fu_592_p1,
        din2 => grp_fu_592_p2,
        dout => grp_fu_592_p3);

    dct_mac_muladd_16s_15s_14ns_29_1_U4 : component dct_mac_muladd_16s_15s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_599_p0,
        din1 => grp_fu_599_p1,
        din2 => grp_fu_599_p2,
        dout => grp_fu_599_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_444_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((exitcond1_reg_653 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- k_reg_267 assign process. --
    k_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
                k_reg_267 <= k_1_reg_657;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_267 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond1_reg_653_pp0_it1 <= exitcond1_reg_653;
                ap_reg_ppstg_p_addr7_reg_678_pp0_it1 <= p_addr7_reg_678;
                exitcond1_reg_653 <= exitcond1_fu_444_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                dct_coeff_table_0_load_reg_698 <= dct_coeff_table_0_q0;
                dct_coeff_table_3_load_reg_713 <= dct_coeff_table_3_q0;
                src_load_5_reg_728 <= src_q1;
                tmp_8_1_reg_703 <= tmp_8_1_fu_477_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_653 = ap_const_lv1_0))) then
                dct_coeff_table_1_load_reg_688 <= dct_coeff_table_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                dct_coeff_table_2_load_reg_743 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_load_reg_753 <= dct_coeff_table_4_q0;
                dct_coeff_table_5_load_reg_763 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_768 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_load_reg_773 <= dct_coeff_table_7_q0;
                src_load_4_reg_758 <= src_q1;
                tmp2_reg_778 <= grp_fu_592_p3;
                tmp_8_3_reg_748 <= tmp_8_3_fu_497_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then
                k_1_reg_657 <= k_1_fu_450_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    p_addr16_cast_reg_648(6 downto 3) <= p_addr16_cast_fu_440_p1(6 downto 3);
                    src_addr_1_reg_613(5 downto 3) <= tmp_9_fu_313_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_2_reg_618(5 downto 3) <= tmp_12_fu_332_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_3_reg_623(5 downto 3) <= tmp_14_fu_351_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_4_reg_628(5 downto 3) <= tmp_16_fu_370_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_5_reg_633(5 downto 3) <= tmp_18_fu_389_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_6_reg_638(5 downto 3) <= tmp_20_fu_408_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_7_reg_643(5 downto 3) <= tmp_22_fu_427_p1(6 - 1 downto 0)(5 downto 3);
                    src_addr_reg_608(5 downto 3) <= tmp_6_fu_294_p1(6 - 1 downto 0)(5 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_444_p2))) then
                p_addr7_reg_678 <= p_addr7_fu_465_p2;
                    tmp_reg_662(3 downto 0) <= tmp_fu_456_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_653 = ap_const_lv1_0)) or ((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then
                reg_278 <= src_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_653 = ap_const_lv1_0)) or ((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)))) then
                reg_282 <= src_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then
                tmp1_reg_788 <= tmp1_fu_522_p2;
                tmp_8_5_reg_783 <= tmp_8_5_fu_516_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_653_pp0_it1))) then
                tmp6_reg_793 <= grp_fu_585_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_653_pp0_it1))) then
                tmp_4_reg_798 <= tmp_2_fu_550_p2(28 downto 13);
            end if;
        end if;
    end process;
    src_addr_reg_608(2 downto 0) <= "000";
    src_addr_1_reg_613(2 downto 0) <= "001";
    src_addr_2_reg_618(2 downto 0) <= "010";
    src_addr_3_reg_623(2 downto 0) <= "011";
    src_addr_4_reg_628(2 downto 0) <= "100";
    src_addr_5_reg_633(2 downto 0) <= "101";
    src_addr_6_reg_638(2 downto 0) <= "110";
    src_addr_7_reg_643(2 downto 0) <= "111";
    p_addr16_cast_reg_648(2 downto 0) <= "000";
    p_addr16_cast_reg_648(7) <= '0';
    tmp_reg_662(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_4, exitcond1_fu_444_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond1_fu_444_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_5;
                end if;
            when ap_ST_st10_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st10_fsm_5)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_481 assign process. --
    ap_sig_bdd_481_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_481 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_5 assign process. --
    ap_sig_cseq_ST_st10_fsm_5_assign_proc : process(ap_sig_bdd_481)
    begin
        if (ap_sig_bdd_481) then 
            ap_sig_cseq_ST_st10_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_0_ce0 assign process. --
    dct_coeff_table_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= tmp_fu_456_p1(3 - 1 downto 0);

    -- dct_coeff_table_1_ce0 assign process. --
    dct_coeff_table_1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_2_ce0 assign process. --
    dct_coeff_table_2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_3_ce0 assign process. --
    dct_coeff_table_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_4_ce0 assign process. --
    dct_coeff_table_4_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_5_ce0 assign process. --
    dct_coeff_table_5_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_6_ce0 assign process. --
    dct_coeff_table_6_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= tmp_reg_662(3 - 1 downto 0);

    -- dct_coeff_table_7_ce0 assign process. --
    dct_coeff_table_7_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_24_fu_565_p1(6 - 1 downto 0);

    -- dst_ce0 assign process. --
    dst_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_4_reg_798;

    -- dst_we0 assign process. --
    dst_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_reg_ppstg_exitcond1_reg_653_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_653_pp0_it1)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_444_p2 <= "1" when (k_phi_fu_271_p4 = ap_const_lv4_8) else "0";
    grp_fu_569_p0 <= reg_278;
    grp_fu_569_p1 <= dct_coeff_table_2_load_reg_743;
    grp_fu_569_p2 <= tmp_8_3_reg_748;
    grp_fu_577_p0 <= src_load_4_reg_758;
    grp_fu_577_p1 <= dct_coeff_table_4_load_reg_753;
    grp_fu_577_p2 <= tmp_8_5_reg_783;
    grp_fu_585_p0 <= reg_278;
    grp_fu_585_p1 <= dct_coeff_table_6_load_reg_768;
    grp_fu_585_p2 <= grp_fu_599_p3;
    grp_fu_592_p0 <= reg_278;
    grp_fu_592_p1 <= grp_fu_592_p10(14 - 1 downto 0);
    grp_fu_592_p10 <= std_logic_vector(resize(unsigned(dct_coeff_table_0_load_reg_698),29));
    grp_fu_592_p2 <= tmp_8_1_reg_703;
    grp_fu_599_p0 <= reg_282;
    grp_fu_599_p1 <= dct_coeff_table_7_load_reg_773;
    grp_fu_599_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    k_1_fu_450_p2 <= std_logic_vector(unsigned(k_phi_fu_271_p4) + unsigned(ap_const_lv4_1));

    -- k_phi_fu_271_p4 assign process. --
    k_phi_fu_271_p4_assign_proc : process(k_reg_267, ap_reg_ppiten_pp0_it1, exitcond1_reg_653, ap_sig_cseq_ST_pp0_stg0_fsm_1, k_1_reg_657)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            k_phi_fu_271_p4 <= k_1_reg_657;
        else 
            k_phi_fu_271_p4 <= k_reg_267;
        end if; 
    end process;

    p_addr16_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_432_p3),8));
    p_addr1_fu_324_p3 <= (ap_const_lv25_0 & tmp_10_fu_318_p2);
    p_addr2_fu_343_p3 <= (ap_const_lv25_0 & tmp_13_fu_337_p2);
    p_addr3_fu_362_p3 <= (ap_const_lv25_0 & tmp_15_fu_356_p2);
    p_addr4_fu_381_p3 <= (ap_const_lv25_0 & tmp_17_fu_375_p2);
    p_addr5_fu_400_p3 <= (ap_const_lv25_0 & tmp_19_fu_394_p2);
    p_addr6_fu_419_p3 <= (ap_const_lv25_0 & tmp_21_fu_413_p2);
    p_addr7_fu_465_p2 <= std_logic_vector(unsigned(p_addr16_cast_reg_648) + unsigned(tmp_trn_cast_fu_461_p1));
    p_addr_fu_305_p3 <= (ap_const_lv25_0 & tmp_7_fu_299_p2);

    -- src_address0 assign process. --
    src_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_1, src_addr_reg_608, src_addr_1_reg_613, src_addr_2_reg_618, src_addr_6_reg_638)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                src_address0 <= src_addr_6_reg_638;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                src_address0 <= src_addr_2_reg_618;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                src_address0 <= src_addr_reg_608;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                src_address0 <= src_addr_1_reg_613;
            else 
                src_address0 <= "XXXXXX";
            end if;
        else 
            src_address0 <= "XXXXXX";
        end if; 
    end process;


    -- src_address1 assign process. --
    src_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_1, src_addr_3_reg_623, src_addr_4_reg_628, src_addr_5_reg_633, src_addr_7_reg_643)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                src_address1 <= src_addr_7_reg_643;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                src_address1 <= src_addr_4_reg_628;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                src_address1 <= src_addr_5_reg_633;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                src_address1 <= src_addr_3_reg_623;
            else 
                src_address1 <= "XXXXXX";
            end if;
        else 
            src_address1 <= "XXXXXX";
        end if; 
    end process;


    -- src_ce0 assign process. --
    src_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- src_ce1 assign process. --
    src_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_522_p2 <= std_logic_vector(signed(tmp2_reg_778) + signed(grp_fu_569_p3));
    tmp4_fu_546_p2 <= std_logic_vector(signed(grp_fu_577_p3) + signed(tmp6_reg_793));
    tmp_10_fu_318_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_2);
    tmp_12_fu_332_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_324_p3),64));
    tmp_13_fu_337_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_3);
    tmp_14_fu_351_p1 <= std_logic_vector(resize(unsigned(p_addr2_fu_343_p3),64));
    tmp_15_fu_356_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_4);
    tmp_16_fu_370_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_362_p3),64));
    tmp_17_fu_375_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_5);
    tmp_18_fu_389_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_381_p3),64));
    tmp_19_fu_394_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_6);
    tmp_20_fu_408_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_400_p3),64));
    tmp_21_fu_413_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_7);
    tmp_22_fu_427_p1 <= std_logic_vector(resize(unsigned(p_addr6_fu_419_p3),64));
    tmp_23_fu_432_p3 <= (tmp_11 & ap_const_lv3_0);
    tmp_24_fu_565_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_addr7_reg_678_pp0_it1),64));
    tmp_2_fu_550_p2 <= std_logic_vector(signed(tmp1_reg_788) + signed(tmp4_fu_546_p2));
    tmp_5_fu_286_p3 <= (tmp_1 & ap_const_lv3_0);
    tmp_6_fu_294_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_286_p3),64));
    tmp_7_fu_299_p2 <= (tmp_5_fu_286_p3 or ap_const_lv7_1);
    tmp_8_1_fu_477_p0 <= reg_278;
    tmp_8_1_fu_477_p1 <= dct_coeff_table_1_load_reg_688;
    tmp_8_1_fu_477_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_1_fu_477_p0) * signed(tmp_8_1_fu_477_p1))), 29));
    tmp_8_3_fu_497_p0 <= reg_282;
    tmp_8_3_fu_497_p1 <= dct_coeff_table_3_load_reg_713;
    tmp_8_3_fu_497_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_3_fu_497_p0) * signed(tmp_8_3_fu_497_p1))), 29));
    tmp_8_5_fu_516_p0 <= src_load_5_reg_728;
    tmp_8_5_fu_516_p1 <= dct_coeff_table_5_load_reg_763;
    tmp_8_5_fu_516_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_5_fu_516_p0) * signed(tmp_8_5_fu_516_p1))), 29));
    tmp_9_fu_313_p1 <= std_logic_vector(resize(unsigned(p_addr_fu_305_p3),64));
    tmp_fu_456_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_271_p4),64));
    tmp_trn_cast_fu_461_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_271_p4),8));
end behav;
