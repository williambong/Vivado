-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal i_4_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal j_2_fu_204_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_371 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_63 : BOOLEAN;
    signal tmp_trn_cast_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr6_cast_fu_222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr6_cast_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_389 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal exitcond3_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr7_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_reg_399 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal j_3_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal tmp_3_trn_cast_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_trn_cast_reg_420 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr4_cast_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_cast_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_7_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_433 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal exitcond_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr5_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_reg_443 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_171_ap_start : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_ap_done : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_ap_idle : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_ap_ready : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_171_src_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_171_tmp_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_171_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_171_dst_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_dst_we0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_171_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_171_tmp_11 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_184 : BOOLEAN;
    signal j_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal i_2_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal j_1_reg_149 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal grp_dct_dct_1d_fu_171_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_9_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_214_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_242_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_trn_cast_fu_238_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_301_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_329_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr2_cast_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_trn_cast_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component dct_dct_1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => row_outbuf_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => col_outbuf_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => col_inbuf_d0,
        q0 => col_inbuf_q0);

    grp_dct_dct_1d_fu_171 : component dct_dct_1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_dct_1d_fu_171_ap_start,
        ap_done => grp_dct_dct_1d_fu_171_ap_done,
        ap_idle => grp_dct_dct_1d_fu_171_ap_idle,
        ap_ready => grp_dct_dct_1d_fu_171_ap_ready,
        src_address0 => grp_dct_dct_1d_fu_171_src_address0,
        src_ce0 => grp_dct_dct_1d_fu_171_src_ce0,
        src_q0 => grp_dct_dct_1d_fu_171_src_q0,
        tmp_1 => grp_dct_dct_1d_fu_171_tmp_1,
        dst_address0 => grp_dct_dct_1d_fu_171_dst_address0,
        dst_ce0 => grp_dct_dct_1d_fu_171_dst_ce0,
        dst_we0 => grp_dct_dct_1d_fu_171_dst_we0,
        dst_d0 => grp_dct_dct_1d_fu_171_dst_d0,
        tmp_11 => grp_dct_dct_1d_fu_171_tmp_11);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_dct_dct_1d_fu_171_ap_start_ap_start_reg assign process. --
    grp_dct_dct_1d_fu_171_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_dct_1d_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_186_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond2_fu_273_p2)))) then 
                    grp_dct_dct_1d_fu_171_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_dct_1d_fu_171_ap_ready)) then 
                    grp_dct_dct_1d_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_126 assign process. --
    i_1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_1_reg_126 <= i_6_reg_389;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond4_fu_198_p2 = ap_const_lv1_0))) then 
                i_1_reg_126 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_2_reg_137 assign process. --
    i_2_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond4_fu_198_p2 = ap_const_lv1_0)))) then 
                i_2_reg_137 <= ap_const_lv4_0;
            elsif ((not((ap_const_logic_0 = grp_dct_dct_1d_fu_171_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
                i_2_reg_137 <= i_5_reg_407;
            end if; 
        end if;
    end process;

    -- i_3_reg_160 assign process. --
    i_3_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                i_3_reg_160 <= i_7_reg_433;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_285_p2))) then 
                i_3_reg_160 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_reg_103 assign process. --
    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_dct_dct_1d_fu_171_ap_done)))) then 
                i_reg_103 <= i_4_reg_363;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_149 assign process. --
    j_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond2_fu_273_p2)))) then 
                j_1_reg_149 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_313_p2)))) then 
                j_1_reg_149 <= j_3_reg_415;
            end if; 
        end if;
    end process;

    -- j_reg_115 assign process. --
    j_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond5_fu_186_p2)))) then 
                j_reg_115 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_226_p2)))) then 
                j_reg_115 <= j_2_reg_371;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_363 <= i_4_fu_192_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                i_5_reg_407 <= i_5_fu_279_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_6_reg_389 <= i_6_fu_232_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                i_7_reg_433 <= i_7_fu_319_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_2_reg_371 <= j_2_fu_204_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                j_3_reg_415 <= j_3_fu_291_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_285_p2))) then
                    p_addr4_cast_reg_425(6 downto 3) <= p_addr4_cast_fu_309_p1(6 downto 3);
                    tmp_3_trn_cast_reg_420(3 downto 0) <= tmp_3_trn_cast_fu_297_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_fu_313_p2))) then
                p_addr5_reg_443 <= p_addr5_fu_351_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond4_fu_198_p2 = ap_const_lv1_0))) then
                    p_addr6_cast_reg_381(6 downto 3) <= p_addr6_cast_fu_222_p1(6 downto 3);
                    tmp_trn_cast_reg_376(3 downto 0) <= tmp_trn_cast_fu_210_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_226_p2))) then
                p_addr7_reg_399 <= p_addr7_fu_264_p2;
            end if;
        end if;
    end process;
    tmp_trn_cast_reg_376(7 downto 4) <= "0000";
    p_addr6_cast_reg_381(2 downto 0) <= "000";
    p_addr6_cast_reg_381(7) <= '0';
    tmp_3_trn_cast_reg_420(7 downto 4) <= "0000";
    p_addr4_cast_reg_425(2 downto 0) <= "000";
    p_addr4_cast_reg_425(7) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_198_p2, exitcond3_fu_226_p2, exitcond1_fu_285_p2, exitcond_fu_313_p2, grp_dct_dct_1d_fu_171_ap_done, exitcond5_fu_186_p2, exitcond2_fu_273_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_186_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_dct_dct_1d_fu_171_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond4_fu_198_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_226_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_273_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_dct_dct_1d_fu_171_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_285_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_313_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st9_fsm_8, exitcond1_fu_285_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_285_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, exitcond1_fu_285_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_285_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_184 assign process. --
    ap_sig_bdd_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_184 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_63 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_184)
    begin
        if (ap_sig_bdd_184) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_63)
    begin
        if (ap_sig_bdd_63) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_inbuf_address0 assign process. --
    col_inbuf_address0_assign_proc : process(grp_dct_dct_1d_fu_171_src_address0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, tmp_1_fu_269_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            col_inbuf_address0 <= tmp_1_fu_269_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            col_inbuf_address0 <= grp_dct_dct_1d_fu_171_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_inbuf_ce0 assign process. --
    col_inbuf_ce0_assign_proc : process(grp_dct_dct_1d_fu_171_src_ce0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            col_inbuf_ce0 <= grp_dct_dct_1d_fu_171_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= row_outbuf_q0;

    -- col_inbuf_we0 assign process. --
    col_inbuf_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_outbuf_address0 assign process. --
    col_outbuf_address0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, grp_dct_dct_1d_fu_171_dst_address0, ap_sig_cseq_ST_st8_fsm_7, tmp_3_fu_346_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            col_outbuf_address0 <= tmp_3_fu_346_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            col_outbuf_address0 <= grp_dct_dct_1d_fu_171_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_outbuf_ce0 assign process. --
    col_outbuf_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, grp_dct_dct_1d_fu_171_dst_ce0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            col_outbuf_ce0 <= grp_dct_dct_1d_fu_171_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_d0 <= grp_dct_dct_1d_fu_171_dst_d0;

    -- col_outbuf_we0 assign process. --
    col_outbuf_we0_assign_proc : process(grp_dct_dct_1d_fu_171_dst_we0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            col_outbuf_we0 <= grp_dct_dct_1d_fu_171_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_285_p2 <= "1" when (j_1_reg_149 = ap_const_lv4_8) else "0";
    exitcond2_fu_273_p2 <= "1" when (i_2_reg_137 = ap_const_lv4_8) else "0";
    exitcond3_fu_226_p2 <= "1" when (i_1_reg_126 = ap_const_lv4_8) else "0";
    exitcond4_fu_198_p2 <= "1" when (j_reg_115 = ap_const_lv4_8) else "0";
    exitcond5_fu_186_p2 <= "1" when (i_reg_103 = ap_const_lv4_8) else "0";
    exitcond_fu_313_p2 <= "1" when (i_3_reg_160 = ap_const_lv4_8) else "0";
    grp_dct_dct_1d_fu_171_ap_start <= grp_dct_dct_1d_fu_171_ap_start_ap_start_reg;

    -- grp_dct_dct_1d_fu_171_src_q0 assign process. --
    grp_dct_dct_1d_fu_171_src_q0_assign_proc : process(in_block_q0, col_inbuf_q0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dct_dct_1d_fu_171_src_q0 <= col_inbuf_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_171_src_q0 <= in_block_q0;
        else 
            grp_dct_dct_1d_fu_171_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_171_tmp_1 assign process. --
    grp_dct_dct_1d_fu_171_tmp_1_assign_proc : process(i_reg_103, ap_sig_cseq_ST_st3_fsm_2, i_2_reg_137, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dct_dct_1d_fu_171_tmp_1 <= i_2_reg_137;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_171_tmp_1 <= i_reg_103;
        else 
            grp_dct_dct_1d_fu_171_tmp_1 <= "XXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_171_tmp_11 assign process. --
    grp_dct_dct_1d_fu_171_tmp_11_assign_proc : process(i_reg_103, ap_sig_cseq_ST_st3_fsm_2, i_2_reg_137, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dct_dct_1d_fu_171_tmp_11 <= i_2_reg_137;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_171_tmp_11 <= i_reg_103;
        else 
            grp_dct_dct_1d_fu_171_tmp_11 <= "XXXX";
        end if; 
    end process;

    i_4_fu_192_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv4_1));
    i_5_fu_279_p2 <= std_logic_vector(unsigned(i_2_reg_137) + unsigned(ap_const_lv4_1));
    i_6_fu_232_p2 <= std_logic_vector(unsigned(i_1_reg_126) + unsigned(ap_const_lv4_1));
    i_7_fu_319_p2 <= std_logic_vector(unsigned(i_3_reg_160) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_dct_1d_fu_171_src_address0;

    -- in_block_ce0 assign process. --
    in_block_ce0_assign_proc : process(grp_dct_dct_1d_fu_171_src_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_block_ce0 <= grp_dct_dct_1d_fu_171_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_204_p2 <= std_logic_vector(unsigned(j_reg_115) + unsigned(ap_const_lv4_1));
    j_3_fu_291_p2 <= std_logic_vector(unsigned(j_1_reg_149) + unsigned(ap_const_lv4_1));
    out_block_address0 <= tmp_4_fu_356_p1(6 - 1 downto 0);

    -- out_block_ce0 assign process. --
    out_block_ce0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    -- out_block_we0 assign process. --
    out_block_we0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_254_p2 <= std_logic_vector(unsigned(tmp_trn_cast_reg_376) + unsigned(p_addr_cast_fu_250_p1));
    p_addr2_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_329_p3),8));
    p_addr3_fu_341_p2 <= std_logic_vector(unsigned(tmp_3_trn_cast_reg_420) + unsigned(p_addr2_cast_fu_337_p1));
    p_addr4_cast_fu_309_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_301_p3),8));
    p_addr5_fu_351_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_325_p1) + unsigned(p_addr4_cast_reg_425));
    p_addr6_cast_fu_222_p1 <= std_logic_vector(resize(unsigned(tmp_fu_214_p3),8));
    p_addr7_fu_264_p2 <= std_logic_vector(unsigned(tmp_2_trn_cast_fu_238_p1) + unsigned(p_addr6_cast_reg_381));
    p_addr_cast_fu_250_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_242_p3),8));

    -- row_outbuf_address0 assign process. --
    row_outbuf_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_dct_dct_1d_fu_171_dst_address0, ap_sig_cseq_ST_st3_fsm_2, tmp_9_fu_259_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            row_outbuf_address0 <= tmp_9_fu_259_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_address0 <= grp_dct_dct_1d_fu_171_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, grp_dct_dct_1d_fu_171_dst_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_ce0 <= grp_dct_dct_1d_fu_171_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= grp_dct_dct_1d_fu_171_dst_d0;

    -- row_outbuf_we0 assign process. --
    row_outbuf_we0_assign_proc : process(grp_dct_dct_1d_fu_171_dst_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_we0 <= grp_dct_dct_1d_fu_171_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_269_p1 <= std_logic_vector(resize(unsigned(p_addr7_reg_399),64));
    tmp_2_fu_329_p3 <= (i_3_reg_160 & ap_const_lv3_0);
    tmp_2_trn_cast_fu_238_p1 <= std_logic_vector(resize(unsigned(i_1_reg_126),8));
    tmp_3_fu_346_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_341_p2),64));
    tmp_3_trn_cast_fu_297_p1 <= std_logic_vector(resize(unsigned(j_1_reg_149),8));
    tmp_4_fu_356_p1 <= std_logic_vector(resize(unsigned(p_addr5_reg_443),64));
    tmp_4_trn_cast_fu_325_p1 <= std_logic_vector(resize(unsigned(i_3_reg_160),8));
    tmp_7_fu_242_p3 <= (i_1_reg_126 & ap_const_lv3_0);
    tmp_9_fu_259_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_254_p2),64));
    tmp_fu_214_p3 <= (j_reg_115 & ap_const_lv3_0);
    tmp_s_fu_301_p3 <= (j_1_reg_149 & ap_const_lv3_0);
    tmp_trn_cast_fu_210_p1 <= std_logic_vector(resize(unsigned(j_reg_115),8));
end behav;
