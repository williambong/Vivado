// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_dct_2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_block_address0,
        in_block_ce0,
        in_block_q0,
        out_block_address0,
        out_block_ce0,
        out_block_we0,
        out_block_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 11'b1;
parameter    ap_ST_st2_fsm_1 = 11'b10;
parameter    ap_ST_st3_fsm_2 = 11'b100;
parameter    ap_ST_st4_fsm_3 = 11'b1000;
parameter    ap_ST_st5_fsm_4 = 11'b10000;
parameter    ap_ST_st6_fsm_5 = 11'b100000;
parameter    ap_ST_st7_fsm_6 = 11'b1000000;
parameter    ap_ST_st8_fsm_7 = 11'b10000000;
parameter    ap_ST_st9_fsm_8 = 11'b100000000;
parameter    ap_ST_st10_fsm_9 = 11'b1000000000;
parameter    ap_ST_st11_fsm_10 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_block_address0;
output   in_block_ce0;
input  [15:0] in_block_q0;
output  [5:0] out_block_address0;
output   out_block_ce0;
output   out_block_we0;
output  [15:0] out_block_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_block_ce0;
reg out_block_ce0;
reg out_block_we0;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm = 11'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_29;
wire   [3:0] i_4_fu_192_p2;
reg   [3:0] i_4_reg_363;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_54;
wire   [3:0] j_2_fu_204_p2;
reg   [3:0] j_2_reg_371;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_63;
wire   [7:0] tmp_trn_cast_fu_210_p1;
reg   [7:0] tmp_trn_cast_reg_376;
wire   [0:0] exitcond4_fu_198_p2;
wire   [7:0] p_addr6_cast_fu_222_p1;
reg   [7:0] p_addr6_cast_reg_381;
wire   [3:0] i_6_fu_232_p2;
reg   [3:0] i_6_reg_389;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_80;
wire   [0:0] exitcond3_fu_226_p2;
wire   [7:0] p_addr7_fu_264_p2;
reg   [7:0] p_addr7_reg_399;
wire   [3:0] i_5_fu_279_p2;
reg   [3:0] i_5_reg_407;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_96;
wire   [3:0] j_3_fu_291_p2;
reg   [3:0] j_3_reg_415;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_105;
wire   [7:0] tmp_3_trn_cast_fu_297_p1;
reg   [7:0] tmp_3_trn_cast_reg_420;
wire   [0:0] exitcond1_fu_285_p2;
wire   [7:0] p_addr4_cast_fu_309_p1;
reg   [7:0] p_addr4_cast_reg_425;
wire   [3:0] i_7_fu_319_p2;
reg   [3:0] i_7_reg_433;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_121;
wire   [0:0] exitcond_fu_313_p2;
wire   [7:0] p_addr5_fu_351_p2;
reg   [7:0] p_addr5_reg_443;
reg   [5:0] row_outbuf_address0;
reg    row_outbuf_ce0;
reg    row_outbuf_we0;
wire   [15:0] row_outbuf_d0;
wire   [15:0] row_outbuf_q0;
reg   [5:0] col_outbuf_address0;
reg    col_outbuf_ce0;
reg    col_outbuf_we0;
wire   [15:0] col_outbuf_d0;
wire   [15:0] col_outbuf_q0;
reg   [5:0] col_inbuf_address0;
reg    col_inbuf_ce0;
reg    col_inbuf_we0;
wire   [15:0] col_inbuf_d0;
wire   [15:0] col_inbuf_q0;
wire    grp_dct_dct_1d_fu_171_ap_start;
wire    grp_dct_dct_1d_fu_171_ap_done;
wire    grp_dct_dct_1d_fu_171_ap_idle;
wire    grp_dct_dct_1d_fu_171_ap_ready;
wire   [5:0] grp_dct_dct_1d_fu_171_src_address0;
wire    grp_dct_dct_1d_fu_171_src_ce0;
reg   [15:0] grp_dct_dct_1d_fu_171_src_q0;
reg   [3:0] grp_dct_dct_1d_fu_171_tmp_1;
wire   [5:0] grp_dct_dct_1d_fu_171_dst_address0;
wire    grp_dct_dct_1d_fu_171_dst_ce0;
wire    grp_dct_dct_1d_fu_171_dst_we0;
wire   [15:0] grp_dct_dct_1d_fu_171_dst_d0;
reg   [3:0] grp_dct_dct_1d_fu_171_tmp_11;
reg   [3:0] i_reg_103;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_184;
reg   [3:0] j_reg_115;
wire   [0:0] exitcond5_fu_186_p2;
reg   [3:0] i_1_reg_126;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_204;
reg   [3:0] i_2_reg_137;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_213;
reg   [3:0] j_1_reg_149;
wire   [0:0] exitcond2_fu_273_p2;
reg   [3:0] i_3_reg_160;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_233;
reg    grp_dct_dct_1d_fu_171_ap_start_ap_start_reg = 1'b0;
wire   [63:0] tmp_9_fu_259_p1;
wire   [63:0] tmp_1_fu_269_p1;
wire   [63:0] tmp_3_fu_346_p1;
wire   [63:0] tmp_4_fu_356_p1;
wire   [6:0] tmp_fu_214_p3;
wire   [6:0] tmp_7_fu_242_p3;
wire   [7:0] p_addr_cast_fu_250_p1;
wire   [7:0] p_addr1_fu_254_p2;
wire   [7:0] tmp_2_trn_cast_fu_238_p1;
wire   [6:0] tmp_s_fu_301_p3;
wire   [6:0] tmp_2_fu_329_p3;
wire   [7:0] p_addr2_cast_fu_337_p1;
wire   [7:0] p_addr3_fu_341_p2;
wire   [7:0] tmp_4_trn_cast_fu_325_p1;
reg   [10:0] ap_NS_fsm;


dct_dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
row_outbuf_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( row_outbuf_address0 ),
    .ce0( row_outbuf_ce0 ),
    .we0( row_outbuf_we0 ),
    .d0( row_outbuf_d0 ),
    .q0( row_outbuf_q0 )
);

dct_dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
col_outbuf_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( col_outbuf_address0 ),
    .ce0( col_outbuf_ce0 ),
    .we0( col_outbuf_we0 ),
    .d0( col_outbuf_d0 ),
    .q0( col_outbuf_q0 )
);

dct_dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
col_inbuf_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( col_inbuf_address0 ),
    .ce0( col_inbuf_ce0 ),
    .we0( col_inbuf_we0 ),
    .d0( col_inbuf_d0 ),
    .q0( col_inbuf_q0 )
);

dct_dct_1d grp_dct_dct_1d_fu_171(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_dct_dct_1d_fu_171_ap_start ),
    .ap_done( grp_dct_dct_1d_fu_171_ap_done ),
    .ap_idle( grp_dct_dct_1d_fu_171_ap_idle ),
    .ap_ready( grp_dct_dct_1d_fu_171_ap_ready ),
    .src_address0( grp_dct_dct_1d_fu_171_src_address0 ),
    .src_ce0( grp_dct_dct_1d_fu_171_src_ce0 ),
    .src_q0( grp_dct_dct_1d_fu_171_src_q0 ),
    .tmp_1( grp_dct_dct_1d_fu_171_tmp_1 ),
    .dst_address0( grp_dct_dct_1d_fu_171_dst_address0 ),
    .dst_ce0( grp_dct_dct_1d_fu_171_dst_ce0 ),
    .dst_we0( grp_dct_dct_1d_fu_171_dst_we0 ),
    .dst_d0( grp_dct_dct_1d_fu_171_dst_d0 ),
    .tmp_11( grp_dct_dct_1d_fu_171_tmp_11 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_dct_dct_1d_fu_171_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_dct_dct_1d_fu_171_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_dct_dct_1d_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond5_fu_186_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond2_fu_273_p2)))) begin
            grp_dct_dct_1d_fu_171_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_dct_dct_1d_fu_171_ap_ready)) begin
            grp_dct_dct_1d_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        i_1_reg_126 <= i_6_reg_389;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (exitcond4_fu_198_p2 == ap_const_lv1_0))) begin
        i_1_reg_126 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(exitcond4_fu_198_p2 == ap_const_lv1_0))) begin
        i_2_reg_137 <= ap_const_lv4_0;
    end else if ((~(ap_const_logic_0 == grp_dct_dct_1d_fu_171_ap_done) & (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        i_2_reg_137 <= i_5_reg_407;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        i_3_reg_160 <= i_7_reg_433;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == exitcond1_fu_285_p2))) begin
        i_3_reg_160 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_logic_0 == grp_dct_dct_1d_fu_171_ap_done))) begin
        i_reg_103 <= i_4_reg_363;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_103 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond2_fu_273_p2))) begin
        j_1_reg_149 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == exitcond_fu_313_p2))) begin
        j_1_reg_149 <= j_3_reg_415;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond5_fu_186_p2))) begin
        j_reg_115 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond3_fu_226_p2))) begin
        j_reg_115 <= j_2_reg_371;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_4_reg_363 <= i_4_fu_192_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_5_reg_407 <= i_5_fu_279_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        i_6_reg_389 <= i_6_fu_232_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_7_reg_433 <= i_7_fu_319_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_2_reg_371 <= j_2_fu_204_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        j_3_reg_415 <= j_3_fu_291_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == exitcond1_fu_285_p2))) begin
        p_addr4_cast_reg_425[6 : 3] <= p_addr4_cast_fu_309_p1[6 : 3];
        tmp_3_trn_cast_reg_420[3 : 0] <= tmp_3_trn_cast_fu_297_p1[3 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (ap_const_lv1_0 == exitcond_fu_313_p2))) begin
        p_addr5_reg_443 <= p_addr5_fu_351_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (exitcond4_fu_198_p2 == ap_const_lv1_0))) begin
        p_addr6_cast_reg_381[6 : 3] <= p_addr6_cast_fu_222_p1[6 : 3];
        tmp_trn_cast_reg_376[3 : 0] <= tmp_trn_cast_fu_210_p1[3 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond3_fu_226_p2))) begin
        p_addr7_reg_399 <= p_addr7_fu_264_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st9_fsm_8 or exitcond1_fu_285_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == exitcond1_fu_285_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8 or exitcond1_fu_285_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == exitcond1_fu_285_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_121)
begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_233)
begin
    if (ap_sig_bdd_233) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_29)
begin
    if (ap_sig_bdd_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_54)
begin
    if (ap_sig_bdd_54) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_184)
begin
    if (ap_sig_bdd_184) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_63)
begin
    if (ap_sig_bdd_63) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_80)
begin
    if (ap_sig_bdd_80) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_204)
begin
    if (ap_sig_bdd_204) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_213)
begin
    if (ap_sig_bdd_213) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_105)
begin
    if (ap_sig_bdd_105) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// col_inbuf_address0 assign process. ///
always @ (grp_dct_dct_1d_fu_171_src_address0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or tmp_1_fu_269_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        col_inbuf_address0 = tmp_1_fu_269_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        col_inbuf_address0 = grp_dct_dct_1d_fu_171_src_address0;
    end else begin
        col_inbuf_address0 = 'bx;
    end
end

/// col_inbuf_ce0 assign process. ///
always @ (grp_dct_dct_1d_fu_171_src_ce0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        col_inbuf_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        col_inbuf_ce0 = grp_dct_dct_1d_fu_171_src_ce0;
    end else begin
        col_inbuf_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_we0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        col_inbuf_we0 = ap_const_logic_1;
    end else begin
        col_inbuf_we0 = ap_const_logic_0;
    end
end

/// col_outbuf_address0 assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_9 or grp_dct_dct_1d_fu_171_dst_address0 or ap_sig_cseq_ST_st8_fsm_7 or tmp_3_fu_346_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        col_outbuf_address0 = tmp_3_fu_346_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        col_outbuf_address0 = grp_dct_dct_1d_fu_171_dst_address0;
    end else begin
        col_outbuf_address0 = 'bx;
    end
end

/// col_outbuf_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_9 or grp_dct_dct_1d_fu_171_dst_ce0 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        col_outbuf_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        col_outbuf_ce0 = grp_dct_dct_1d_fu_171_dst_ce0;
    end else begin
        col_outbuf_ce0 = ap_const_logic_0;
    end
end

/// col_outbuf_we0 assign process. ///
always @ (grp_dct_dct_1d_fu_171_dst_we0 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        col_outbuf_we0 = grp_dct_dct_1d_fu_171_dst_we0;
    end else begin
        col_outbuf_we0 = ap_const_logic_0;
    end
end

/// grp_dct_dct_1d_fu_171_src_q0 assign process. ///
always @ (in_block_q0 or col_inbuf_q0 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_dct_dct_1d_fu_171_src_q0 = col_inbuf_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_dct_dct_1d_fu_171_src_q0 = in_block_q0;
    end else begin
        grp_dct_dct_1d_fu_171_src_q0 = 'bx;
    end
end

/// grp_dct_dct_1d_fu_171_tmp_1 assign process. ///
always @ (i_reg_103 or ap_sig_cseq_ST_st3_fsm_2 or i_2_reg_137 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_dct_dct_1d_fu_171_tmp_1 = i_2_reg_137;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_dct_dct_1d_fu_171_tmp_1 = i_reg_103;
    end else begin
        grp_dct_dct_1d_fu_171_tmp_1 = 'bx;
    end
end

/// grp_dct_dct_1d_fu_171_tmp_11 assign process. ///
always @ (i_reg_103 or ap_sig_cseq_ST_st3_fsm_2 or i_2_reg_137 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_dct_dct_1d_fu_171_tmp_11 = i_2_reg_137;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_dct_dct_1d_fu_171_tmp_11 = i_reg_103;
    end else begin
        grp_dct_dct_1d_fu_171_tmp_11 = 'bx;
    end
end

/// in_block_ce0 assign process. ///
always @ (grp_dct_dct_1d_fu_171_src_ce0 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        in_block_ce0 = grp_dct_dct_1d_fu_171_src_ce0;
    end else begin
        in_block_ce0 = ap_const_logic_0;
    end
end

/// out_block_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        out_block_ce0 = ap_const_logic_1;
    end else begin
        out_block_ce0 = ap_const_logic_0;
    end
end

/// out_block_we0 assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        out_block_we0 = ap_const_logic_1;
    end else begin
        out_block_we0 = ap_const_logic_0;
    end
end

/// row_outbuf_address0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4 or grp_dct_dct_1d_fu_171_dst_address0 or ap_sig_cseq_ST_st3_fsm_2 or tmp_9_fu_259_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        row_outbuf_address0 = tmp_9_fu_259_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        row_outbuf_address0 = grp_dct_dct_1d_fu_171_dst_address0;
    end else begin
        row_outbuf_address0 = 'bx;
    end
end

/// row_outbuf_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4 or grp_dct_dct_1d_fu_171_dst_ce0 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        row_outbuf_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        row_outbuf_ce0 = grp_dct_dct_1d_fu_171_dst_ce0;
    end else begin
        row_outbuf_ce0 = ap_const_logic_0;
    end
end

/// row_outbuf_we0 assign process. ///
always @ (grp_dct_dct_1d_fu_171_dst_we0 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        row_outbuf_we0 = grp_dct_dct_1d_fu_171_dst_we0;
    end else begin
        row_outbuf_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond4_fu_198_p2 or exitcond3_fu_226_p2 or exitcond1_fu_285_p2 or exitcond_fu_313_p2 or grp_dct_dct_1d_fu_171_ap_done or exitcond5_fu_186_p2 or exitcond2_fu_273_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond5_fu_186_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_logic_0 == grp_dct_dct_1d_fu_171_ap_done)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((exitcond4_fu_198_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_226_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_273_p2)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(ap_const_logic_0 == grp_dct_dct_1d_fu_171_ap_done)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_285_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_313_p2)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_105 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_105 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_121 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_184 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_184 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_204 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_204 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_213 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_213 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_233 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_233 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_29 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_29 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_54 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_54 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_63 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_63 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_80 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_80 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end
assign col_inbuf_d0 = row_outbuf_q0;
assign col_outbuf_d0 = grp_dct_dct_1d_fu_171_dst_d0;
assign exitcond1_fu_285_p2 = (j_1_reg_149 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond2_fu_273_p2 = (i_2_reg_137 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond3_fu_226_p2 = (i_1_reg_126 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond4_fu_198_p2 = (j_reg_115 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond5_fu_186_p2 = (i_reg_103 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_313_p2 = (i_3_reg_160 == ap_const_lv4_8? 1'b1: 1'b0);
assign grp_dct_dct_1d_fu_171_ap_start = grp_dct_dct_1d_fu_171_ap_start_ap_start_reg;
assign i_4_fu_192_p2 = (i_reg_103 + ap_const_lv4_1);
assign i_5_fu_279_p2 = (i_2_reg_137 + ap_const_lv4_1);
assign i_6_fu_232_p2 = (i_1_reg_126 + ap_const_lv4_1);
assign i_7_fu_319_p2 = (i_3_reg_160 + ap_const_lv4_1);
assign in_block_address0 = grp_dct_dct_1d_fu_171_src_address0;
assign j_2_fu_204_p2 = (j_reg_115 + ap_const_lv4_1);
assign j_3_fu_291_p2 = (j_1_reg_149 + ap_const_lv4_1);
assign out_block_address0 = tmp_4_fu_356_p1;
assign out_block_d0 = col_outbuf_q0;
assign p_addr1_fu_254_p2 = (tmp_trn_cast_reg_376 + p_addr_cast_fu_250_p1);
assign p_addr2_cast_fu_337_p1 = tmp_2_fu_329_p3;
assign p_addr3_fu_341_p2 = (tmp_3_trn_cast_reg_420 + p_addr2_cast_fu_337_p1);
assign p_addr4_cast_fu_309_p1 = tmp_s_fu_301_p3;
assign p_addr5_fu_351_p2 = (tmp_4_trn_cast_fu_325_p1 + p_addr4_cast_reg_425);
assign p_addr6_cast_fu_222_p1 = tmp_fu_214_p3;
assign p_addr7_fu_264_p2 = (tmp_2_trn_cast_fu_238_p1 + p_addr6_cast_reg_381);
assign p_addr_cast_fu_250_p1 = tmp_7_fu_242_p3;
assign row_outbuf_d0 = grp_dct_dct_1d_fu_171_dst_d0;
assign tmp_1_fu_269_p1 = p_addr7_reg_399;
assign tmp_2_fu_329_p3 = {{i_3_reg_160}, {ap_const_lv3_0}};
assign tmp_2_trn_cast_fu_238_p1 = i_1_reg_126;
assign tmp_3_fu_346_p1 = p_addr3_fu_341_p2;
assign tmp_3_trn_cast_fu_297_p1 = j_1_reg_149;
assign tmp_4_fu_356_p1 = p_addr5_reg_443;
assign tmp_4_trn_cast_fu_325_p1 = i_3_reg_160;
assign tmp_7_fu_242_p3 = {{i_1_reg_126}, {ap_const_lv3_0}};
assign tmp_9_fu_259_p1 = p_addr1_fu_254_p2;
assign tmp_fu_214_p3 = {{j_reg_115}, {ap_const_lv3_0}};
assign tmp_s_fu_301_p3 = {{j_1_reg_149}, {ap_const_lv3_0}};
assign tmp_trn_cast_fu_210_p1 = j_reg_115;
always @ (posedge ap_clk)
begin
    tmp_trn_cast_reg_376[7:4] <= 4'b0000;
    p_addr6_cast_reg_381[2:0] <= 3'b000;
    p_addr6_cast_reg_381[7] <= 1'b0;
    tmp_3_trn_cast_reg_420[7:4] <= 4'b0000;
    p_addr4_cast_reg_425[2:0] <= 3'b000;
    p_addr4_cast_reg_425[7] <= 1'b0;
end



endmodule //dct_dct_2d

