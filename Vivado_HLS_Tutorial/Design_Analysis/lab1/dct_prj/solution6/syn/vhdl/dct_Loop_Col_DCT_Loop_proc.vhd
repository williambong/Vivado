-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_Loop_Col_DCT_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_inbuf_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_0_ce0 : OUT STD_LOGIC;
    col_inbuf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_1_ce0 : OUT STD_LOGIC;
    col_inbuf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_2_ce0 : OUT STD_LOGIC;
    col_inbuf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_3_ce0 : OUT STD_LOGIC;
    col_inbuf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_4_ce0 : OUT STD_LOGIC;
    col_inbuf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_5_ce0 : OUT STD_LOGIC;
    col_inbuf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_6_ce0 : OUT STD_LOGIC;
    col_inbuf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_7_ce0 : OUT STD_LOGIC;
    col_inbuf_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_outbuf_i_ce0 : OUT STD_LOGIC;
    col_outbuf_i_we0 : OUT STD_LOGIC;
    col_outbuf_i_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_Loop_Col_DCT_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st7_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_286 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_i_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_325_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_i_mid2_fu_337_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_mid2_reg_553 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_k_i_mid2_reg_553_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_k_i_mid2_reg_553_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_k_i_mid2_reg_553_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_i_mid2_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_i_mid2_reg_558 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_383_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal dct_coeff_table_0_load_reg_649 : STD_LOGIC_VECTOR (13 downto 0);
    signal col_inbuf_0_load_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_1_load_reg_659 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_ppstg_dct_coeff_table_1_load_reg_659_pp0_it2 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_1_load_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppstg_col_inbuf_1_load_reg_664_pp0_it2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_2_load_reg_669 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_2_load_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_3_load_reg_679 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_ppstg_dct_coeff_table_3_load_reg_679_pp0_it2 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_3_load_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppstg_col_inbuf_3_load_reg_684_pp0_it2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_4_load_reg_689 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_4_load_reg_694 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_5_load_reg_699 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_ppstg_dct_coeff_table_5_load_reg_699_pp0_it2 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_5_load_reg_704 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppstg_col_inbuf_5_load_reg_704_pp0_it2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_6_load_reg_709 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_6_load_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_7_load_reg_719 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_inbuf_7_load_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_fu_395_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_i_reg_729 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_2_i_fu_407_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_2_i_reg_734 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_fu_419_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_reg_739 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_504_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_744 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_i_reg_749 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_267 : BOOLEAN;
    signal i_2_i_phi_fu_301_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_10_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_i_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i4_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_fu_345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_i_fu_395_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_fu_395_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_2_i_fu_407_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_i_fu_407_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_4_i_fu_419_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_4_i_fu_419_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_511_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_536_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_519_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_fu_459_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp3_fu_459_p2 : signal is "no";
    signal tmp_fu_455_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp_fu_455_p2 : signal is "no";
    signal tmp_2_i_fu_463_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_482_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_trn_cast_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_fu_489_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_527_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_511_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_511_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_519_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_527_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_536_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_536_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_446 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_i_fu_395_p10 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mac_muladd_16s_15s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_0
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_1
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_2
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_3
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_4
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_5
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_6
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_7
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mac_muladd_16s_15s_29s_29_1_U40 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_504_p0,
        din1 => grp_fu_504_p1,
        din2 => grp_fu_504_p2,
        dout => grp_fu_504_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U41 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_511_p0,
        din1 => grp_fu_511_p1,
        din2 => grp_fu_511_p2,
        dout => grp_fu_511_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U42 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_519_p0,
        din1 => grp_fu_519_p1,
        din2 => grp_fu_519_p2,
        dout => grp_fu_519_p3);

    dct_mac_muladd_16s_15s_14ns_29_1_U43 : component dct_mac_muladd_16s_15s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_527_p0,
        din1 => grp_fu_527_p1,
        din2 => grp_fu_527_p2,
        dout => grp_fu_527_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U44 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_536_p0,
        din1 => grp_fu_536_p1,
        din2 => grp_fu_536_p2,
        dout => grp_fu_536_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_319_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_267))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_319_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_267)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_319_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- i_2_i_reg_297 assign process. --
    i_2_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_544 = ap_const_lv1_0))) then 
                i_2_i_reg_297 <= i_2_i_mid2_reg_558;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_267))) then 
                i_2_i_reg_297 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_286 assign process. --
    indvar_flatten_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_319_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_286 <= indvar_flatten_next_fu_325_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_267))) then 
                indvar_flatten_reg_286 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_i_reg_308 assign process. --
    k_i_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_319_p2 = ap_const_lv1_0))) then 
                k_i_reg_308 <= k_fu_383_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_267))) then 
                k_i_reg_308 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_col_inbuf_1_load_reg_664_pp0_it2 <= col_inbuf_1_load_reg_664;
                ap_reg_ppstg_col_inbuf_3_load_reg_684_pp0_it2 <= col_inbuf_3_load_reg_684;
                ap_reg_ppstg_col_inbuf_5_load_reg_704_pp0_it2 <= col_inbuf_5_load_reg_704;
                ap_reg_ppstg_dct_coeff_table_1_load_reg_659_pp0_it2 <= dct_coeff_table_1_load_reg_659;
                ap_reg_ppstg_dct_coeff_table_3_load_reg_679_pp0_it2 <= dct_coeff_table_3_load_reg_679;
                ap_reg_ppstg_dct_coeff_table_5_load_reg_699_pp0_it2 <= dct_coeff_table_5_load_reg_699;
                ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it2;
                ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it2 <= ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it1;
                ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it3 <= ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it2;
                ap_reg_ppstg_k_i_mid2_reg_553_pp0_it2 <= ap_reg_ppstg_k_i_mid2_reg_553_pp0_it1;
                ap_reg_ppstg_k_i_mid2_reg_553_pp0_it3 <= ap_reg_ppstg_k_i_mid2_reg_553_pp0_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it1 <= exitcond_flatten_reg_544;
                ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it1 <= i_2_i_mid2_reg_558;
                ap_reg_ppstg_k_i_mid2_reg_553_pp0_it1 <= k_i_mid2_reg_553;
                exitcond_flatten_reg_544 <= exitcond_flatten_fu_319_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_544 = ap_const_lv1_0))) then
                col_inbuf_0_load_reg_654 <= col_inbuf_0_q0;
                col_inbuf_1_load_reg_664 <= col_inbuf_1_q0;
                col_inbuf_2_load_reg_674 <= col_inbuf_2_q0;
                col_inbuf_3_load_reg_684 <= col_inbuf_3_q0;
                col_inbuf_4_load_reg_694 <= col_inbuf_4_q0;
                col_inbuf_5_load_reg_704 <= col_inbuf_5_q0;
                col_inbuf_6_load_reg_714 <= col_inbuf_6_q0;
                col_inbuf_7_load_reg_724 <= col_inbuf_7_q0;
                dct_coeff_table_0_load_reg_649 <= dct_coeff_table_0_q0;
                dct_coeff_table_1_load_reg_659 <= dct_coeff_table_1_q0;
                dct_coeff_table_2_load_reg_669 <= dct_coeff_table_2_q0;
                dct_coeff_table_3_load_reg_679 <= dct_coeff_table_3_q0;
                dct_coeff_table_4_load_reg_689 <= dct_coeff_table_4_q0;
                dct_coeff_table_5_load_reg_699 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_709 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_load_reg_719 <= dct_coeff_table_7_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_319_p2 = ap_const_lv1_0))) then
                i_2_i_mid2_reg_558 <= i_2_i_mid2_fu_351_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_319_p2 = ap_const_lv1_0))) then
                k_i_mid2_reg_553 <= k_i_mid2_fu_337_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it1 = ap_const_lv1_0)) then
                tmp5_reg_744 <= grp_fu_504_p3;
                tmp_8_2_i_reg_734 <= tmp_8_2_i_fu_407_p2;
                tmp_8_4_i_reg_739 <= tmp_8_4_i_fu_419_p2;
                tmp_8_i_reg_729 <= tmp_8_i_fu_395_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it2 = ap_const_lv1_0)) then
                tmp_4_i_reg_749 <= tmp_2_i_fu_463_p2(28 downto 13);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten_fu_319_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_267)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_267)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_319_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_319_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_2;
                end if;
            when ap_ST_st7_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st7_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_267 assign process. --
    ap_sig_bdd_267_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_267 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_446 assign process. --
    ap_sig_bdd_446_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_446 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_2 assign process. --
    ap_sig_cseq_ST_st7_fsm_2_assign_proc : process(ap_sig_bdd_446)
    begin
        if (ap_sig_bdd_446) then 
            ap_sig_cseq_ST_st7_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_0_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_0_ce0 assign process. --
    col_inbuf_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_0_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_1_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_1_ce0 assign process. --
    col_inbuf_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_1_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_2_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_2_ce0 assign process. --
    col_inbuf_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_2_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_3_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_3_ce0 assign process. --
    col_inbuf_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_3_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_4_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_4_ce0 assign process. --
    col_inbuf_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_4_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_5_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_5_ce0 assign process. --
    col_inbuf_5_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_5_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_6_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_6_ce0 assign process. --
    col_inbuf_6_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_6_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_7_address0 <= tmp_71_cast_i_fu_359_p1(3 - 1 downto 0);

    -- col_inbuf_7_ce0 assign process. --
    col_inbuf_7_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            col_inbuf_7_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_address0 <= tmp_9_fu_499_p1(6 - 1 downto 0);

    -- col_outbuf_i_ce0 assign process. --
    col_outbuf_i_ce0_assign_proc : process(ap_reg_ppiten_pp0_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            col_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            col_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_d0 <= tmp_4_i_reg_749;

    -- col_outbuf_i_we0 assign process. --
    col_outbuf_i_we0_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_reg_ppstg_exitcond_flatten_reg_544_pp0_it3 = ap_const_lv1_0)))) then 
            col_outbuf_i_we0 <= ap_const_logic_1;
        else 
            col_outbuf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_0_ce0 assign process. --
    dct_coeff_table_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_1_ce0 assign process. --
    dct_coeff_table_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_2_ce0 assign process. --
    dct_coeff_table_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_3_ce0 assign process. --
    dct_coeff_table_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_4_ce0 assign process. --
    dct_coeff_table_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_5_ce0 assign process. --
    dct_coeff_table_5_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_6_ce0 assign process. --
    dct_coeff_table_6_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= tmp_i_10_fu_371_p1(3 - 1 downto 0);

    -- dct_coeff_table_7_ce0 assign process. --
    dct_coeff_table_7_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i4_fu_331_p2 <= "1" when (k_i_reg_308 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_319_p2 <= "1" when (indvar_flatten_reg_286 = ap_const_lv7_40) else "0";
    grp_fu_504_p0 <= col_inbuf_6_load_reg_714;
    grp_fu_504_p1 <= dct_coeff_table_6_load_reg_709;
    grp_fu_504_p2 <= grp_fu_527_p3;
    grp_fu_511_p0 <= ap_reg_ppstg_col_inbuf_3_load_reg_684_pp0_it2;
    grp_fu_511_p1 <= ap_reg_ppstg_dct_coeff_table_3_load_reg_679_pp0_it2;
    grp_fu_511_p2 <= tmp_8_2_i_reg_734;
    grp_fu_519_p0 <= ap_reg_ppstg_col_inbuf_5_load_reg_704_pp0_it2;
    grp_fu_519_p1 <= ap_reg_ppstg_dct_coeff_table_5_load_reg_699_pp0_it2;
    grp_fu_519_p2 <= tmp_8_4_i_reg_739;
    grp_fu_527_p0 <= col_inbuf_7_load_reg_724;
    grp_fu_527_p1 <= dct_coeff_table_7_load_reg_719;
    grp_fu_527_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_536_p0 <= ap_reg_ppstg_col_inbuf_1_load_reg_664_pp0_it2;
    grp_fu_536_p1 <= ap_reg_ppstg_dct_coeff_table_1_load_reg_659_pp0_it2;
    grp_fu_536_p2 <= tmp_8_i_reg_729;
    i2_fu_345_p2 <= std_logic_vector(unsigned(i_2_i_phi_fu_301_p4) + unsigned(ap_const_lv4_1));
    i_2_i_mid2_fu_351_p3 <= 
        i2_fu_345_p2 when (exitcond1_i4_fu_331_p2(0) = '1') else 
        i_2_i_phi_fu_301_p4;

    -- i_2_i_phi_fu_301_p4 assign process. --
    i_2_i_phi_fu_301_p4_assign_proc : process(i_2_i_reg_297, exitcond_flatten_reg_544, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_2_i_mid2_reg_558)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_544 = ap_const_lv1_0))) then 
            i_2_i_phi_fu_301_p4 <= i_2_i_mid2_reg_558;
        else 
            i_2_i_phi_fu_301_p4 <= i_2_i_reg_297;
        end if; 
    end process;

    indvar_flatten_next_fu_325_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_286) + unsigned(ap_const_lv7_1));
    k_fu_383_p2 <= std_logic_vector(unsigned(k_i_mid2_fu_337_p3) + unsigned(ap_const_lv4_1));
    k_i_mid2_fu_337_p3 <= 
        ap_const_lv4_0 when (exitcond1_i4_fu_331_p2(0) = '1') else 
        k_i_reg_308;
    p_addr1_fu_493_p2 <= std_logic_vector(unsigned(tmp_i_trn_cast_fu_479_p1) + unsigned(p_addr_cast_fu_489_p1));
    p_addr_cast_fu_489_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_482_p3),8));
    tmp3_fu_459_p2 <= std_logic_vector(signed(tmp5_reg_744) + signed(grp_fu_519_p3));
    tmp_2_i_fu_463_p2 <= std_logic_vector(signed(tmp3_fu_459_p2) + signed(tmp_fu_455_p2));
    tmp_71_cast_i_fu_359_p1 <= std_logic_vector(resize(unsigned(i_2_i_mid2_fu_351_p3),64));
    tmp_8_2_i_fu_407_p0 <= col_inbuf_2_load_reg_674;
    tmp_8_2_i_fu_407_p1 <= dct_coeff_table_2_load_reg_669;
    tmp_8_2_i_fu_407_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_2_i_fu_407_p0) * signed(tmp_8_2_i_fu_407_p1))), 29));
    tmp_8_4_i_fu_419_p0 <= col_inbuf_4_load_reg_694;
    tmp_8_4_i_fu_419_p1 <= dct_coeff_table_4_load_reg_689;
    tmp_8_4_i_fu_419_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_4_i_fu_419_p0) * signed(tmp_8_4_i_fu_419_p1))), 29));
    tmp_8_fu_482_p3 <= (ap_reg_ppstg_i_2_i_mid2_reg_558_pp0_it3 & ap_const_lv3_0);
    tmp_8_i_fu_395_p0 <= col_inbuf_0_load_reg_654;
    tmp_8_i_fu_395_p1 <= tmp_8_i_fu_395_p10(14 - 1 downto 0);
    tmp_8_i_fu_395_p10 <= std_logic_vector(resize(unsigned(dct_coeff_table_0_load_reg_649),29));
    tmp_8_i_fu_395_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_i_fu_395_p0) * signed('0' &tmp_8_i_fu_395_p1))), 29));
    tmp_9_fu_499_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_493_p2),64));
    tmp_fu_455_p2 <= std_logic_vector(signed(grp_fu_511_p3) + signed(grp_fu_536_p3));
    tmp_i_10_fu_371_p1 <= std_logic_vector(resize(unsigned(k_i_mid2_fu_337_p3),64));
    tmp_i_trn_cast_fu_479_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_k_i_mid2_reg_553_pp0_it3),8));
end behav;
