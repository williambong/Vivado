-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_Loop_Xpose_Row_Outer_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_i_ce0 : OUT STD_LOGIC;
    row_outbuf_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_0_ce0 : OUT STD_LOGIC;
    col_inbuf_0_we0 : OUT STD_LOGIC;
    col_inbuf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_1_ce0 : OUT STD_LOGIC;
    col_inbuf_1_we0 : OUT STD_LOGIC;
    col_inbuf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_2_ce0 : OUT STD_LOGIC;
    col_inbuf_2_we0 : OUT STD_LOGIC;
    col_inbuf_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_3_ce0 : OUT STD_LOGIC;
    col_inbuf_3_we0 : OUT STD_LOGIC;
    col_inbuf_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_4_ce0 : OUT STD_LOGIC;
    col_inbuf_4_we0 : OUT STD_LOGIC;
    col_inbuf_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_5_ce0 : OUT STD_LOGIC;
    col_inbuf_5_we0 : OUT STD_LOGIC;
    col_inbuf_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_6_ce0 : OUT STD_LOGIC;
    col_inbuf_6_we0 : OUT STD_LOGIC;
    col_inbuf_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_7_ce0 : OUT STD_LOGIC;
    col_inbuf_7_we0 : OUT STD_LOGIC;
    col_inbuf_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_Loop_Xpose_Row_Outer_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten_reg_186 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_225_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_mid2_fu_251_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i_mid2_reg_316 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_286_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_reg_327 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_128 : BOOLEAN;
    signal j_0_i_phi_fu_201_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_i4_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_fu_245_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_mid2_fu_237_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_263_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_219_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_128))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_219_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_128)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_219_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_i_reg_208 assign process. --
    i_1_i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_219_p2 = ap_const_lv1_0))) then 
                i_1_i_reg_208 <= i_fu_290_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_128))) then 
                i_1_i_reg_208 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_186 assign process. --
    indvar_flatten_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_219_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_186 <= indvar_flatten_next_fu_225_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_128))) then 
                indvar_flatten_reg_186 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_0_i_reg_197 assign process. --
    j_0_i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_307 = ap_const_lv1_0))) then 
                j_0_i_reg_197 <= j_0_i_mid2_reg_316;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_128))) then 
                j_0_i_reg_197 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                exitcond_flatten_reg_307 <= exitcond_flatten_fu_219_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_219_p2 = ap_const_lv1_0))) then
                j_0_i_mid2_reg_316 <= j_0_i_mid2_fu_251_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_219_p2 = ap_const_lv1_0))) then
                tmp_6_reg_327 <= tmp_6_fu_286_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten_fu_219_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_128)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_128)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_219_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_128 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_0_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_0_ce0 assign process. --
    col_inbuf_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_0_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_0_d0 <= row_outbuf_i_q0;

    -- col_inbuf_0_we0 assign process. --
    col_inbuf_0_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_0)))) then 
            col_inbuf_0_we0 <= ap_const_logic_1;
        else 
            col_inbuf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_1_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_1_ce0 assign process. --
    col_inbuf_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_1_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_1_d0 <= row_outbuf_i_q0;

    -- col_inbuf_1_we0 assign process. --
    col_inbuf_1_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_1)))) then 
            col_inbuf_1_we0 <= ap_const_logic_1;
        else 
            col_inbuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_2_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_2_ce0 assign process. --
    col_inbuf_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_2_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_2_d0 <= row_outbuf_i_q0;

    -- col_inbuf_2_we0 assign process. --
    col_inbuf_2_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_2)))) then 
            col_inbuf_2_we0 <= ap_const_logic_1;
        else 
            col_inbuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_3_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_3_ce0 assign process. --
    col_inbuf_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_3_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_3_d0 <= row_outbuf_i_q0;

    -- col_inbuf_3_we0 assign process. --
    col_inbuf_3_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_3)))) then 
            col_inbuf_3_we0 <= ap_const_logic_1;
        else 
            col_inbuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_4_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_4_ce0 assign process. --
    col_inbuf_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_4_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_4_d0 <= row_outbuf_i_q0;

    -- col_inbuf_4_we0 assign process. --
    col_inbuf_4_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_4)))) then 
            col_inbuf_4_we0 <= ap_const_logic_1;
        else 
            col_inbuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_5_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_5_ce0 assign process. --
    col_inbuf_5_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_5_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_5_d0 <= row_outbuf_i_q0;

    -- col_inbuf_5_we0 assign process. --
    col_inbuf_5_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_5)))) then 
            col_inbuf_5_we0 <= ap_const_logic_1;
        else 
            col_inbuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_6_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_6_ce0 assign process. --
    col_inbuf_6_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_6_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_6_d0 <= row_outbuf_i_q0;

    -- col_inbuf_6_we0 assign process. --
    col_inbuf_6_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_reg_327 = ap_const_lv3_6)))) then 
            col_inbuf_6_we0 <= ap_const_logic_1;
        else 
            col_inbuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_7_address0 <= tmp_s_fu_296_p1(3 - 1 downto 0);

    -- col_inbuf_7_ce0 assign process. --
    col_inbuf_7_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_7_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_7_d0 <= row_outbuf_i_q0;

    -- col_inbuf_7_we0 assign process. --
    col_inbuf_7_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_6_reg_327)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_6_reg_327 = ap_const_lv3_6)) and not((tmp_6_reg_327 = ap_const_lv3_5)) and not((tmp_6_reg_327 = ap_const_lv3_4)) and not((tmp_6_reg_327 = ap_const_lv3_3)) and not((tmp_6_reg_327 = ap_const_lv3_2)) and not((tmp_6_reg_327 = ap_const_lv3_1)) and not((tmp_6_reg_327 = ap_const_lv3_0))))) then 
            col_inbuf_7_we0 <= ap_const_logic_1;
        else 
            col_inbuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_i4_fu_231_p2 <= "1" when (i_1_i_reg_208 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_219_p2 <= "1" when (indvar_flatten_reg_186 = ap_const_lv7_40) else "0";
    i_1_i_mid2_fu_237_p3 <= 
        ap_const_lv4_0 when (exitcond3_i4_fu_231_p2(0) = '1') else 
        i_1_i_reg_208;
    i_fu_290_p2 <= std_logic_vector(unsigned(i_1_i_mid2_fu_237_p3) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_225_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_186) + unsigned(ap_const_lv7_1));
    j2_fu_245_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(j_0_i_phi_fu_201_p4));
    j_0_i_mid2_fu_251_p3 <= 
        j2_fu_245_p2 when (exitcond3_i4_fu_231_p2(0) = '1') else 
        j_0_i_phi_fu_201_p4;

    -- j_0_i_phi_fu_201_p4 assign process. --
    j_0_i_phi_fu_201_p4_assign_proc : process(j_0_i_reg_197, exitcond_flatten_reg_307, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j_0_i_mid2_reg_316)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_307 = ap_const_lv1_0))) then 
            j_0_i_phi_fu_201_p4 <= j_0_i_mid2_reg_316;
        else 
            j_0_i_phi_fu_201_p4 <= j_0_i_reg_197;
        end if; 
    end process;

    p_addr1_fu_275_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_271_p1) + unsigned(tmp_trn_cast_fu_259_p1));
    p_addr_cast_fu_271_p1 <= std_logic_vector(resize(unsigned(tmp_fu_263_p3),8));
    row_outbuf_i_address0 <= tmp_7_fu_281_p1(6 - 1 downto 0);

    -- row_outbuf_i_ce0 assign process. --
    row_outbuf_i_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_286_p1 <= i_1_i_mid2_fu_237_p3(3 - 1 downto 0);
    tmp_7_fu_281_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_275_p2),64));
    tmp_fu_263_p3 <= (i_1_i_mid2_fu_237_p3 & ap_const_lv3_0);
    tmp_s_fu_296_p1 <= std_logic_vector(resize(unsigned(j_0_i_mid2_reg_316),64));
    tmp_trn_cast_fu_259_p1 <= std_logic_vector(resize(unsigned(j_0_i_mid2_fu_251_p3),8));
end behav;
