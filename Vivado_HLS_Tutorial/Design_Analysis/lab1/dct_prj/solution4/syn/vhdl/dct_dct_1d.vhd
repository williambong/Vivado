-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src1_ce0 : OUT STD_LOGIC;
    src1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src2_ce0 : OUT STD_LOGIC;
    src2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src3_ce0 : OUT STD_LOGIC;
    src3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src4_ce0 : OUT STD_LOGIC;
    src4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src5_ce0 : OUT STD_LOGIC;
    src5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src6_ce0 : OUT STD_LOGIC;
    src6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src7_ce0 : OUT STD_LOGIC;
    src7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st7_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal src_addr_reg_490 : STD_LOGIC_VECTOR (2 downto 0);
    signal src1_addr_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal src2_addr_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal src3_addr_reg_505 : STD_LOGIC_VECTOR (2 downto 0);
    signal src4_addr_reg_510 : STD_LOGIC_VECTOR (2 downto 0);
    signal src5_addr_reg_515 : STD_LOGIC_VECTOR (2 downto 0);
    signal src6_addr_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal src7_addr_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_addr_cast_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_reg_535_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_535_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_535_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_329_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_addr1_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_584_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_584_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_584_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_0_load_reg_589 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_ppstg_dct_coeff_table_0_load_reg_589_pp0_it2 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_load_reg_594 : STD_LOGIC_VECTOR (14 downto 0);
    signal src1_load_reg_599 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_2_load_reg_604 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_ppstg_dct_coeff_table_2_load_reg_604_pp0_it2 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_load_reg_609 : STD_LOGIC_VECTOR (14 downto 0);
    signal src3_load_reg_614 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_4_load_reg_619 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_reg_ppstg_dct_coeff_table_4_load_reg_619_pp0_it2 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_load_reg_624 : STD_LOGIC_VECTOR (14 downto 0);
    signal src5_load_reg_629 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_6_load_reg_634 : STD_LOGIC_VECTOR (14 downto 0);
    signal src6_load_reg_639 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_7_load_reg_644 : STD_LOGIC_VECTOR (14 downto 0);
    signal src7_load_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_load_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_fu_362_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_1_reg_659 : STD_LOGIC_VECTOR (28 downto 0);
    signal src2_load_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_3_fu_374_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_3_reg_669 : STD_LOGIC_VECTOR (28 downto 0);
    signal src4_load_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_5_fu_386_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_5_reg_679 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_466_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_reg_684 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_reg_689 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_cast_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_311_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_trn_cast_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_1_fu_362_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_fu_362_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_3_fu_374_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_3_fu_374_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_5_fu_386_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_5_fu_386_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_482_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_474_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_450_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_fu_422_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp1_fu_422_p2 : signal is "no";
    signal tmp4_fu_426_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp4_fu_426_p2 : signal is "no";
    signal tmp_2_fu_430_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_450_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_458_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_458_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_458_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_474_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_474_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_482_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_482_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_402 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_482_p10 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mac_muladd_16s_15s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_dct_1d_dct_coeff_table_0
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_dct_1d_dct_coeff_table_1
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_dct_1d_dct_coeff_table_2
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_dct_1d_dct_coeff_table_3
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_dct_1d_dct_coeff_table_4
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_dct_1d_dct_coeff_table_5
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_dct_1d_dct_coeff_table_6
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_dct_1d_dct_coeff_table_7
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mac_muladd_16s_15s_29s_29_1_U9 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_450_p0,
        din1 => grp_fu_450_p1,
        din2 => grp_fu_450_p2,
        dout => grp_fu_450_p3);

    dct_mac_muladd_16s_15s_14ns_29_1_U10 : component dct_mac_muladd_16s_15s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_458_p0,
        din1 => grp_fu_458_p1,
        din2 => grp_fu_458_p2,
        dout => grp_fu_458_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U11 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        din2 => grp_fu_466_p2,
        dout => grp_fu_466_p3);

    dct_mac_muladd_16s_15s_29s_29_1_U12 : component dct_mac_muladd_16s_15s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_474_p0,
        din1 => grp_fu_474_p1,
        din2 => grp_fu_474_p2,
        dout => grp_fu_474_p3);

    dct_mac_muladd_16s_14ns_29s_29_1_U13 : component dct_mac_muladd_16s_14ns_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_482_p0,
        din1 => grp_fu_482_p1,
        din2 => grp_fu_482_p2,
        dout => grp_fu_482_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond1_fu_323_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_fu_323_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond1_fu_323_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- k_reg_288 assign process. --
    k_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_fu_323_p2 = ap_const_lv1_0))) then 
                k_reg_288 <= k_1_fu_329_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_288 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_dct_coeff_table_0_load_reg_589_pp0_it2 <= dct_coeff_table_0_load_reg_589;
                ap_reg_ppstg_dct_coeff_table_2_load_reg_604_pp0_it2 <= dct_coeff_table_2_load_reg_604;
                ap_reg_ppstg_dct_coeff_table_4_load_reg_619_pp0_it2 <= dct_coeff_table_4_load_reg_619;
                ap_reg_ppstg_exitcond1_reg_535_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_535_pp0_it1;
                ap_reg_ppstg_exitcond1_reg_535_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_535_pp0_it2;
                ap_reg_ppstg_p_addr1_reg_584_pp0_it2 <= ap_reg_ppstg_p_addr1_reg_584_pp0_it1;
                ap_reg_ppstg_p_addr1_reg_584_pp0_it3 <= ap_reg_ppstg_p_addr1_reg_584_pp0_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond1_reg_535_pp0_it1 <= exitcond1_reg_535;
                ap_reg_ppstg_p_addr1_reg_584_pp0_it1 <= p_addr1_reg_584;
                exitcond1_reg_535 <= exitcond1_fu_323_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_reg_535 = ap_const_lv1_0))) then
                dct_coeff_table_0_load_reg_589 <= dct_coeff_table_0_q0;
                dct_coeff_table_1_load_reg_594 <= dct_coeff_table_1_q0;
                dct_coeff_table_2_load_reg_604 <= dct_coeff_table_2_q0;
                dct_coeff_table_3_load_reg_609 <= dct_coeff_table_3_q0;
                dct_coeff_table_4_load_reg_619 <= dct_coeff_table_4_q0;
                dct_coeff_table_5_load_reg_624 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_634 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_load_reg_644 <= dct_coeff_table_7_q0;
                src1_load_reg_599 <= src1_q0;
                src3_load_reg_614 <= src3_q0;
                src5_load_reg_629 <= src5_q0;
                src6_load_reg_639 <= src6_q0;
                src7_load_reg_649 <= src7_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_fu_323_p2 = ap_const_lv1_0))) then
                p_addr1_reg_584 <= p_addr1_fu_351_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    p_addr_cast_reg_530(6 downto 3) <= p_addr_cast_fu_319_p1(6 downto 3);
                src1_addr_reg_495 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src2_addr_reg_500 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src3_addr_reg_505 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src4_addr_reg_510 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src5_addr_reg_515 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src6_addr_reg_520 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src7_addr_reg_525 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
                src_addr_reg_490 <= tmp_1_cast_fu_299_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond1_reg_535_pp0_it1 = ap_const_lv1_0)) then
                src2_load_reg_664 <= src2_q0;
                src4_load_reg_674 <= src4_q0;
                src_load_reg_654 <= src_q0;
                tmp6_reg_684 <= grp_fu_466_p3;
                tmp_8_1_reg_659 <= tmp_8_1_fu_362_p2;
                tmp_8_3_reg_669 <= tmp_8_3_fu_374_p2;
                tmp_8_5_reg_679 <= tmp_8_5_fu_386_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond1_reg_535_pp0_it2 = ap_const_lv1_0)) then
                tmp_4_reg_689 <= tmp_2_fu_430_p2(28 downto 13);
            end if;
        end if;
    end process;
    p_addr_cast_reg_530(2 downto 0) <= "000";
    p_addr_cast_reg_530(7) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_323_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond1_fu_323_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond1_fu_323_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_2;
                end if;
            when ap_ST_st7_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_402 assign process. --
    ap_sig_bdd_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_402 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_2 assign process. --
    ap_sig_cseq_ST_st7_fsm_2_assign_proc : process(ap_sig_bdd_402)
    begin
        if (ap_sig_bdd_402) then 
            ap_sig_cseq_ST_st7_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_0_ce0 assign process. --
    dct_coeff_table_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_1_ce0 assign process. --
    dct_coeff_table_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_2_ce0 assign process. --
    dct_coeff_table_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_3_ce0 assign process. --
    dct_coeff_table_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_4_ce0 assign process. --
    dct_coeff_table_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_5_ce0 assign process. --
    dct_coeff_table_5_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_6_ce0 assign process. --
    dct_coeff_table_6_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= tmp_fu_335_p1(3 - 1 downto 0);

    -- dct_coeff_table_7_ce0 assign process. --
    dct_coeff_table_7_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_5_fu_446_p1(6 - 1 downto 0);

    -- dst_ce0 assign process. --
    dst_ce0_assign_proc : process(ap_reg_ppiten_pp0_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_4_reg_689;

    -- dst_we0 assign process. --
    dst_we0_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppstg_exitcond1_reg_535_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_reg_ppstg_exitcond1_reg_535_pp0_it3 = ap_const_lv1_0)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_323_p2 <= "1" when (k_reg_288 = ap_const_lv4_8) else "0";
    grp_fu_450_p0 <= src4_load_reg_674;
    grp_fu_450_p1 <= ap_reg_ppstg_dct_coeff_table_4_load_reg_619_pp0_it2;
    grp_fu_450_p2 <= tmp_8_5_reg_679;
    grp_fu_458_p0 <= src7_load_reg_649;
    grp_fu_458_p1 <= dct_coeff_table_7_load_reg_644;
    grp_fu_458_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_466_p0 <= src6_load_reg_639;
    grp_fu_466_p1 <= dct_coeff_table_6_load_reg_634;
    grp_fu_466_p2 <= grp_fu_458_p3;
    grp_fu_474_p0 <= src2_load_reg_664;
    grp_fu_474_p1 <= ap_reg_ppstg_dct_coeff_table_2_load_reg_604_pp0_it2;
    grp_fu_474_p2 <= tmp_8_3_reg_669;
    grp_fu_482_p0 <= src_load_reg_654;
    grp_fu_482_p1 <= grp_fu_482_p10(14 - 1 downto 0);
    grp_fu_482_p10 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_dct_coeff_table_0_load_reg_589_pp0_it2),29));
    grp_fu_482_p2 <= tmp_8_1_reg_659;
    k_1_fu_329_p2 <= std_logic_vector(unsigned(k_reg_288) + unsigned(ap_const_lv4_1));
    p_addr1_fu_351_p2 <= std_logic_vector(unsigned(p_addr_cast_reg_530) + unsigned(tmp_trn_cast_fu_347_p1));
    p_addr_cast_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_311_p3),8));
    src1_address0 <= src1_addr_reg_495;

    -- src1_ce0 assign process. --
    src1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            src1_ce0 <= ap_const_logic_1;
        else 
            src1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src2_address0 <= src2_addr_reg_500;

    -- src2_ce0 assign process. --
    src2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            src2_ce0 <= ap_const_logic_1;
        else 
            src2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src3_address0 <= src3_addr_reg_505;

    -- src3_ce0 assign process. --
    src3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            src3_ce0 <= ap_const_logic_1;
        else 
            src3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src4_address0 <= src4_addr_reg_510;

    -- src4_ce0 assign process. --
    src4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            src4_ce0 <= ap_const_logic_1;
        else 
            src4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src5_address0 <= src5_addr_reg_515;

    -- src5_ce0 assign process. --
    src5_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            src5_ce0 <= ap_const_logic_1;
        else 
            src5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src6_address0 <= src6_addr_reg_520;

    -- src6_ce0 assign process. --
    src6_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            src6_ce0 <= ap_const_logic_1;
        else 
            src6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src7_address0 <= src7_addr_reg_525;

    -- src7_ce0 assign process. --
    src7_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            src7_ce0 <= ap_const_logic_1;
        else 
            src7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src_address0 <= src_addr_reg_490;

    -- src_ce0 assign process. --
    src_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_422_p2 <= std_logic_vector(signed(grp_fu_482_p3) + signed(grp_fu_474_p3));
    tmp4_fu_426_p2 <= std_logic_vector(signed(grp_fu_450_p3) + signed(tmp6_reg_684));
    tmp_1_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(tmp_1),64));
    tmp_2_fu_430_p2 <= std_logic_vector(signed(tmp1_fu_422_p2) + signed(tmp4_fu_426_p2));
    tmp_3_fu_311_p3 <= (tmp_11 & ap_const_lv3_0);
    tmp_5_fu_446_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_addr1_reg_584_pp0_it3),64));
    tmp_8_1_fu_362_p0 <= src1_load_reg_599;
    tmp_8_1_fu_362_p1 <= dct_coeff_table_1_load_reg_594;
    tmp_8_1_fu_362_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_1_fu_362_p0) * signed(tmp_8_1_fu_362_p1))), 29));
    tmp_8_3_fu_374_p0 <= src3_load_reg_614;
    tmp_8_3_fu_374_p1 <= dct_coeff_table_3_load_reg_609;
    tmp_8_3_fu_374_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_3_fu_374_p0) * signed(tmp_8_3_fu_374_p1))), 29));
    tmp_8_5_fu_386_p0 <= src5_load_reg_629;
    tmp_8_5_fu_386_p1 <= dct_coeff_table_5_load_reg_624;
    tmp_8_5_fu_386_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_5_fu_386_p0) * signed(tmp_8_5_fu_386_p1))), 29));
    tmp_fu_335_p1 <= std_logic_vector(resize(unsigned(k_reg_288),64));
    tmp_trn_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(k_reg_288),8));
end behav;
