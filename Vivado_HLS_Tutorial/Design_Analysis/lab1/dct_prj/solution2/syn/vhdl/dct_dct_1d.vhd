-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal dct_coeff_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dct_coeff_table_ce0 : STD_LOGIC;
    signal dct_coeff_table_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal n_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr_cast_fu_145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr2_cast_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr2_cast_reg_275 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal k_1_fu_167_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal dct_coeff_table_addr6_cast_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_addr6_cast_reg_289 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_294_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal dct_coeff_table_load_reg_313 : STD_LOGIC_VECTOR (14 downto 0);
    signal src_load_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal tmp_13_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_137_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_149_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_173_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_trn5_cast_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_addr7_fu_201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_227_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_2_fu_231_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_trn_cast_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_262_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component dct_mac_muladd_16s_15s_32ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dct_dct_1d_dct_coeff_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_U : component dct_dct_1d_dct_coeff_table
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_address0,
        ce0 => dct_coeff_table_ce0,
        q0 => dct_coeff_table_q0);

    dct_mac_muladd_16s_15s_32ns_32_1_U0 : component dct_mac_muladd_16s_15s_32ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_262_p0,
        din1 => grp_fu_262_p1,
        din2 => grp_fu_262_p2,
        dout => grp_fu_262_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_185_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_161_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_fu_185_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_161_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_185_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- k_reg_102 assign process. --
    k_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
                k_reg_102 <= k_1_reg_284;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_102 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- n_reg_114 assign process. --
    n_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_fu_185_p2))) then 
                n_reg_114 <= n_1_fu_191_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_161_p2 = ap_const_lv1_0))) then 
                n_reg_114 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- tmp1_reg_125 assign process. --
    tmp1_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_294_pp0_it1))) then 
                tmp1_reg_125 <= grp_fu_262_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_161_p2 = ap_const_lv1_0))) then 
                tmp1_reg_125 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2)) then
                ap_reg_ppstg_exitcond_reg_294_pp0_it1 <= exitcond_reg_294;
                exitcond_reg_294 <= exitcond_fu_185_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_161_p2 = ap_const_lv1_0))) then
                    dct_coeff_table_addr6_cast_reg_289(6 downto 3) <= dct_coeff_table_addr6_cast_fu_181_p1(6 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_294))) then
                dct_coeff_table_load_reg_313 <= dct_coeff_table_q0;
                src_load_reg_318 <= src_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                k_1_reg_284 <= k_1_fu_167_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    p_addr2_cast_reg_275(6 downto 3) <= p_addr2_cast_fu_157_p1(6 downto 3);
                    p_addr_cast_reg_270(6 downto 3) <= p_addr_cast_fu_145_p1(6 downto 3);
            end if;
        end if;
    end process;
    p_addr_cast_reg_270(2 downto 0) <= "000";
    p_addr_cast_reg_270(7) <= '0';
    p_addr2_cast_reg_275(2 downto 0) <= "000";
    p_addr2_cast_reg_275(7) <= '0';
    dct_coeff_table_addr6_cast_reg_289(2 downto 0) <= "000";
    dct_coeff_table_addr6_cast_reg_289(7) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_161_p2, exitcond_fu_185_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_161_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_185_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_185_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                end if;
            when ap_ST_st6_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, exitcond1_fu_161_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_161_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_161_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_161_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_3 assign process. --
    ap_sig_cseq_ST_st6_fsm_3_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_addr6_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_173_p3),8));
    dct_coeff_table_addr7_fu_201_p2 <= std_logic_vector(unsigned(tmp_6_trn5_cast_fu_197_p1) + unsigned(dct_coeff_table_addr6_cast_reg_289));
    dct_coeff_table_address0 <= tmp_13_fu_206_p1(6 - 1 downto 0);

    -- dct_coeff_table_ce0 assign process. --
    dct_coeff_table_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            dct_coeff_table_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_12_fu_257_p1(6 - 1 downto 0);

    -- dst_ce0 assign process. --
    dst_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_2_fu_231_p2(28 downto 13);

    -- dst_we0 assign process. --
    dst_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_161_p2 <= "1" when (k_reg_102 = ap_const_lv4_8) else "0";
    exitcond_fu_185_p2 <= "1" when (n_reg_114 = ap_const_lv4_8) else "0";
    grp_fu_262_p0 <= src_load_reg_318;
    grp_fu_262_p1 <= dct_coeff_table_load_reg_313;
    grp_fu_262_p2 <= tmp1_reg_125;
    k_1_fu_167_p2 <= std_logic_vector(unsigned(k_reg_102) + unsigned(ap_const_lv4_1));
    n_1_fu_191_p2 <= std_logic_vector(unsigned(n_reg_114) + unsigned(ap_const_lv4_1));
    p_addr1_fu_211_p2 <= std_logic_vector(unsigned(tmp_6_trn5_cast_fu_197_p1) + unsigned(p_addr_cast_reg_270));
    p_addr2_cast_fu_157_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_149_p3),8));
    p_addr3_fu_252_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_248_p1) + unsigned(p_addr2_cast_reg_275));
    p_addr_cast_fu_145_p1 <= std_logic_vector(resize(unsigned(tmp_fu_137_p3),8));
    src_address0 <= tmp_14_fu_216_p1(6 - 1 downto 0);

    -- src_ce0 assign process. --
    src_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_227_p1 <= tmp1_reg_125(29 - 1 downto 0);
    tmp_12_fu_257_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_252_p2),64));
    tmp_13_fu_206_p1 <= std_logic_vector(resize(unsigned(dct_coeff_table_addr7_fu_201_p2),64));
    tmp_14_fu_216_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_211_p2),64));
    tmp_2_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv29_1000) + unsigned(tmp_10_fu_227_p1));
    tmp_6_fu_149_p3 <= (tmp_11 & ap_const_lv3_0);
    tmp_6_trn5_cast_fu_197_p1 <= std_logic_vector(resize(unsigned(n_reg_114),8));
    tmp_7_fu_173_p3 <= (k_reg_102 & ap_const_lv3_0);
    tmp_fu_137_p3 <= (tmp_1 & ap_const_lv3_0);
    tmp_trn_cast_fu_248_p1 <= std_logic_vector(resize(unsigned(k_reg_102),8));
end behav;
