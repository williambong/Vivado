-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st6_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_pp1_stg0_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st10_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal indvar_flatten_reg_131 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_153 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten2_reg_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_63 : BOOLEAN;
    signal i_4_fu_230_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_448 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_242_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_mid2_fu_254_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_reg_462 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_268_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_467 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal i_5_fu_340_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_487 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten2_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next2_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_mid2_fu_364_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_mid2_reg_501 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_fu_378_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_506 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_209_ap_start : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_ap_done : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_ap_idle : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_ap_ready : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_209_src_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_209_tmp_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_209_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_209_dst_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_dst_we0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_209_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_209_tmp_11 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_119 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_199 : BOOLEAN;
    signal j_phi_fu_146_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_218 : BOOLEAN;
    signal j_1_phi_fu_191_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_209_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_6_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_fu_262_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_280_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_trn_cast_fu_276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_cast_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_312_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_trn_cast_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr6_cast_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_390_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_trn_cast_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr8_cast_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr9_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_422_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_trn_cast_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_cast_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_386 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component dct_dct_1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => row_outbuf_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => col_outbuf_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => col_inbuf_d0,
        q0 => col_inbuf_q0);

    grp_dct_dct_1d_fu_209 : component dct_dct_1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_dct_1d_fu_209_ap_start,
        ap_done => grp_dct_dct_1d_fu_209_ap_done,
        ap_idle => grp_dct_dct_1d_fu_209_ap_idle,
        ap_ready => grp_dct_dct_1d_fu_209_ap_ready,
        src_address0 => grp_dct_dct_1d_fu_209_src_address0,
        src_ce0 => grp_dct_dct_1d_fu_209_src_ce0,
        src_q0 => grp_dct_dct_1d_fu_209_src_q0,
        tmp_1 => grp_dct_dct_1d_fu_209_tmp_1,
        dst_address0 => grp_dct_dct_1d_fu_209_dst_address0,
        dst_ce0 => grp_dct_dct_1d_fu_209_dst_ce0,
        dst_we0 => grp_dct_dct_1d_fu_209_dst_we0,
        dst_d0 => grp_dct_dct_1d_fu_209_dst_d0,
        tmp_11 => grp_dct_dct_1d_fu_209_tmp_11);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_224_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_224_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_flatten2_fu_346_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_334_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_dct_dct_1d_fu_209_ap_start_ap_start_reg assign process. --
    grp_dct_dct_1d_fu_209_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_dct_1d_fu_209_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_224_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                    grp_dct_dct_1d_fu_209_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_dct_1d_fu_209_ap_ready)) then 
                    grp_dct_dct_1d_fu_209_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_153 assign process. --
    i_1_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_224_p2 = ap_const_lv1_0)))) then 
                i_1_reg_153 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                i_1_reg_153 <= i_6_fu_303_p2;
            end if; 
        end if;
    end process;

    -- i_2_reg_164 assign process. --
    i_2_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)))) then 
                i_2_reg_164 <= ap_const_lv4_0;
            elsif ((not((ap_const_logic_0 = grp_dct_dct_1d_fu_209_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5))) then 
                i_2_reg_164 <= i_5_reg_487;
            end if; 
        end if;
    end process;

    -- i_3_reg_198 assign process. --
    i_3_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                i_3_reg_198 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))) then 
                i_3_reg_198 <= i_7_fu_413_p2;
            end if; 
        end if;
    end process;

    -- i_reg_119 assign process. --
    i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_dct_dct_1d_fu_209_ap_done)))) then 
                i_reg_119 <= i_4_reg_448;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_119 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten2_reg_176 assign process. --
    indvar_flatten2_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                indvar_flatten2_reg_176 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))) then 
                indvar_flatten2_reg_176 <= indvar_flatten_next2_fu_352_p2;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_131 assign process. --
    indvar_flatten_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_224_p2 = ap_const_lv1_0)))) then 
                indvar_flatten_reg_131 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_131 <= indvar_flatten_next_fu_242_p2;
            end if; 
        end if;
    end process;

    -- j_1_reg_187 assign process. --
    j_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                j_1_reg_187 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_492))) then 
                j_1_reg_187 <= j_1_mid2_reg_506;
            end if; 
        end if;
    end process;

    -- j_reg_142 assign process. --
    j_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_224_p2 = ap_const_lv1_0)))) then 
                j_reg_142 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_453 = ap_const_lv1_0))) then 
                j_reg_142 <= j_mid2_reg_467;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) then
                exitcond_flatten2_reg_492 <= exitcond_flatten2_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                exitcond_flatten_reg_453 <= exitcond_flatten_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then
                i_1_mid2_reg_462 <= i_1_mid2_fu_254_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))) then
                i_3_mid2_reg_501 <= i_3_mid2_fu_364_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_448 <= i_4_fu_230_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_4)) then
                i_5_reg_487 <= i_5_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))) then
                j_1_mid2_reg_506 <= j_1_mid2_fu_378_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then
                j_mid2_reg_467 <= j_mid2_fu_268_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_224_p2, exitcond_flatten_fu_236_p2, ap_reg_ppiten_pp0_it0, exitcond2_fu_334_p2, exitcond_flatten2_fu_346_p2, ap_reg_ppiten_pp1_it0, grp_dct_dct_1d_fu_209_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond5_fu_224_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_dct_dct_1d_fu_209_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_4;
                end if;
            when ap_ST_st6_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_334_p2))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (not((ap_const_logic_0 = grp_dct_dct_1d_fu_209_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_flatten2_fu_346_p2))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_7;
                end if;
            when ap_ST_st10_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st10_fsm_7)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_199 assign process. --
    ap_sig_bdd_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_199 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_218 assign process. --
    ap_sig_bdd_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_218 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_386 assign process. --
    ap_sig_bdd_386_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_386 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_63 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_74 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_74)
    begin
        if (ap_sig_bdd_74) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_6_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_7 assign process. --
    ap_sig_cseq_ST_st10_fsm_7_assign_proc : process(ap_sig_bdd_386)
    begin
        if (ap_sig_bdd_386) then 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_63)
    begin
        if (ap_sig_bdd_63) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_199)
    begin
        if (ap_sig_bdd_199) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_4 assign process. --
    ap_sig_cseq_ST_st6_fsm_4_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st6_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_218)
    begin
        if (ap_sig_bdd_218) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_inbuf_address0 assign process. --
    col_inbuf_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, grp_dct_dct_1d_fu_209_src_address0, ap_sig_cseq_ST_st7_fsm_5, tmp_8_fu_329_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_address0 <= tmp_8_fu_329_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_inbuf_address0 <= grp_dct_dct_1d_fu_209_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_inbuf_ce0 assign process. --
    col_inbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, grp_dct_dct_1d_fu_209_src_ce0, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_inbuf_ce0 <= grp_dct_dct_1d_fu_209_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= row_outbuf_q0;

    -- col_inbuf_we0 assign process. --
    col_inbuf_we0_assign_proc : process(exitcond_flatten_reg_453, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_453 = ap_const_lv1_0)))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_outbuf_address0 assign process. --
    col_outbuf_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it0, grp_dct_dct_1d_fu_209_dst_address0, ap_sig_cseq_ST_st7_fsm_5, tmp_1_fu_408_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            col_outbuf_address0 <= tmp_1_fu_408_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_outbuf_address0 <= grp_dct_dct_1d_fu_209_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_outbuf_ce0 assign process. --
    col_outbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it0, grp_dct_dct_1d_fu_209_dst_ce0, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_outbuf_ce0 <= grp_dct_dct_1d_fu_209_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_d0 <= grp_dct_dct_1d_fu_209_dst_d0;

    -- col_outbuf_we0 assign process. --
    col_outbuf_we0_assign_proc : process(grp_dct_dct_1d_fu_209_dst_we0, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            col_outbuf_we0 <= grp_dct_dct_1d_fu_209_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_358_p2 <= "1" when (i_3_reg_198 = ap_const_lv4_8) else "0";
    exitcond2_fu_334_p2 <= "1" when (i_2_reg_164 = ap_const_lv4_8) else "0";
    exitcond5_fu_224_p2 <= "1" when (i_reg_119 = ap_const_lv4_8) else "0";
    exitcond_flatten2_fu_346_p2 <= "1" when (indvar_flatten2_reg_176 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_236_p2 <= "1" when (indvar_flatten_reg_131 = ap_const_lv7_40) else "0";
    exitcond_fu_248_p2 <= "1" when (i_1_reg_153 = ap_const_lv4_8) else "0";
    grp_dct_dct_1d_fu_209_ap_start <= grp_dct_dct_1d_fu_209_ap_start_ap_start_reg;

    -- grp_dct_dct_1d_fu_209_src_q0 assign process. --
    grp_dct_dct_1d_fu_209_src_q0_assign_proc : process(in_block_q0, col_inbuf_q0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_209_src_q0 <= col_inbuf_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_209_src_q0 <= in_block_q0;
        else 
            grp_dct_dct_1d_fu_209_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_209_tmp_1 assign process. --
    grp_dct_dct_1d_fu_209_tmp_1_assign_proc : process(i_reg_119, ap_sig_cseq_ST_st3_fsm_2, i_2_reg_164, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_209_tmp_1 <= i_2_reg_164;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_209_tmp_1 <= i_reg_119;
        else 
            grp_dct_dct_1d_fu_209_tmp_1 <= "XXXX";
        end if; 
    end process;


    -- grp_dct_dct_1d_fu_209_tmp_11 assign process. --
    grp_dct_dct_1d_fu_209_tmp_11_assign_proc : process(i_reg_119, ap_sig_cseq_ST_st3_fsm_2, i_2_reg_164, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            grp_dct_dct_1d_fu_209_tmp_11 <= i_2_reg_164;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_dct_dct_1d_fu_209_tmp_11 <= i_reg_119;
        else 
            grp_dct_dct_1d_fu_209_tmp_11 <= "XXXX";
        end if; 
    end process;

    i_1_mid2_fu_254_p3 <= 
        ap_const_lv4_0 when (exitcond_fu_248_p2(0) = '1') else 
        i_1_reg_153;
    i_3_mid2_fu_364_p3 <= 
        ap_const_lv4_0 when (exitcond1_fu_358_p2(0) = '1') else 
        i_3_reg_198;
    i_4_fu_230_p2 <= std_logic_vector(unsigned(i_reg_119) + unsigned(ap_const_lv4_1));
    i_5_fu_340_p2 <= std_logic_vector(unsigned(i_2_reg_164) + unsigned(ap_const_lv4_1));
    i_6_fu_303_p2 <= std_logic_vector(unsigned(i_1_mid2_fu_254_p3) + unsigned(ap_const_lv4_1));
    i_7_fu_413_p2 <= std_logic_vector(unsigned(i_3_mid2_fu_364_p3) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_dct_1d_fu_209_src_address0;

    -- in_block_ce0 assign process. --
    in_block_ce0_assign_proc : process(grp_dct_dct_1d_fu_209_src_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_block_ce0 <= grp_dct_dct_1d_fu_209_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next2_fu_352_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_176) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_131) + unsigned(ap_const_lv7_1));
    j_1_mid2_fu_378_p3 <= 
        j_2_fu_372_p2 when (exitcond1_fu_358_p2(0) = '1') else 
        j_1_phi_fu_191_p4;

    -- j_1_phi_fu_191_p4 assign process. --
    j_1_phi_fu_191_p4_assign_proc : process(j_1_reg_187, exitcond_flatten2_reg_492, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it1, j_1_mid2_reg_506)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_492))) then 
            j_1_phi_fu_191_p4 <= j_1_mid2_reg_506;
        else 
            j_1_phi_fu_191_p4 <= j_1_reg_187;
        end if; 
    end process;

    j_2_fu_372_p2 <= std_logic_vector(unsigned(j_1_phi_fu_191_p4) + unsigned(ap_const_lv4_1));
    j_mid2_fu_268_p3 <= 
        j_s_fu_262_p2 when (exitcond_fu_248_p2(0) = '1') else 
        j_phi_fu_146_p4;

    -- j_phi_fu_146_p4 assign process. --
    j_phi_fu_146_p4_assign_proc : process(j_reg_142, exitcond_flatten_reg_453, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, j_mid2_reg_467)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_453 = ap_const_lv1_0))) then 
            j_phi_fu_146_p4 <= j_mid2_reg_467;
        else 
            j_phi_fu_146_p4 <= j_reg_142;
        end if; 
    end process;

    j_s_fu_262_p2 <= std_logic_vector(unsigned(j_phi_fu_146_p4) + unsigned(ap_const_lv4_1));
    out_block_address0 <= tmp_3_fu_439_p1(6 - 1 downto 0);

    -- out_block_ce0 assign process. --
    out_block_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    -- out_block_we0 assign process. --
    out_block_we0_assign_proc : process(exitcond_flatten2_reg_492, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_492)))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr3_cast_fu_429_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_422_p3),8));
    p_addr4_fu_433_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_419_p1) + unsigned(p_addr3_cast_fu_429_p1));
    p_addr5_fu_292_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_276_p1) + unsigned(p_addr_cast_fu_288_p1));
    p_addr6_cast_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_312_p3),8));
    p_addr7_fu_323_p2 <= std_logic_vector(unsigned(tmp_2_trn_cast_fu_309_p1) + unsigned(p_addr6_cast_fu_319_p1));
    p_addr8_cast_fu_398_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_390_p3),8));
    p_addr9_fu_402_p2 <= std_logic_vector(unsigned(tmp_3_trn_cast_fu_386_p1) + unsigned(p_addr8_cast_fu_398_p1));
    p_addr_cast_fu_288_p1 <= std_logic_vector(resize(unsigned(tmp_fu_280_p3),8));

    -- row_outbuf_address0 assign process. --
    row_outbuf_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, grp_dct_dct_1d_fu_209_dst_address0, ap_sig_cseq_ST_st3_fsm_2, tmp_6_fu_298_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_outbuf_address0 <= tmp_6_fu_298_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_address0 <= grp_dct_dct_1d_fu_209_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, grp_dct_dct_1d_fu_209_dst_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_ce0 <= grp_dct_dct_1d_fu_209_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= grp_dct_dct_1d_fu_209_dst_d0;

    -- row_outbuf_we0 assign process. --
    row_outbuf_we0_assign_proc : process(grp_dct_dct_1d_fu_209_dst_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            row_outbuf_we0 <= grp_dct_dct_1d_fu_209_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_408_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_402_p2),64));
    tmp_2_fu_422_p3 <= (j_1_mid2_reg_506 & ap_const_lv3_0);
    tmp_2_trn_cast_fu_309_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_reg_462),8));
    tmp_3_fu_439_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_433_p2),64));
    tmp_3_trn_cast_fu_386_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_fu_378_p3),8));
    tmp_4_trn_cast_fu_419_p1 <= std_logic_vector(resize(unsigned(i_3_mid2_reg_501),8));
    tmp_6_fu_298_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_292_p2),64));
    tmp_7_fu_312_p3 <= (j_mid2_reg_467 & ap_const_lv3_0);
    tmp_8_fu_329_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_323_p2),64));
    tmp_fu_280_p3 <= (i_1_mid2_fu_254_p3 & ap_const_lv3_0);
    tmp_s_fu_390_p3 <= (i_3_mid2_fu_364_p3 & ap_const_lv3_0);
    tmp_trn_cast_fu_276_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_268_p3),8));
end behav;
