// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_dct_1d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        tmp_1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        tmp_11
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st6_fsm_3 = 4'b1000;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv29_1000 = 29'b1000000000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1C = 32'b11100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
input  [3:0] tmp_1;
output  [5:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
input  [3:0] tmp_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_ce0;
reg dst_ce0;
reg dst_we0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [5:0] dct_coeff_table_address0;
reg    dct_coeff_table_ce0;
wire   [14:0] dct_coeff_table_q0;
reg   [3:0] n_reg_114;
reg   [31:0] tmp1_reg_125;
wire   [7:0] p_addr_cast_fu_145_p1;
reg   [7:0] p_addr_cast_reg_270;
wire   [7:0] p_addr2_cast_fu_157_p1;
reg   [7:0] p_addr2_cast_reg_275;
wire   [0:0] exitcond1_fu_161_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_67;
wire   [3:0] k_1_fu_167_p2;
reg   [3:0] k_1_reg_284;
wire   [7:0] dct_coeff_table_addr6_cast_fu_181_p1;
reg   [7:0] dct_coeff_table_addr6_cast_reg_289;
wire   [0:0] exitcond_fu_185_p2;
reg   [0:0] exitcond_reg_294;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_83;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_294_pp0_it1;
wire   [3:0] n_1_fu_191_p2;
reg   [14:0] dct_coeff_table_load_reg_313;
reg   [15:0] src_load_reg_318;
wire  signed [31:0] grp_fu_262_p3;
reg   [3:0] k_reg_102;
reg    ap_sig_cseq_ST_st6_fsm_3;
reg    ap_sig_bdd_121;
wire   [63:0] tmp_13_fu_206_p1;
wire   [63:0] tmp_14_fu_216_p1;
wire   [63:0] tmp_12_fu_257_p1;
wire   [6:0] tmp_fu_137_p3;
wire   [6:0] tmp_6_fu_149_p3;
wire   [6:0] tmp_7_fu_173_p3;
wire   [7:0] tmp_6_trn5_cast_fu_197_p1;
wire   [7:0] dct_coeff_table_addr7_fu_201_p2;
wire   [7:0] p_addr1_fu_211_p2;
wire   [28:0] tmp_10_fu_227_p1;
wire   [28:0] tmp_2_fu_231_p2;
wire   [7:0] tmp_trn_cast_fu_248_p1;
wire   [7:0] p_addr3_fu_252_p2;
wire  signed [15:0] grp_fu_262_p0;
wire  signed [14:0] grp_fu_262_p1;
wire   [31:0] grp_fu_262_p2;
reg   [3:0] ap_NS_fsm;


dct_dct_1d_dct_coeff_table #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dct_coeff_table_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_address0 ),
    .ce0( dct_coeff_table_ce0 ),
    .q0( dct_coeff_table_q0 )
);

dct_mac_muladd_16s_15s_32ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dct_mac_muladd_16s_15s_32ns_32_1_U0(
    .din0( grp_fu_262_p0 ),
    .din1( grp_fu_262_p1 ),
    .din2( grp_fu_262_p2 ),
    .dout( grp_fu_262_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_185_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_lv1_0 == exitcond_fu_185_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_185_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_3)) begin
        k_reg_102 <= k_1_reg_284;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        k_reg_102 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_lv1_0 == exitcond_fu_185_p2))) begin
        n_reg_114 <= n_1_fu_191_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == ap_const_lv1_0))) begin
        n_reg_114 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_294_pp0_it1))) begin
        tmp1_reg_125 <= grp_fu_262_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == ap_const_lv1_0))) begin
        tmp1_reg_125 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2)) begin
        ap_reg_ppstg_exitcond_reg_294_pp0_it1 <= exitcond_reg_294;
        exitcond_reg_294 <= exitcond_fu_185_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == ap_const_lv1_0))) begin
        dct_coeff_table_addr6_cast_reg_289[6 : 3] <= dct_coeff_table_addr6_cast_fu_181_p1[6 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_lv1_0 == exitcond_reg_294))) begin
        dct_coeff_table_load_reg_313 <= dct_coeff_table_q0;
        src_load_reg_318 <= src_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        k_1_reg_284 <= k_1_fu_167_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_addr2_cast_reg_275[6 : 3] <= p_addr2_cast_fu_157_p1[6 : 3];
        p_addr_cast_reg_270[6 : 3] <= p_addr_cast_fu_145_p1[6 : 3];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or exitcond1_fu_161_p2 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_161_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (exitcond1_fu_161_p2 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_161_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. ///
always @ (ap_sig_bdd_83)
begin
    if (ap_sig_bdd_83) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_67)
begin
    if (ap_sig_bdd_67) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_3 assign process. ///
always @ (ap_sig_bdd_121)
begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_st6_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_3 = ap_const_logic_0;
    end
end

/// dct_coeff_table_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_ce0 = ap_const_logic_0;
    end
end

/// dst_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_3)) begin
        dst_ce0 = ap_const_logic_1;
    end else begin
        dst_ce0 = ap_const_logic_0;
    end
end

/// dst_we0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_3)) begin
        dst_we0 = ap_const_logic_1;
    end else begin
        dst_we0 = ap_const_logic_0;
    end
end

/// src_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        src_ce0 = ap_const_logic_1;
    end else begin
        src_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_161_p2 or exitcond_fu_185_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_161_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_const_lv1_0 == exitcond_fu_185_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_const_lv1_0 == exitcond_fu_185_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st6_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_3;
            end
        end
        ap_ST_st6_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_121 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_67 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_67 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_83 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_83 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign dct_coeff_table_addr6_cast_fu_181_p1 = tmp_7_fu_173_p3;
assign dct_coeff_table_addr7_fu_201_p2 = (tmp_6_trn5_cast_fu_197_p1 + dct_coeff_table_addr6_cast_reg_289);
assign dct_coeff_table_address0 = tmp_13_fu_206_p1;
assign dst_address0 = tmp_12_fu_257_p1;
assign dst_d0 = {{tmp_2_fu_231_p2[ap_const_lv32_1C : ap_const_lv32_D]}};
assign exitcond1_fu_161_p2 = (k_reg_102 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_185_p2 = (n_reg_114 == ap_const_lv4_8? 1'b1: 1'b0);
assign grp_fu_262_p0 = src_load_reg_318;
assign grp_fu_262_p1 = dct_coeff_table_load_reg_313;
assign grp_fu_262_p2 = tmp1_reg_125;
assign k_1_fu_167_p2 = (k_reg_102 + ap_const_lv4_1);
assign n_1_fu_191_p2 = (n_reg_114 + ap_const_lv4_1);
assign p_addr1_fu_211_p2 = (tmp_6_trn5_cast_fu_197_p1 + p_addr_cast_reg_270);
assign p_addr2_cast_fu_157_p1 = tmp_6_fu_149_p3;
assign p_addr3_fu_252_p2 = (tmp_trn_cast_fu_248_p1 + p_addr2_cast_reg_275);
assign p_addr_cast_fu_145_p1 = tmp_fu_137_p3;
assign src_address0 = tmp_14_fu_216_p1;
assign tmp_10_fu_227_p1 = tmp1_reg_125[28:0];
assign tmp_12_fu_257_p1 = p_addr3_fu_252_p2;
assign tmp_13_fu_206_p1 = dct_coeff_table_addr7_fu_201_p2;
assign tmp_14_fu_216_p1 = p_addr1_fu_211_p2;
assign tmp_2_fu_231_p2 = (ap_const_lv29_1000 + tmp_10_fu_227_p1);
assign tmp_6_fu_149_p3 = {{tmp_11}, {ap_const_lv3_0}};
assign tmp_6_trn5_cast_fu_197_p1 = n_reg_114;
assign tmp_7_fu_173_p3 = {{k_reg_102}, {ap_const_lv3_0}};
assign tmp_fu_137_p3 = {{tmp_1}, {ap_const_lv3_0}};
assign tmp_trn_cast_fu_248_p1 = k_reg_102;
always @ (posedge ap_clk)
begin
    p_addr_cast_reg_270[2:0] <= 3'b000;
    p_addr_cast_reg_270[7] <= 1'b0;
    p_addr2_cast_reg_275[2:0] <= 3'b000;
    p_addr2_cast_reg_275[7] <= 1'b0;
    dct_coeff_table_addr6_cast_reg_289[2:0] <= 3'b000;
    dct_coeff_table_addr6_cast_reg_289[7] <= 1'b0;
end



endmodule //dct_dct_1d

