// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=11.130000,HLS_SYN_LAT=6,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=503,HLS_SYN_LUT=47}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 5'b1;
parameter    ap_ST_pp0_stg1_fsm_1 = 5'b10;
parameter    ap_ST_pp0_stg2_fsm_2 = 5'b100;
parameter    ap_ST_pp0_stg3_fsm_3 = 5'b1000;
parameter    ap_ST_pp0_stg4_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_address0;
output   a_ce0;
input  [23:0] a_q0;
output  [1:0] a_address1;
output   a_ce1;
input  [23:0] a_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [23:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [23:0] b_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] a_address0;
reg a_ce0;
reg a_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg b_ce1;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;
reg[15:0] res_d0;
reg[3:0] res_address1;
reg res_ce1;
reg res_we1;
reg[15:0] res_d1;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_bdd_21;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_4;
reg    ap_sig_bdd_39;
reg   [7:0] reg_244;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_1;
reg    ap_sig_bdd_79;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_2;
reg    ap_sig_bdd_87;
reg   [7:0] reg_248;
wire  signed [15:0] tmp_3_fu_256_p1;
reg  signed [15:0] tmp_3_reg_570;
wire  signed [15:0] tmp_8_fu_264_p1;
reg  signed [15:0] tmp_8_reg_575;
wire  signed [15:0] tmp_5_0_0_2_fu_268_p1;
reg  signed [15:0] tmp_5_0_0_2_reg_581;
wire  signed [15:0] tmp_6_0_0_2_fu_272_p1;
reg  signed [15:0] tmp_6_0_0_2_reg_586;
wire  signed [15:0] grp_fu_542_p3;
reg  signed [15:0] tmp_reg_592;
wire  signed [15:0] tmp_6_0_1_fu_286_p1;
reg  signed [15:0] tmp_6_0_1_reg_597;
reg   [7:0] tmp_2_reg_603;
wire  signed [15:0] tmp_6_0_1_2_fu_310_p1;
reg  signed [15:0] tmp_6_0_1_2_reg_608;
wire  signed [15:0] grp_fu_534_p3;
reg  signed [15:0] tmp1_reg_614;
wire   [7:0] tmp_19_fu_320_p1;
reg   [7:0] tmp_19_reg_624;
reg   [7:0] tmp_13_reg_629;
reg   [7:0] tmp_14_reg_634;
wire  signed [15:0] tmp_5_0_0_1_fu_344_p1;
reg  signed [15:0] tmp_5_0_0_1_reg_644;
wire  signed [15:0] tmp_6_0_0_1_fu_348_p1;
reg  signed [15:0] tmp_6_0_0_1_reg_649;
wire  signed [15:0] tmp_6_0_1_1_fu_352_p1;
reg  signed [15:0] tmp_6_0_1_1_reg_655;
wire  signed [15:0] tmp_6_0_2_fu_359_p1;
reg  signed [15:0] tmp_6_0_2_reg_661;
wire  signed [15:0] tmp_6_0_2_2_fu_363_p1;
reg  signed [15:0] tmp_6_0_2_2_reg_667;
wire  signed [15:0] grp_fu_506_p3;
reg  signed [15:0] tmp2_reg_673;
wire  signed [15:0] tmp_5_1_fu_372_p1;
reg  signed [15:0] tmp_5_1_reg_678;
wire  signed [15:0] tmp_5_1_0_2_fu_375_p1;
reg  signed [15:0] tmp_5_1_0_2_reg_684;
wire  signed [15:0] grp_fu_426_p3;
reg  signed [15:0] tmp3_reg_690;
wire   [7:0] tmp_20_fu_383_p1;
reg   [7:0] tmp_20_reg_695;
wire   [7:0] grp_fu_224_p4;
reg   [7:0] tmp_17_reg_700;
wire  signed [15:0] tmp_6_0_2_1_fu_387_p1;
reg  signed [15:0] tmp_6_0_2_1_reg_705;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_3;
reg    ap_sig_bdd_161;
wire  signed [15:0] tmp_5_1_0_1_fu_391_p1;
reg  signed [15:0] tmp_5_1_0_1_reg_711;
wire  signed [15:0] grp_fu_520_p3;
reg  signed [15:0] tmp4_reg_717;
wire  signed [15:0] grp_fu_493_p3;
reg  signed [15:0] tmp5_reg_722;
wire  signed [15:0] tmp_5_2_fu_402_p1;
reg  signed [15:0] tmp_5_2_reg_727;
wire  signed [15:0] tmp_5_2_0_2_fu_405_p1;
reg  signed [15:0] tmp_5_2_0_2_reg_732;
wire  signed [15:0] grp_fu_453_p3;
reg  signed [15:0] tmp6_reg_737;
wire  signed [15:0] grp_fu_499_p3;
reg  signed [15:0] tmp7_reg_742;
wire  signed [15:0] tmp_5_2_0_1_fu_418_p1;
reg  signed [15:0] tmp_5_2_0_1_reg_747;
wire  signed [15:0] grp_fu_441_p3;
reg  signed [15:0] tmp8_reg_752;
reg    ap_reg_ppiten_pp0_it0_preg = 1'b0;
wire  signed [15:0] grp_fu_433_p3;
wire  signed [15:0] grp_fu_466_p3;
wire  signed [15:0] grp_fu_487_p3;
wire  signed [15:0] grp_fu_513_p3;
wire  signed [15:0] grp_fu_447_p3;
wire  signed [15:0] grp_fu_526_p3;
wire  signed [15:0] grp_fu_480_p3;
wire  signed [15:0] grp_fu_460_p3;
wire  signed [15:0] grp_fu_473_p3;
wire   [7:0] tmp_1_fu_252_p1;
wire   [7:0] tmp_4_fu_260_p1;
wire   [7:0] grp_fu_234_p4;
wire  signed [7:0] tmp_7_0_0_2_fu_276_p0;
wire  signed [7:0] tmp_7_0_0_2_fu_276_p1;
wire   [7:0] tmp_15_fu_282_p1;
wire   [7:0] tmp_5_fu_300_p4;
wire  signed [7:0] tmp_7_0_1_2_fu_314_p0;
wire  signed [7:0] tmp_7_0_1_2_fu_314_p1;
wire   [7:0] tmp_18_fu_355_p1;
wire  signed [7:0] tmp_7_0_2_2_fu_367_p0;
wire  signed [7:0] tmp_7_0_2_2_fu_367_p1;
wire  signed [7:0] tmp_7_1_0_2_fu_378_p0;
wire  signed [7:0] tmp_7_1_0_2_fu_378_p1;
wire  signed [7:0] tmp_7_1_1_2_fu_394_p0;
wire  signed [7:0] tmp_7_1_1_2_fu_394_p1;
wire  signed [7:0] tmp_7_1_2_2_fu_398_p0;
wire  signed [7:0] tmp_7_1_2_2_fu_398_p1;
wire  signed [7:0] tmp_7_2_0_2_fu_408_p0;
wire  signed [7:0] tmp_7_2_0_2_fu_408_p1;
wire  signed [7:0] tmp_7_2_1_2_fu_413_p0;
wire  signed [7:0] tmp_7_2_1_2_fu_413_p1;
wire  signed [7:0] tmp_7_2_2_2_fu_422_p0;
wire  signed [7:0] tmp_7_2_2_2_fu_422_p1;
wire  signed [7:0] grp_fu_426_p0;
wire  signed [7:0] grp_fu_426_p1;
wire  signed [15:0] grp_fu_426_p2;
wire  signed [7:0] grp_fu_433_p0;
wire  signed [7:0] grp_fu_433_p1;
wire  signed [15:0] grp_fu_433_p2;
wire  signed [7:0] grp_fu_441_p0;
wire  signed [7:0] grp_fu_441_p1;
wire  signed [15:0] grp_fu_441_p2;
wire  signed [7:0] grp_fu_447_p0;
wire  signed [7:0] grp_fu_447_p1;
wire  signed [15:0] grp_fu_447_p2;
wire  signed [7:0] grp_fu_453_p0;
wire  signed [7:0] grp_fu_453_p1;
wire  signed [15:0] grp_fu_453_p2;
wire  signed [7:0] grp_fu_460_p0;
wire  signed [7:0] grp_fu_460_p1;
wire  signed [15:0] grp_fu_460_p2;
wire  signed [7:0] grp_fu_466_p0;
wire  signed [7:0] grp_fu_466_p1;
wire  signed [15:0] grp_fu_466_p2;
wire  signed [7:0] grp_fu_473_p0;
wire  signed [7:0] grp_fu_473_p1;
wire  signed [15:0] grp_fu_473_p2;
wire  signed [7:0] grp_fu_480_p0;
wire  signed [7:0] grp_fu_480_p1;
wire  signed [15:0] grp_fu_480_p2;
wire  signed [7:0] grp_fu_487_p0;
wire  signed [7:0] grp_fu_487_p1;
wire  signed [15:0] grp_fu_487_p2;
wire  signed [7:0] grp_fu_493_p0;
wire  signed [7:0] grp_fu_493_p1;
wire  signed [15:0] grp_fu_493_p2;
wire  signed [7:0] grp_fu_499_p0;
wire  signed [7:0] grp_fu_499_p1;
wire  signed [15:0] grp_fu_499_p2;
wire  signed [7:0] grp_fu_506_p0;
wire  signed [7:0] grp_fu_506_p1;
wire  signed [15:0] grp_fu_506_p2;
wire  signed [7:0] grp_fu_513_p0;
wire  signed [7:0] grp_fu_513_p1;
wire  signed [15:0] grp_fu_513_p2;
wire  signed [7:0] grp_fu_520_p0;
wire  signed [7:0] grp_fu_520_p1;
wire  signed [15:0] grp_fu_520_p2;
wire  signed [7:0] grp_fu_526_p0;
wire  signed [7:0] grp_fu_526_p1;
wire  signed [15:0] grp_fu_526_p2;
wire  signed [7:0] grp_fu_534_p0;
wire  signed [7:0] grp_fu_534_p1;
wire  signed [15:0] grp_fu_534_p2;
wire  signed [7:0] grp_fu_542_p0;
wire  signed [7:0] grp_fu_542_p1;
wire  signed [15:0] grp_fu_542_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;


matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U0(
    .din0( grp_fu_426_p0 ),
    .din1( grp_fu_426_p1 ),
    .din2( grp_fu_426_p2 ),
    .dout( grp_fu_426_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U1(
    .din0( grp_fu_433_p0 ),
    .din1( grp_fu_433_p1 ),
    .din2( grp_fu_433_p2 ),
    .dout( grp_fu_433_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U2(
    .din0( grp_fu_441_p0 ),
    .din1( grp_fu_441_p1 ),
    .din2( grp_fu_441_p2 ),
    .dout( grp_fu_441_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U3(
    .din0( grp_fu_447_p0 ),
    .din1( grp_fu_447_p1 ),
    .din2( grp_fu_447_p2 ),
    .dout( grp_fu_447_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U4(
    .din0( grp_fu_453_p0 ),
    .din1( grp_fu_453_p1 ),
    .din2( grp_fu_453_p2 ),
    .dout( grp_fu_453_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U5(
    .din0( grp_fu_460_p0 ),
    .din1( grp_fu_460_p1 ),
    .din2( grp_fu_460_p2 ),
    .dout( grp_fu_460_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U6(
    .din0( grp_fu_466_p0 ),
    .din1( grp_fu_466_p1 ),
    .din2( grp_fu_466_p2 ),
    .dout( grp_fu_466_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U7(
    .din0( grp_fu_473_p0 ),
    .din1( grp_fu_473_p1 ),
    .din2( grp_fu_473_p2 ),
    .dout( grp_fu_473_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U8(
    .din0( grp_fu_480_p0 ),
    .din1( grp_fu_480_p1 ),
    .din2( grp_fu_480_p2 ),
    .dout( grp_fu_480_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U9(
    .din0( grp_fu_487_p0 ),
    .din1( grp_fu_487_p1 ),
    .din2( grp_fu_487_p2 ),
    .dout( grp_fu_487_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U10(
    .din0( grp_fu_493_p0 ),
    .din1( grp_fu_493_p1 ),
    .din2( grp_fu_493_p2 ),
    .dout( grp_fu_493_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U11(
    .din0( grp_fu_499_p0 ),
    .din1( grp_fu_499_p1 ),
    .din2( grp_fu_499_p2 ),
    .dout( grp_fu_499_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U12(
    .din0( grp_fu_506_p0 ),
    .din1( grp_fu_506_p1 ),
    .din2( grp_fu_506_p2 ),
    .dout( grp_fu_506_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U13(
    .din0( grp_fu_513_p0 ),
    .din1( grp_fu_513_p1 ),
    .din2( grp_fu_513_p2 ),
    .dout( grp_fu_513_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U14(
    .din0( grp_fu_520_p0 ),
    .din1( grp_fu_520_p1 ),
    .din2( grp_fu_520_p2 ),
    .dout( grp_fu_520_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U15(
    .din0( grp_fu_526_p0 ),
    .din1( grp_fu_526_p1 ),
    .din2( grp_fu_526_p2 ),
    .dout( grp_fu_526_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U16(
    .din0( grp_fu_534_p0 ),
    .din1( grp_fu_534_p1 ),
    .din2( grp_fu_534_p2 ),
    .dout( grp_fu_534_p3 )
);

matrixmul_mac_muladd_8s_8s_16s_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16s_16_1_U17(
    .din0( grp_fu_542_p0 ),
    .din1( grp_fu_542_p1 ),
    .din2( grp_fu_542_p2 ),
    .dout( grp_fu_542_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0_preg
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
            ap_reg_ppiten_pp0_it0_preg <= ap_start;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        reg_244 <= {{a_q0[ap_const_lv32_F : ap_const_lv32_8]}};
        reg_248 <= {{b_q0[ap_const_lv32_F : ap_const_lv32_8]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
        tmp1_reg_614 <= grp_fu_534_p3;
        tmp_13_reg_629 <= {{a_q1[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_14_reg_634 <= {{a_q1[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_19_reg_624 <= tmp_19_fu_320_p1;
        tmp_2_reg_603 <= {{b_q1[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_3_reg_570 <= tmp_3_fu_256_p1;
        tmp_5_0_0_2_reg_581 <= tmp_5_0_0_2_fu_268_p1;
        tmp_6_0_0_2_reg_586 <= tmp_6_0_0_2_fu_272_p1;
        tmp_6_0_1_2_reg_608 <= tmp_6_0_1_2_fu_310_p1;
        tmp_6_0_1_reg_597 <= tmp_6_0_1_fu_286_p1;
        tmp_8_reg_575 <= tmp_8_fu_264_p1;
        tmp_reg_592 <= grp_fu_542_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) begin
        tmp2_reg_673 <= grp_fu_506_p3;
        tmp3_reg_690 <= grp_fu_426_p3;
        tmp_17_reg_700 <= {{a_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_20_reg_695 <= tmp_20_fu_383_p1;
        tmp_5_0_0_1_reg_644 <= tmp_5_0_0_1_fu_344_p1;
        tmp_5_1_0_2_reg_684 <= tmp_5_1_0_2_fu_375_p1;
        tmp_5_1_reg_678 <= tmp_5_1_fu_372_p1;
        tmp_6_0_0_1_reg_649 <= tmp_6_0_0_1_fu_348_p1;
        tmp_6_0_1_1_reg_655 <= tmp_6_0_1_1_fu_352_p1;
        tmp_6_0_2_2_reg_667 <= tmp_6_0_2_2_fu_363_p1;
        tmp_6_0_2_reg_661 <= tmp_6_0_2_fu_359_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) begin
        tmp4_reg_717 <= grp_fu_520_p3;
        tmp5_reg_722 <= grp_fu_493_p3;
        tmp_5_1_0_1_reg_711 <= tmp_5_1_0_1_fu_391_p1;
        tmp_6_0_2_1_reg_705 <= tmp_6_0_2_1_fu_387_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
        tmp6_reg_737 <= grp_fu_453_p3;
        tmp7_reg_742 <= grp_fu_499_p3;
        tmp_5_2_0_2_reg_732 <= tmp_5_2_0_2_fu_405_p1;
        tmp_5_2_reg_727 <= tmp_5_2_fu_402_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
        tmp8_reg_752 <= grp_fu_441_p3;
        tmp_5_2_0_1_reg_747 <= tmp_5_2_0_1_fu_418_p1;
    end
end

/// a_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            a_address0 = ap_const_lv64_2;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            a_address0 = ap_const_lv64_0;
        end else begin
            a_address0 = 'bx;
        end
    end else begin
        a_address0 = 'bx;
    end
end

/// a_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        a_ce0 = ap_const_logic_1;
    end else begin
        a_ce0 = ap_const_logic_0;
    end
end

/// a_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
        a_ce1 = ap_const_logic_1;
    end else begin
        a_ce1 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg4_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0_preg)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
        ap_reg_ppiten_pp0_it0 = ap_start;
    end else begin
        ap_reg_ppiten_pp0_it0 = ap_reg_ppiten_pp0_it0_preg;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. ///
always @ (ap_sig_bdd_79)
begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. ///
always @ (ap_sig_bdd_87)
begin
    if (ap_sig_bdd_87) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. ///
always @ (ap_sig_bdd_161)
begin
    if (ap_sig_bdd_161) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. ///
always @ (ap_sig_bdd_39)
begin
    if (ap_sig_bdd_39) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// b_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            b_address0 = ap_const_lv64_2;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            b_address0 = ap_const_lv64_0;
        end else begin
            b_address0 = 'bx;
        end
    end else begin
        b_address0 = 'bx;
    end
end

/// b_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        b_ce0 = ap_const_logic_1;
    end else begin
        b_ce0 = ap_const_logic_0;
    end
end

/// b_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
        b_ce1 = ap_const_logic_1;
    end else begin
        b_ce1 = ap_const_logic_0;
    end
end

/// res_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_address0 = ap_const_lv64_8;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_address0 = ap_const_lv64_6;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_address0 = ap_const_lv64_5;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_address0 = ap_const_lv64_3;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_address0 = ap_const_lv64_1;
    end else begin
        res_address0 = 'bx;
    end
end

/// res_address1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_address1 = ap_const_lv64_7;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_address1 = ap_const_lv64_4;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_address1 = ap_const_lv64_2;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_address1 = ap_const_lv64_0;
    end else begin
        res_address1 = 'bx;
    end
end

/// res_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_ce0 = ap_const_logic_1;
    end else begin
        res_ce0 = ap_const_logic_0;
    end
end

/// res_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_ce1 = ap_const_logic_1;
    end else begin
        res_ce1 = ap_const_logic_0;
    end
end

/// res_d0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or grp_fu_433_p3 or grp_fu_466_p3 or grp_fu_487_p3 or grp_fu_513_p3 or grp_fu_447_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_d0 = grp_fu_447_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_d0 = grp_fu_513_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_d0 = grp_fu_487_p3;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_d0 = grp_fu_466_p3;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_d0 = grp_fu_433_p3;
    end else begin
        res_d0 = 'bx;
    end
end

/// res_d1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or grp_fu_526_p3 or grp_fu_480_p3 or grp_fu_460_p3 or grp_fu_473_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_d1 = grp_fu_473_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_d1 = grp_fu_460_p3;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_d1 = grp_fu_480_p3;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_d1 = grp_fu_526_p3;
    end else begin
        res_d1 = 'bx;
    end
end

/// res_we0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_we0 = ap_const_logic_1;
    end else begin
        res_we0 = ap_const_logic_0;
    end
end

/// res_we1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_we1 = ap_const_logic_1;
    end else begin
        res_we1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & ~((ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_start)))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end
        end
        ap_ST_pp0_stg1_fsm_1 : 
        begin
            if (~(ap_const_logic_1 == ap_sig_pprstidle_pp0)) begin
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end
        end
        ap_ST_pp0_stg2_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_3;
        end
        ap_ST_pp0_stg3_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_4;
        end
        ap_ST_pp0_stg4_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address1 = ap_const_lv64_1;

/// ap_sig_bdd_161 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_161 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_39 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_39 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_79 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_87 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_87 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign b_address1 = ap_const_lv64_1;
assign grp_fu_224_p4 = {{a_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
assign grp_fu_234_p4 = {{b_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
assign grp_fu_426_p0 = tmp_8_reg_575;
assign grp_fu_426_p1 = tmp_19_reg_624;
assign grp_fu_426_p2 = ($signed(tmp_7_1_0_2_fu_378_p0) * $signed(tmp_7_1_0_2_fu_378_p1));
assign grp_fu_433_p0 = tmp_2_reg_603;
assign grp_fu_433_p1 = tmp_5_0_0_1_fu_344_p1;
assign grp_fu_433_p2 = tmp1_reg_614;
assign grp_fu_441_p0 = tmp_6_0_2_reg_661;
assign grp_fu_441_p1 = tmp_5_2_reg_727;
assign grp_fu_441_p2 = ($signed(tmp_7_2_2_2_fu_422_p0) * $signed(tmp_7_2_2_2_fu_422_p1));
assign grp_fu_447_p0 = tmp_6_0_2_1_reg_705;
assign grp_fu_447_p1 = tmp_5_2_0_1_reg_747;
assign grp_fu_447_p2 = tmp8_reg_752;
assign grp_fu_453_p0 = tmp_8_reg_575;
assign grp_fu_453_p1 = tmp_5_2_fu_402_p1;
assign grp_fu_453_p2 = ($signed(tmp_7_2_0_2_fu_408_p0) * $signed(tmp_7_2_0_2_fu_408_p1));
assign grp_fu_460_p0 = tmp_6_0_1_1_reg_655;
assign grp_fu_460_p1 = tmp_5_1_0_1_reg_711;
assign grp_fu_460_p2 = tmp4_reg_717;
assign grp_fu_466_p0 = tmp_6_0_0_1_reg_649;
assign grp_fu_466_p1 = tmp_13_reg_629;
assign grp_fu_466_p2 = tmp3_reg_690;
assign grp_fu_473_p0 = tmp_6_0_1_1_reg_655;
assign grp_fu_473_p1 = tmp_5_2_0_1_fu_418_p1;
assign grp_fu_473_p2 = tmp7_reg_742;
assign grp_fu_480_p0 = reg_248;
assign grp_fu_480_p1 = tmp_5_0_0_1_reg_644;
assign grp_fu_480_p2 = tmp2_reg_673;
assign grp_fu_487_p0 = tmp_6_0_2_1_reg_705;
assign grp_fu_487_p1 = tmp_5_1_0_1_reg_711;
assign grp_fu_487_p2 = tmp5_reg_722;
assign grp_fu_493_p0 = tmp_6_0_2_reg_661;
assign grp_fu_493_p1 = tmp_5_1_reg_678;
assign grp_fu_493_p2 = ($signed(tmp_7_1_2_2_fu_398_p0) * $signed(tmp_7_1_2_2_fu_398_p1));
assign grp_fu_499_p0 = tmp_6_0_1_reg_597;
assign grp_fu_499_p1 = tmp_5_2_fu_402_p1;
assign grp_fu_499_p2 = ($signed(tmp_7_2_1_2_fu_413_p0) * $signed(tmp_7_2_1_2_fu_413_p1));
assign grp_fu_506_p0 = tmp_18_fu_355_p1;
assign grp_fu_506_p1 = tmp_3_reg_570;
assign grp_fu_506_p2 = ($signed(tmp_7_0_2_2_fu_367_p0) * $signed(tmp_7_0_2_2_fu_367_p1));
assign grp_fu_513_p0 = tmp_6_0_0_1_reg_649;
assign grp_fu_513_p1 = tmp_5_2_0_1_fu_418_p1;
assign grp_fu_513_p2 = tmp6_reg_737;
assign grp_fu_520_p0 = tmp_6_0_1_reg_597;
assign grp_fu_520_p1 = tmp_5_1_reg_678;
assign grp_fu_520_p2 = ($signed(tmp_7_1_1_2_fu_394_p0) * $signed(tmp_7_1_1_2_fu_394_p1));
assign grp_fu_526_p0 = reg_248;
assign grp_fu_526_p1 = tmp_5_0_0_1_fu_344_p1;
assign grp_fu_526_p2 = tmp_reg_592;
assign grp_fu_534_p0 = tmp_15_fu_282_p1;
assign grp_fu_534_p1 = tmp_3_fu_256_p1;
assign grp_fu_534_p2 = ($signed(tmp_7_0_1_2_fu_314_p0) * $signed(tmp_7_0_1_2_fu_314_p1));
assign grp_fu_542_p0 = tmp_4_fu_260_p1;
assign grp_fu_542_p1 = tmp_3_fu_256_p1;
assign grp_fu_542_p2 = ($signed(tmp_7_0_0_2_fu_276_p0) * $signed(tmp_7_0_0_2_fu_276_p1));
assign tmp_15_fu_282_p1 = b_q1[7:0];
assign tmp_18_fu_355_p1 = b_q0[7:0];
assign tmp_19_fu_320_p1 = a_q1[7:0];
assign tmp_1_fu_252_p1 = a_q0[7:0];
assign tmp_20_fu_383_p1 = a_q0[7:0];
assign tmp_3_fu_256_p1 = $signed(tmp_1_fu_252_p1);
assign tmp_4_fu_260_p1 = b_q0[7:0];
assign tmp_5_0_0_1_fu_344_p1 = $signed(reg_244);
assign tmp_5_0_0_2_fu_268_p1 = $signed(grp_fu_224_p4);
assign tmp_5_1_0_1_fu_391_p1 = $signed(tmp_13_reg_629);
assign tmp_5_1_0_2_fu_375_p1 = $signed(tmp_14_reg_634);
assign tmp_5_1_fu_372_p1 = $signed(tmp_19_reg_624);
assign tmp_5_2_0_1_fu_418_p1 = $signed(reg_244);
assign tmp_5_2_0_2_fu_405_p1 = $signed(tmp_17_reg_700);
assign tmp_5_2_fu_402_p1 = $signed(tmp_20_reg_695);
assign tmp_5_fu_300_p4 = {{b_q1[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp_6_0_0_1_fu_348_p1 = $signed(reg_248);
assign tmp_6_0_0_2_fu_272_p1 = $signed(grp_fu_234_p4);
assign tmp_6_0_1_1_fu_352_p1 = $signed(tmp_2_reg_603);
assign tmp_6_0_1_2_fu_310_p1 = $signed(tmp_5_fu_300_p4);
assign tmp_6_0_1_fu_286_p1 = $signed(tmp_15_fu_282_p1);
assign tmp_6_0_2_1_fu_387_p1 = $signed(reg_248);
assign tmp_6_0_2_2_fu_363_p1 = $signed(grp_fu_234_p4);
assign tmp_6_0_2_fu_359_p1 = $signed(tmp_18_fu_355_p1);
assign tmp_7_0_0_2_fu_276_p0 = grp_fu_234_p4;
assign tmp_7_0_0_2_fu_276_p1 = tmp_5_0_0_2_fu_268_p1;
assign tmp_7_0_1_2_fu_314_p0 = tmp_5_fu_300_p4;
assign tmp_7_0_1_2_fu_314_p1 = tmp_5_0_0_2_fu_268_p1;
assign tmp_7_0_2_2_fu_367_p0 = grp_fu_234_p4;
assign tmp_7_0_2_2_fu_367_p1 = tmp_5_0_0_2_reg_581;
assign tmp_7_1_0_2_fu_378_p0 = tmp_6_0_0_2_reg_586;
assign tmp_7_1_0_2_fu_378_p1 = tmp_14_reg_634;
assign tmp_7_1_1_2_fu_394_p0 = tmp_6_0_1_2_reg_608;
assign tmp_7_1_1_2_fu_394_p1 = tmp_5_1_0_2_reg_684;
assign tmp_7_1_2_2_fu_398_p0 = tmp_6_0_2_2_reg_667;
assign tmp_7_1_2_2_fu_398_p1 = tmp_5_1_0_2_reg_684;
assign tmp_7_2_0_2_fu_408_p0 = tmp_6_0_0_2_reg_586;
assign tmp_7_2_0_2_fu_408_p1 = tmp_5_2_0_2_fu_405_p1;
assign tmp_7_2_1_2_fu_413_p0 = tmp_6_0_1_2_reg_608;
assign tmp_7_2_1_2_fu_413_p1 = tmp_5_2_0_2_fu_405_p1;
assign tmp_7_2_2_2_fu_422_p0 = tmp_6_0_2_2_reg_667;
assign tmp_7_2_2_2_fu_422_p1 = tmp_5_2_0_2_reg_732;
assign tmp_8_fu_264_p1 = $signed(tmp_4_fu_260_p1);


endmodule //matrixmul

