-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=11.130000,HLS_SYN_LAT=6,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=503,HLS_SYN_LUT=47}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal reg_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_264_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_575 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_2_fu_268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_2_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_2_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_2_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_542_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_fu_286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_0_1_2_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_2_reg_608 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_614 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_629 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_0_0_1_fu_344_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_1_reg_644 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_1_fu_348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_1_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_1_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_1_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_fu_359_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_2_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_2_reg_667 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_506_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_2_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_2_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_426_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_0_2_1_fu_387_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_1_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal tmp_5_1_0_1_fu_391_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_1_reg_711 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_717 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_493_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_722 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_fu_402_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_reg_727 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_2_fu_405_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_2_reg_732 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_453_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_499_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_1_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_1_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_441_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_752 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal grp_fu_433_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_466_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_487_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_447_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_480_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_460_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_234_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_2_fu_276_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_2_fu_276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_2_fu_314_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_2_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_2_fu_367_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_2_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_2_fu_378_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_2_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_2_fu_394_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_2_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_2_fu_398_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_2_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_2_fu_408_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_2_fu_408_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_2_fu_413_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_2_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_2_fu_422_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_2_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_441_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_447_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_453_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_460_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_473_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_480_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_493_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_493_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_499_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_499_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_506_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_513_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_513_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_520_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_534_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_534_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component matrixmul_mac_muladd_8s_8s_16s_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_muladd_8s_8s_16s_16_1_U0 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        din2 => grp_fu_426_p2,
        dout => grp_fu_426_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U1 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_433_p0,
        din1 => grp_fu_433_p1,
        din2 => grp_fu_433_p2,
        dout => grp_fu_433_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U2 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_441_p0,
        din1 => grp_fu_441_p1,
        din2 => grp_fu_441_p2,
        dout => grp_fu_441_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U3 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_447_p0,
        din1 => grp_fu_447_p1,
        din2 => grp_fu_447_p2,
        dout => grp_fu_447_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U4 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_453_p0,
        din1 => grp_fu_453_p1,
        din2 => grp_fu_453_p2,
        dout => grp_fu_453_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U5 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_460_p0,
        din1 => grp_fu_460_p1,
        din2 => grp_fu_460_p2,
        dout => grp_fu_460_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U6 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        din2 => grp_fu_466_p2,
        dout => grp_fu_466_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U7 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_473_p0,
        din1 => grp_fu_473_p1,
        din2 => grp_fu_473_p2,
        dout => grp_fu_473_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U8 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_480_p0,
        din1 => grp_fu_480_p1,
        din2 => grp_fu_480_p2,
        dout => grp_fu_480_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U9 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_487_p0,
        din1 => grp_fu_487_p1,
        din2 => grp_fu_487_p2,
        dout => grp_fu_487_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U10 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_493_p0,
        din1 => grp_fu_493_p1,
        din2 => grp_fu_493_p2,
        dout => grp_fu_493_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U11 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_499_p0,
        din1 => grp_fu_499_p1,
        din2 => grp_fu_499_p2,
        dout => grp_fu_499_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U12 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_506_p0,
        din1 => grp_fu_506_p1,
        din2 => grp_fu_506_p2,
        dout => grp_fu_506_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U13 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_513_p0,
        din1 => grp_fu_513_p1,
        din2 => grp_fu_513_p2,
        dout => grp_fu_513_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U14 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_520_p0,
        din1 => grp_fu_520_p1,
        din2 => grp_fu_520_p2,
        dout => grp_fu_520_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U15 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_526_p0,
        din1 => grp_fu_526_p1,
        din2 => grp_fu_526_p2,
        dout => grp_fu_526_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U16 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_534_p0,
        din1 => grp_fu_534_p1,
        din2 => grp_fu_534_p2,
        dout => grp_fu_534_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U17 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        din2 => grp_fu_542_p2,
        dout => grp_fu_542_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                reg_244 <= a_q0(15 downto 8);
                reg_248 <= b_q0(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then
                tmp1_reg_614 <= grp_fu_534_p3;
                tmp_13_reg_629 <= a_q1(15 downto 8);
                tmp_14_reg_634 <= a_q1(23 downto 16);
                tmp_19_reg_624 <= tmp_19_fu_320_p1;
                tmp_2_reg_603 <= b_q1(15 downto 8);
                tmp_3_reg_570 <= tmp_3_fu_256_p1;
                tmp_5_0_0_2_reg_581 <= tmp_5_0_0_2_fu_268_p1;
                tmp_6_0_0_2_reg_586 <= tmp_6_0_0_2_fu_272_p1;
                tmp_6_0_1_2_reg_608 <= tmp_6_0_1_2_fu_310_p1;
                tmp_6_0_1_reg_597 <= tmp_6_0_1_fu_286_p1;
                tmp_8_reg_575 <= tmp_8_fu_264_p1;
                tmp_reg_592 <= grp_fu_542_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then
                tmp2_reg_673 <= grp_fu_506_p3;
                tmp3_reg_690 <= grp_fu_426_p3;
                tmp_17_reg_700 <= a_q0(23 downto 16);
                tmp_20_reg_695 <= tmp_20_fu_383_p1;
                tmp_5_0_0_1_reg_644 <= tmp_5_0_0_1_fu_344_p1;
                tmp_5_1_0_2_reg_684 <= tmp_5_1_0_2_fu_375_p1;
                tmp_5_1_reg_678 <= tmp_5_1_fu_372_p1;
                tmp_6_0_0_1_reg_649 <= tmp_6_0_0_1_fu_348_p1;
                tmp_6_0_1_1_reg_655 <= tmp_6_0_1_1_fu_352_p1;
                tmp_6_0_2_2_reg_667 <= tmp_6_0_2_2_fu_363_p1;
                tmp_6_0_2_reg_661 <= tmp_6_0_2_fu_359_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then
                tmp4_reg_717 <= grp_fu_520_p3;
                tmp5_reg_722 <= grp_fu_493_p3;
                tmp_5_1_0_1_reg_711 <= tmp_5_1_0_1_fu_391_p1;
                tmp_6_0_2_1_reg_705 <= tmp_6_0_2_1_fu_387_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then
                tmp6_reg_737 <= grp_fu_453_p3;
                tmp7_reg_742 <= grp_fu_499_p3;
                tmp_5_2_0_2_reg_732 <= tmp_5_2_0_2_fu_405_p1;
                tmp_5_2_reg_727 <= tmp_5_2_fu_402_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp8_reg_752 <= grp_fu_441_p3;
                tmp_5_2_0_1_reg_747 <= tmp_5_2_0_1_fu_418_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
            when ap_ST_pp0_stg4_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- a_address0 assign process. --
    a_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                a_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                a_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                a_address0 <= "XX";
            end if;
        else 
            a_address0 <= "XX";
        end if; 
    end process;

    a_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_ce1 assign process. --
    a_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_address0 assign process. --
    b_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                b_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                b_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_address0 <= "XX";
            end if;
        else 
            b_address0 <= "XX";
        end if; 
    end process;

    b_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_ce1 assign process. --
    b_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_224_p4 <= a_q0(23 downto 16);
    grp_fu_234_p4 <= b_q0(23 downto 16);
    grp_fu_426_p0 <= tmp_8_reg_575(8 - 1 downto 0);
    grp_fu_426_p1 <= tmp_19_reg_624;
    grp_fu_426_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_0_2_fu_378_p0) * signed(tmp_7_1_0_2_fu_378_p1))), 16));
    grp_fu_433_p0 <= tmp_2_reg_603;
    grp_fu_433_p1 <= tmp_5_0_0_1_fu_344_p1(8 - 1 downto 0);
    grp_fu_433_p2 <= tmp1_reg_614;
    grp_fu_441_p0 <= tmp_6_0_2_reg_661(8 - 1 downto 0);
    grp_fu_441_p1 <= tmp_5_2_reg_727(8 - 1 downto 0);
    grp_fu_441_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_2_2_fu_422_p0) * signed(tmp_7_2_2_2_fu_422_p1))), 16));
    grp_fu_447_p0 <= tmp_6_0_2_1_reg_705(8 - 1 downto 0);
    grp_fu_447_p1 <= tmp_5_2_0_1_reg_747(8 - 1 downto 0);
    grp_fu_447_p2 <= tmp8_reg_752;
    grp_fu_453_p0 <= tmp_8_reg_575(8 - 1 downto 0);
    grp_fu_453_p1 <= tmp_5_2_fu_402_p1(8 - 1 downto 0);
    grp_fu_453_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_0_2_fu_408_p0) * signed(tmp_7_2_0_2_fu_408_p1))), 16));
    grp_fu_460_p0 <= tmp_6_0_1_1_reg_655(8 - 1 downto 0);
    grp_fu_460_p1 <= tmp_5_1_0_1_reg_711(8 - 1 downto 0);
    grp_fu_460_p2 <= tmp4_reg_717;
    grp_fu_466_p0 <= tmp_6_0_0_1_reg_649(8 - 1 downto 0);
    grp_fu_466_p1 <= tmp_13_reg_629;
    grp_fu_466_p2 <= tmp3_reg_690;
    grp_fu_473_p0 <= tmp_6_0_1_1_reg_655(8 - 1 downto 0);
    grp_fu_473_p1 <= tmp_5_2_0_1_fu_418_p1(8 - 1 downto 0);
    grp_fu_473_p2 <= tmp7_reg_742;
    grp_fu_480_p0 <= reg_248;
    grp_fu_480_p1 <= tmp_5_0_0_1_reg_644(8 - 1 downto 0);
    grp_fu_480_p2 <= tmp2_reg_673;
    grp_fu_487_p0 <= tmp_6_0_2_1_reg_705(8 - 1 downto 0);
    grp_fu_487_p1 <= tmp_5_1_0_1_reg_711(8 - 1 downto 0);
    grp_fu_487_p2 <= tmp5_reg_722;
    grp_fu_493_p0 <= tmp_6_0_2_reg_661(8 - 1 downto 0);
    grp_fu_493_p1 <= tmp_5_1_reg_678(8 - 1 downto 0);
    grp_fu_493_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_2_2_fu_398_p0) * signed(tmp_7_1_2_2_fu_398_p1))), 16));
    grp_fu_499_p0 <= tmp_6_0_1_reg_597(8 - 1 downto 0);
    grp_fu_499_p1 <= tmp_5_2_fu_402_p1(8 - 1 downto 0);
    grp_fu_499_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_1_2_fu_413_p0) * signed(tmp_7_2_1_2_fu_413_p1))), 16));
    grp_fu_506_p0 <= tmp_18_fu_355_p1;
    grp_fu_506_p1 <= tmp_3_reg_570(8 - 1 downto 0);
    grp_fu_506_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_2_2_fu_367_p0) * signed(tmp_7_0_2_2_fu_367_p1))), 16));
    grp_fu_513_p0 <= tmp_6_0_0_1_reg_649(8 - 1 downto 0);
    grp_fu_513_p1 <= tmp_5_2_0_1_fu_418_p1(8 - 1 downto 0);
    grp_fu_513_p2 <= tmp6_reg_737;
    grp_fu_520_p0 <= tmp_6_0_1_reg_597(8 - 1 downto 0);
    grp_fu_520_p1 <= tmp_5_1_reg_678(8 - 1 downto 0);
    grp_fu_520_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_1_2_fu_394_p0) * signed(tmp_7_1_1_2_fu_394_p1))), 16));
    grp_fu_526_p0 <= reg_248;
    grp_fu_526_p1 <= tmp_5_0_0_1_fu_344_p1(8 - 1 downto 0);
    grp_fu_526_p2 <= tmp_reg_592;
    grp_fu_534_p0 <= tmp_15_fu_282_p1;
    grp_fu_534_p1 <= tmp_3_fu_256_p1(8 - 1 downto 0);
    grp_fu_534_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_1_2_fu_314_p0) * signed(tmp_7_0_1_2_fu_314_p1))), 16));
    grp_fu_542_p0 <= tmp_4_fu_260_p1;
    grp_fu_542_p1 <= tmp_3_fu_256_p1(8 - 1 downto 0);
    grp_fu_542_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_0_2_fu_276_p0) * signed(tmp_7_0_0_2_fu_276_p1))), 16));

    -- res_address0 assign process. --
    res_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    -- res_address1 assign process. --
    res_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            res_address1 <= "XXXX";
        end if; 
    end process;


    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_ce1 assign process. --
    res_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_d0 assign process. --
    res_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, grp_fu_433_p3, grp_fu_466_p3, grp_fu_487_p3, grp_fu_513_p3, grp_fu_447_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_d0 <= grp_fu_447_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_d0 <= grp_fu_513_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_d0 <= grp_fu_487_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_d0 <= grp_fu_466_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_d0 <= grp_fu_433_p3;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- res_d1 assign process. --
    res_d1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, grp_fu_526_p3, grp_fu_480_p3, grp_fu_460_p3, grp_fu_473_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_d1 <= grp_fu_473_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_d1 <= grp_fu_460_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_d1 <= grp_fu_480_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_d1 <= grp_fu_526_p3;
        else 
            res_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- res_we0 assign process. --
    res_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_we1 assign process. --
    res_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_15_fu_282_p1 <= b_q1(8 - 1 downto 0);
    tmp_18_fu_355_p1 <= b_q0(8 - 1 downto 0);
    tmp_19_fu_320_p1 <= a_q1(8 - 1 downto 0);
    tmp_1_fu_252_p1 <= a_q0(8 - 1 downto 0);
    tmp_20_fu_383_p1 <= a_q0(8 - 1 downto 0);
        tmp_3_fu_256_p1 <= std_logic_vector(resize(signed(tmp_1_fu_252_p1),16));

    tmp_4_fu_260_p1 <= b_q0(8 - 1 downto 0);
        tmp_5_0_0_1_fu_344_p1 <= std_logic_vector(resize(signed(reg_244),16));

        tmp_5_0_0_2_fu_268_p1 <= std_logic_vector(resize(signed(grp_fu_224_p4),16));

        tmp_5_1_0_1_fu_391_p1 <= std_logic_vector(resize(signed(tmp_13_reg_629),16));

        tmp_5_1_0_2_fu_375_p1 <= std_logic_vector(resize(signed(tmp_14_reg_634),16));

        tmp_5_1_fu_372_p1 <= std_logic_vector(resize(signed(tmp_19_reg_624),16));

        tmp_5_2_0_1_fu_418_p1 <= std_logic_vector(resize(signed(reg_244),16));

        tmp_5_2_0_2_fu_405_p1 <= std_logic_vector(resize(signed(tmp_17_reg_700),16));

        tmp_5_2_fu_402_p1 <= std_logic_vector(resize(signed(tmp_20_reg_695),16));

    tmp_5_fu_300_p4 <= b_q1(23 downto 16);
        tmp_6_0_0_1_fu_348_p1 <= std_logic_vector(resize(signed(reg_248),16));

        tmp_6_0_0_2_fu_272_p1 <= std_logic_vector(resize(signed(grp_fu_234_p4),16));

        tmp_6_0_1_1_fu_352_p1 <= std_logic_vector(resize(signed(tmp_2_reg_603),16));

        tmp_6_0_1_2_fu_310_p1 <= std_logic_vector(resize(signed(tmp_5_fu_300_p4),16));

        tmp_6_0_1_fu_286_p1 <= std_logic_vector(resize(signed(tmp_15_fu_282_p1),16));

        tmp_6_0_2_1_fu_387_p1 <= std_logic_vector(resize(signed(reg_248),16));

        tmp_6_0_2_2_fu_363_p1 <= std_logic_vector(resize(signed(grp_fu_234_p4),16));

        tmp_6_0_2_fu_359_p1 <= std_logic_vector(resize(signed(tmp_18_fu_355_p1),16));

    tmp_7_0_0_2_fu_276_p0 <= grp_fu_234_p4;
    tmp_7_0_0_2_fu_276_p1 <= tmp_5_0_0_2_fu_268_p1(8 - 1 downto 0);
    tmp_7_0_1_2_fu_314_p0 <= tmp_5_fu_300_p4;
    tmp_7_0_1_2_fu_314_p1 <= tmp_5_0_0_2_fu_268_p1(8 - 1 downto 0);
    tmp_7_0_2_2_fu_367_p0 <= grp_fu_234_p4;
    tmp_7_0_2_2_fu_367_p1 <= tmp_5_0_0_2_reg_581(8 - 1 downto 0);
    tmp_7_1_0_2_fu_378_p0 <= tmp_6_0_0_2_reg_586(8 - 1 downto 0);
    tmp_7_1_0_2_fu_378_p1 <= tmp_14_reg_634;
    tmp_7_1_1_2_fu_394_p0 <= tmp_6_0_1_2_reg_608(8 - 1 downto 0);
    tmp_7_1_1_2_fu_394_p1 <= tmp_5_1_0_2_reg_684(8 - 1 downto 0);
    tmp_7_1_2_2_fu_398_p0 <= tmp_6_0_2_2_reg_667(8 - 1 downto 0);
    tmp_7_1_2_2_fu_398_p1 <= tmp_5_1_0_2_reg_684(8 - 1 downto 0);
    tmp_7_2_0_2_fu_408_p0 <= tmp_6_0_0_2_reg_586(8 - 1 downto 0);
    tmp_7_2_0_2_fu_408_p1 <= tmp_5_2_0_2_fu_405_p1(8 - 1 downto 0);
    tmp_7_2_1_2_fu_413_p0 <= tmp_6_0_1_2_reg_608(8 - 1 downto 0);
    tmp_7_2_1_2_fu_413_p1 <= tmp_5_2_0_2_fu_405_p1(8 - 1 downto 0);
    tmp_7_2_2_2_fu_422_p0 <= tmp_6_0_2_2_reg_667(8 - 1 downto 0);
    tmp_7_2_2_2_fu_422_p1 <= tmp_5_2_0_2_reg_732(8 - 1 downto 0);
        tmp_8_fu_264_p1 <= std_logic_vector(resize(signed(tmp_4_fu_260_p1),16));

end behav;
