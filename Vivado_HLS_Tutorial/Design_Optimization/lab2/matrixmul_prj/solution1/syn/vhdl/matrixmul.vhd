-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    a_empty_n : IN STD_LOGIC;
    a_read : OUT STD_LOGIC;
    b_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    b_empty_n : IN STD_LOGIC;
    b_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.421000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=153,HLS_SYN_LUT=153}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st6_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_19 : BOOLEAN;
    signal indvar_flatten_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_144 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_155 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_51 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal tmp_3_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_67 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_77 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_172_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_184_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_678 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_j_mid2_reg_678_pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_fu_198_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_reg_686 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_695_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_218_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_row_0_1_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_0_1_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_507_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_reg_723 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_phi_fu_148_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_572_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_row_0_fu_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_1_1_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_2_1_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_3_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_7_fu_324_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_6_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_5_fu_317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_1_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_2_fu_302_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_3_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_7_fu_371_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_6_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_5_fu_364_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_1_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_2_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_3_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_7_fu_418_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_6_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_5_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_1_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_2_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_192_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_copy_0_2_9_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_0_2_4_fu_309_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_9_fu_331_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_fu_341_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_2_4_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_9_fu_378_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_fu_388_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_2_4_fu_403_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_507_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_507_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_522_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_522_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_522_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_1_fu_537_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_1_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_547_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_547_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_580_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_412 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component matrixmul_mux_3to1_sel2_8_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mux_3to1_sel2_8_1_U0 : component matrixmul_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => tmp_1_fu_507_p1,
        din2 => tmp_1_fu_507_p2,
        din3 => tmp_1_fu_507_p3,
        din4 => tmp_1_fu_507_p4,
        dout => tmp_1_fu_507_p5);

    matrixmul_mux_3to1_sel2_8_1_U1 : component matrixmul_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => tmp_7_fu_522_p1,
        din2 => tmp_7_fu_522_p2,
        din3 => tmp_7_fu_522_p3,
        din4 => tmp_7_fu_522_p4,
        dout => tmp_7_fu_522_p5);

    matrixmul_mux_3to1_sel2_8_1_U2 : component matrixmul_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => tmp_8_fu_547_p1,
        din2 => tmp_8_fu_547_p2,
        din3 => tmp_8_fu_547_p3,
        din4 => tmp_8_fu_547_p4,
        dout => tmp_8_fu_547_p5);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U3 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_572_p0,
        din1 => grp_fu_572_p1,
        din2 => grp_fu_572_p2,
        dout => grp_fu_572_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U4 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_580_p0,
        din1 => grp_fu_580_p1,
        din2 => grp_fu_580_p2,
        dout => grp_fu_580_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_166_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_166_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_144 assign process. --
    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_reg_669 = ap_const_lv1_0))) then 
                i_reg_144 <= i_mid2_reg_686;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_144 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_133 assign process. --
    indvar_flatten_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_133 <= indvar_flatten_next_fu_172_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_155 assign process. --
    j_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then 
                j_reg_155 <= j_1_fu_218_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_155 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((tmp_3_reg_695 = ap_const_lv1_0)) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                a_row_0_1_reg_713 <= a_row_0_1_fu_224_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_695_pp0_it1)))) then
                a_row_0_fu_66 <= a_row_0_1_reg_713;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((tmp_3_reg_695 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                a_row_1_1_fu_70 <= a_dout(15 downto 8);
                a_row_2_1_fu_74 <= a_dout(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it1 <= exitcond_flatten_reg_669;
                ap_reg_ppstg_j_mid2_reg_678_pp0_it1 <= j_mid2_reg_678;
                ap_reg_ppstg_tmp_3_reg_695_pp0_it1 <= tmp_3_reg_695;
                exitcond_flatten_reg_669 <= exitcond_flatten_fu_166_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then
                ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = tmp_reg_691)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                b_copy_0_2_1_fu_86 <= b_copy_0_2_2_fu_302_p3;
                b_copy_0_2_3_fu_78 <= b_copy_0_2_7_fu_324_p3;
                b_copy_0_2_6_fu_82 <= b_copy_0_2_5_fu_317_p3;
                b_copy_1_2_1_fu_98 <= b_copy_1_2_2_fu_349_p3;
                b_copy_1_2_3_fu_90 <= b_copy_1_2_7_fu_371_p3;
                b_copy_1_2_6_fu_94 <= b_copy_1_2_5_fu_364_p3;
                b_copy_2_2_1_fu_110 <= b_copy_2_2_2_fu_396_p3;
                b_copy_2_2_3_fu_102 <= b_copy_2_2_7_fu_418_p3;
                b_copy_2_2_6_fu_106 <= b_copy_2_2_5_fu_411_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then
                i_mid2_reg_686 <= i_mid2_fu_198_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then
                j_mid2_reg_678 <= j_mid2_fu_184_p3;
                tmp_3_reg_695 <= tmp_3_fu_212_p2;
                tmp_reg_691 <= tmp_fu_206_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it1))) then
                tmp9_reg_723 <= grp_fu_580_p3;
                tmp_1_reg_718 <= tmp_1_fu_507_p5;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_166_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_67, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_77, ap_reg_ppiten_pp0_it3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_166_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_166_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st6_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- a_read assign process. --
    a_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_3_reg_695, ap_sig_bdd_67, ap_reg_ppiten_pp0_it1, ap_sig_bdd_77, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((tmp_3_reg_695 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            a_read <= ap_const_logic_1;
        else 
            a_read <= ap_const_logic_0;
        end if; 
    end process;

    a_row_0_1_fu_224_p1 <= a_dout(8 - 1 downto 0);

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st6_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_19 assign process. --
    ap_sig_bdd_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_412 assign process. --
    ap_sig_bdd_412_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_412 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_51 assign process. --
    ap_sig_bdd_51_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_51 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(a_empty_n, b_empty_n, tmp_3_reg_695, tmp_reg_691)
    begin
                ap_sig_bdd_67 <= (((a_empty_n = ap_const_logic_0) and not((tmp_3_reg_695 = ap_const_lv1_0))) or ((b_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_691))));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(res_full_n, ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it2)
    begin
                ap_sig_bdd_77 <= ((res_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_51)
    begin
        if (ap_sig_bdd_51) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_19)
    begin
        if (ap_sig_bdd_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_2 assign process. --
    ap_sig_cseq_ST_st6_fsm_2_assign_proc : process(ap_sig_bdd_412)
    begin
        if (ap_sig_bdd_412) then 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_2_2_fu_302_p3 <= 
        b_copy_0_2_1_fu_86 when (tmp_3_reg_695(0) = '1') else 
        b_copy_0_2_fu_294_p3;
    b_copy_0_2_4_fu_309_p3 <= 
        b_copy_0_2_9_fu_285_p1 when (sel_tmp_fu_289_p2(0) = '1') else 
        b_copy_0_2_6_fu_82;
    b_copy_0_2_5_fu_317_p3 <= 
        b_copy_0_2_6_fu_82 when (tmp_3_reg_695(0) = '1') else 
        b_copy_0_2_4_fu_309_p3;
    b_copy_0_2_7_fu_324_p3 <= 
        b_copy_0_2_9_fu_285_p1 when (tmp_3_reg_695(0) = '1') else 
        b_copy_0_2_3_fu_78;
    b_copy_0_2_9_fu_285_p1 <= b_dout(8 - 1 downto 0);
    b_copy_0_2_fu_294_p3 <= 
        b_copy_0_2_1_fu_86 when (sel_tmp_fu_289_p2(0) = '1') else 
        b_copy_0_2_9_fu_285_p1;
    b_copy_1_2_2_fu_349_p3 <= 
        b_copy_1_2_1_fu_98 when (tmp_3_reg_695(0) = '1') else 
        b_copy_1_2_fu_341_p3;
    b_copy_1_2_4_fu_356_p3 <= 
        b_copy_1_2_9_fu_331_p4 when (sel_tmp_fu_289_p2(0) = '1') else 
        b_copy_1_2_6_fu_94;
    b_copy_1_2_5_fu_364_p3 <= 
        b_copy_1_2_6_fu_94 when (tmp_3_reg_695(0) = '1') else 
        b_copy_1_2_4_fu_356_p3;
    b_copy_1_2_7_fu_371_p3 <= 
        b_copy_1_2_9_fu_331_p4 when (tmp_3_reg_695(0) = '1') else 
        b_copy_1_2_3_fu_90;
    b_copy_1_2_9_fu_331_p4 <= b_dout(15 downto 8);
    b_copy_1_2_fu_341_p3 <= 
        b_copy_1_2_1_fu_98 when (sel_tmp_fu_289_p2(0) = '1') else 
        b_copy_1_2_9_fu_331_p4;
    b_copy_2_2_2_fu_396_p3 <= 
        b_copy_2_2_1_fu_110 when (tmp_3_reg_695(0) = '1') else 
        b_copy_2_2_fu_388_p3;
    b_copy_2_2_4_fu_403_p3 <= 
        b_copy_2_2_9_fu_378_p4 when (sel_tmp_fu_289_p2(0) = '1') else 
        b_copy_2_2_6_fu_106;
    b_copy_2_2_5_fu_411_p3 <= 
        b_copy_2_2_6_fu_106 when (tmp_3_reg_695(0) = '1') else 
        b_copy_2_2_4_fu_403_p3;
    b_copy_2_2_7_fu_418_p3 <= 
        b_copy_2_2_9_fu_378_p4 when (tmp_3_reg_695(0) = '1') else 
        b_copy_2_2_3_fu_102;
    b_copy_2_2_9_fu_378_p4 <= b_dout(23 downto 16);
    b_copy_2_2_fu_388_p3 <= 
        b_copy_2_2_1_fu_110 when (sel_tmp_fu_289_p2(0) = '1') else 
        b_copy_2_2_9_fu_378_p4;

    -- b_read assign process. --
    b_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_reg_691, ap_sig_bdd_67, ap_reg_ppiten_pp0_it1, ap_sig_bdd_77, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = tmp_reg_691)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            b_read <= ap_const_logic_1;
        else 
            b_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_166_p2 <= "1" when (indvar_flatten_reg_133 = ap_const_lv4_9) else "0";
    exitcond_fu_178_p2 <= "1" when (j_reg_155 = ap_const_lv2_3) else "0";
    grp_fu_572_p0 <= a_row_0_fu_66;
    grp_fu_572_p1 <= tmp_1_reg_718;
    grp_fu_572_p2 <= tmp9_reg_723;
    grp_fu_580_p0 <= a_row_2_1_fu_74;
    grp_fu_580_p1 <= tmp_8_fu_547_p5;
    grp_fu_580_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_10_1_fu_537_p0) * signed(tmp_10_1_fu_537_p1))), 16));
    i_mid2_fu_198_p3 <= 
        i_s_fu_192_p2 when (exitcond_fu_178_p2(0) = '1') else 
        i_phi_fu_148_p4;

    -- i_phi_fu_148_p4 assign process. --
    i_phi_fu_148_p4_assign_proc : process(i_reg_144, exitcond_flatten_reg_669, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_686)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_669 = ap_const_lv1_0))) then 
            i_phi_fu_148_p4 <= i_mid2_reg_686;
        else 
            i_phi_fu_148_p4 <= i_reg_144;
        end if; 
    end process;

    i_s_fu_192_p2 <= std_logic_vector(unsigned(i_phi_fu_148_p4) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_172_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_133) + unsigned(ap_const_lv4_1));
    j_1_fu_218_p2 <= std_logic_vector(unsigned(j_mid2_fu_184_p3) + unsigned(ap_const_lv2_1));
    j_mid2_fu_184_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_178_p2(0) = '1') else 
        j_reg_155;
    res_din <= grp_fu_572_p3;

    -- res_write assign process. --
    res_write_assign_proc : process(ap_sig_bdd_67, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it2, ap_sig_bdd_77, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_669_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            res_write <= ap_const_logic_1;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp_fu_289_p2 <= "1" when (j_mid2_reg_678 = ap_const_lv2_1) else "0";
    tmp_10_1_fu_537_p0 <= a_row_1_1_fu_70;
    tmp_10_1_fu_537_p1 <= tmp_7_fu_522_p5;
    tmp_1_fu_507_p1 <= b_copy_0_2_3_fu_78;
    tmp_1_fu_507_p2 <= b_copy_0_2_6_fu_82;
    tmp_1_fu_507_p3 <= b_copy_0_2_1_fu_86;
    tmp_1_fu_507_p4 <= ap_reg_ppstg_j_mid2_reg_678_pp0_it1;
    tmp_3_fu_212_p2 <= "1" when (j_mid2_fu_184_p3 = ap_const_lv2_0) else "0";
    tmp_7_fu_522_p1 <= b_copy_1_2_3_fu_90;
    tmp_7_fu_522_p2 <= b_copy_1_2_6_fu_94;
    tmp_7_fu_522_p3 <= b_copy_1_2_1_fu_98;
    tmp_7_fu_522_p4 <= ap_reg_ppstg_j_mid2_reg_678_pp0_it1;
    tmp_8_fu_547_p1 <= b_copy_2_2_3_fu_102;
    tmp_8_fu_547_p2 <= b_copy_2_2_6_fu_106;
    tmp_8_fu_547_p3 <= b_copy_2_2_1_fu_110;
    tmp_8_fu_547_p4 <= ap_reg_ppstg_j_mid2_reg_678_pp0_it1;
    tmp_fu_206_p2 <= "1" when (i_mid2_fu_198_p3 = ap_const_lv2_0) else "0";
end behav;
