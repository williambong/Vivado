// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="window_fn_top,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.490000,HLS_SYN_LAT=193,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=91,HLS_SYN_LUT=26}" *)

module window_fn_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outdata_V_address0,
        outdata_V_ce0,
        outdata_V_we0,
        outdata_V_d0,
        indata_V_address0,
        indata_V_ce0,
        indata_V_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] outdata_V_address0;
output   outdata_V_ce0;
output   outdata_V_we0;
output  [23:0] outdata_V_d0;
output  [4:0] indata_V_address0;
output   indata_V_ce0;
input  [7:0] indata_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outdata_V_ce0;
reg outdata_V_we0;
reg indata_V_ce0;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm = 7'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_23;
wire   [4:0] coeff_tab1_address0;
reg    coeff_tab1_ce0;
wire   [16:0] coeff_tab1_q0;
wire   [5:0] i_fu_81_p2;
reg   [5:0] i_reg_108;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_57;
wire   [63:0] tmp_i_fu_87_p1;
reg   [63:0] tmp_i_reg_113;
wire   [0:0] exitcond_i_fu_75_p2;
reg   [16:0] coeff_tab1_load_reg_128;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_75;
reg   [7:0] indata_V_load_reg_133;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_85;
wire  signed [23:0] grp_fu_99_p2;
reg  signed [23:0] p_Val2_i_reg_148;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_96;
reg   [5:0] i_i_reg_64;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_109;
wire   [16:0] grp_fu_99_p0;
wire  signed [7:0] grp_fu_99_p1;
wire    grp_fu_99_ce;
reg   [6:0] ap_NS_fsm;
wire   [23:0] grp_fu_99_p00;


window_fn_top_coeff_tab1 #(
    .DataWidth( 17 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
coeff_tab1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( coeff_tab1_address0 ),
    .ce0( coeff_tab1_ce0 ),
    .q0( coeff_tab1_q0 )
);

window_fn_top_mul_17ns_8s_24_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
window_fn_top_mul_17ns_8s_24_3_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_99_p0 ),
    .din1( grp_fu_99_p1 ),
    .ce( grp_fu_99_ce ),
    .dout( grp_fu_99_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_i_reg_64 <= i_reg_108;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_i_reg_64 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coeff_tab1_load_reg_128 <= coeff_tab1_q0;
        indata_V_load_reg_133 <= indata_V_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_reg_108 <= i_fu_81_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        p_Val2_i_reg_148 <= grp_fu_99_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_fu_75_p2 == ap_const_lv1_0))) begin
        tmp_i_reg_113[5 : 0] <= tmp_i_fu_87_p1[5 : 0];
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_fu_75_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i_fu_75_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_fu_75_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i_fu_75_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_23)
begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_57)
begin
    if (ap_sig_bdd_57) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_75)
begin
    if (ap_sig_bdd_75) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_85)
begin
    if (ap_sig_bdd_85) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// coeff_tab1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coeff_tab1_ce0 = ap_const_logic_1;
    end else begin
        coeff_tab1_ce0 = ap_const_logic_0;
    end
end

/// indata_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        indata_V_ce0 = ap_const_logic_1;
    end else begin
        indata_V_ce0 = ap_const_logic_0;
    end
end

/// outdata_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        outdata_V_ce0 = ap_const_logic_1;
    end else begin
        outdata_V_ce0 = ap_const_logic_0;
    end
end

/// outdata_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        outdata_V_we0 = ap_const_logic_1;
    end else begin
        outdata_V_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_i_fu_75_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_i_fu_75_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_23 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_23 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_57 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_57 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_75 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_75 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_85 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_85 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end
assign coeff_tab1_address0 = tmp_i_fu_87_p1;
assign exitcond_i_fu_75_p2 = (i_i_reg_64 == ap_const_lv6_20? 1'b1: 1'b0);
assign grp_fu_99_ce = ap_const_logic_1;
assign grp_fu_99_p0 = grp_fu_99_p00;
assign grp_fu_99_p00 = coeff_tab1_load_reg_128;
assign grp_fu_99_p1 = indata_V_load_reg_133;
assign i_fu_81_p2 = (i_i_reg_64 + ap_const_lv6_1);
assign indata_V_address0 = tmp_i_fu_87_p1;
assign outdata_V_address0 = tmp_i_reg_113;
assign outdata_V_d0 = p_Val2_i_reg_148;
assign tmp_i_fu_87_p1 = i_i_reg_64;
always @ (posedge ap_clk)
begin
    tmp_i_reg_113[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end



endmodule //window_fn_top

