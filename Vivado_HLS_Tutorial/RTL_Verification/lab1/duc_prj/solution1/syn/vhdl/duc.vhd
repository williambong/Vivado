-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity duc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_i : IN STD_LOGIC_VECTOR (17 downto 0);
    freq : IN STD_LOGIC_VECTOR (15 downto 0);
    dout_i : OUT STD_LOGIC_VECTOR (17 downto 0);
    dout_i_ap_vld : OUT STD_LOGIC;
    dout_q : OUT STD_LOGIC_VECTOR (17 downto 0);
    dout_q_ap_vld : OUT STD_LOGIC );
end;


architecture behav of duc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "duc,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.710000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.710000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=7,HLS_SYN_FF=1601,HLS_SYN_LUT=630}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_33 : BOOLEAN;
    signal i : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal in_r : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal shift_reg_p_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_p_ce0 : STD_LOGIC;
    signal shift_reg_p_we0 : STD_LOGIC;
    signal shift_reg_p_d0 : STD_LOGIC_VECTOR (37 downto 0);
    signal shift_reg_p_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_1 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal in_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal c_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_ce0 : STD_LOGIC;
    signal c_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ch_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal shift_reg_p_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_p_1_ce0 : STD_LOGIC;
    signal shift_reg_p_1_we0 : STD_LOGIC;
    signal shift_reg_p_1_d0 : STD_LOGIC_VECTOR (37 downto 0);
    signal shift_reg_p_1_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal cnt : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal i_load_reg_593 : STD_LOGIC_VECTOR (5 downto 0);
    signal inc_fu_285_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal inc_reg_603 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_load_reg_614 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal ch_load_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_127 : BOOLEAN;
    signal shift_reg_p_load_reg_646 : STD_LOGIC_VECTOR (37 downto 0);
    signal sel_tmp5_i_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_357_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_5_i_reg_666 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal grp_fu_574_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal acc_1_reg_671 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_152 : BOOLEAN;
    signal i_1_load_reg_677 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal inc_2_fu_429_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal inc_2_reg_687 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_load_reg_698 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal ch_1_load_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i9_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i9_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i1_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_190 : BOOLEAN;
    signal shift_reg_p_1_load_reg_730 : STD_LOGIC_VECTOR (37 downto 0);
    signal sel_tmp5_i1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i1_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_assign_fu_501_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal s_assign_reg_750 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal grp_fu_581_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_reg_755 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal imf1_o_reg_761 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_224 : BOOLEAN;
    signal grp_duc_imf2_fu_249_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal imf2_o_reg_766 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal grp_duc_imf2_fu_249_ap_done : STD_LOGIC;
    signal grp_duc_imf3_fu_204_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal imf3_o_reg_771 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_246 : BOOLEAN;
    signal grp_duc_imf3_fu_204_ap_done : STD_LOGIC;
    signal grp_duc_imf3_fu_204_ap_start : STD_LOGIC;
    signal grp_duc_imf3_fu_204_ap_idle : STD_LOGIC;
    signal grp_duc_imf3_fu_204_ap_ready : STD_LOGIC;
    signal grp_duc_imf3_fu_204_x : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_duc_mixer_fu_225_ap_start : STD_LOGIC;
    signal grp_duc_mixer_fu_225_ap_done : STD_LOGIC;
    signal grp_duc_mixer_fu_225_ap_idle : STD_LOGIC;
    signal grp_duc_mixer_fu_225_ap_ready : STD_LOGIC;
    signal grp_duc_mixer_fu_225_freq : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_duc_mixer_fu_225_Din : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_duc_mixer_fu_225_Dout_I : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_duc_mixer_fu_225_Dout_I_ap_vld : STD_LOGIC;
    signal grp_duc_mixer_fu_225_Dout_Q : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_duc_mixer_fu_225_Dout_Q_ap_vld : STD_LOGIC;
    signal grp_duc_imf2_fu_249_ap_start : STD_LOGIC;
    signal grp_duc_imf2_fu_249_ap_idle : STD_LOGIC;
    signal grp_duc_imf2_fu_249_ap_ready : STD_LOGIC;
    signal grp_duc_imf2_fu_249_x : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_duc_imf3_fu_204_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_duc_mixer_fu_225_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_340 : BOOLEAN;
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_347 : BOOLEAN;
    signal grp_duc_imf2_fu_249_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_2_i_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inc_1_fu_401_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_11_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inc_3_fu_562_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i1_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_300_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp4_i_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_364_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_444_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp4_i1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_508_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_574_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_574_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_598 : BOOLEAN;
    signal grp_fu_581_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_581_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_608 : BOOLEAN;
    signal grp_fu_574_ce : STD_LOGIC;
    signal grp_fu_581_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component duc_imf3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_mixer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        freq : IN STD_LOGIC_VECTOR (15 downto 0);
        Din : IN STD_LOGIC_VECTOR (17 downto 0);
        Dout_I : OUT STD_LOGIC_VECTOR (17 downto 0);
        Dout_I_ap_vld : OUT STD_LOGIC;
        Dout_Q : OUT STD_LOGIC_VECTOR (17 downto 0);
        Dout_Q_ap_vld : OUT STD_LOGIC );
    end component;


    component duc_imf2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_mac_muladd_18s_18s_38ns_38_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (37 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component duc_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_shift_reg_p IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component duc_c_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_shift_reg_p_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    c_U : component duc_c
    generic map (
        DataWidth => 18,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);

    shift_reg_p_U : component duc_shift_reg_p
    generic map (
        DataWidth => 38,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p_address0,
        ce0 => shift_reg_p_ce0,
        we0 => shift_reg_p_we0,
        d0 => shift_reg_p_d0,
        q0 => shift_reg_p_q0);

    c_1_U : component duc_c_1
    generic map (
        DataWidth => 18,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_1_address0,
        ce0 => c_1_ce0,
        q0 => c_1_q0);

    shift_reg_p_1_U : component duc_shift_reg_p_1
    generic map (
        DataWidth => 38,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p_1_address0,
        ce0 => shift_reg_p_1_ce0,
        we0 => shift_reg_p_1_we0,
        d0 => shift_reg_p_1_d0,
        q0 => shift_reg_p_1_q0);

    grp_duc_imf3_fu_204 : component duc_imf3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_duc_imf3_fu_204_ap_start,
        ap_done => grp_duc_imf3_fu_204_ap_done,
        ap_idle => grp_duc_imf3_fu_204_ap_idle,
        ap_ready => grp_duc_imf3_fu_204_ap_ready,
        x => grp_duc_imf3_fu_204_x,
        ap_return => grp_duc_imf3_fu_204_ap_return);

    grp_duc_mixer_fu_225 : component duc_mixer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_duc_mixer_fu_225_ap_start,
        ap_done => grp_duc_mixer_fu_225_ap_done,
        ap_idle => grp_duc_mixer_fu_225_ap_idle,
        ap_ready => grp_duc_mixer_fu_225_ap_ready,
        freq => grp_duc_mixer_fu_225_freq,
        Din => grp_duc_mixer_fu_225_Din,
        Dout_I => grp_duc_mixer_fu_225_Dout_I,
        Dout_I_ap_vld => grp_duc_mixer_fu_225_Dout_I_ap_vld,
        Dout_Q => grp_duc_mixer_fu_225_Dout_Q,
        Dout_Q_ap_vld => grp_duc_mixer_fu_225_Dout_Q_ap_vld);

    grp_duc_imf2_fu_249 : component duc_imf2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_duc_imf2_fu_249_ap_start,
        ap_done => grp_duc_imf2_fu_249_ap_done,
        ap_idle => grp_duc_imf2_fu_249_ap_idle,
        ap_ready => grp_duc_imf2_fu_249_ap_ready,
        x => grp_duc_imf2_fu_249_x,
        ap_return => grp_duc_imf2_fu_249_ap_return);

    duc_mac_muladd_18s_18s_38ns_38_4_U18 : component duc_mac_muladd_18s_18s_38ns_38_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 38,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_574_p0,
        din1 => grp_fu_574_p1,
        din2 => grp_fu_574_p2,
        ce => grp_fu_574_ce,
        dout => grp_fu_574_p3);

    duc_mac_muladd_18s_18s_38ns_38_4_U19 : component duc_mac_muladd_18s_18s_38ns_38_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 38,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_581_p0,
        din1 => grp_fu_581_p1,
        din2 => grp_fu_581_p2,
        ce => grp_fu_581_ce,
        dout => grp_fu_581_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_duc_imf2_fu_249_ap_start_ap_start_reg assign process. --
    grp_duc_imf2_fu_249_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_duc_imf2_fu_249_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                    grp_duc_imf2_fu_249_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_duc_imf2_fu_249_ap_ready)) then 
                    grp_duc_imf2_fu_249_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_duc_imf3_fu_204_ap_start_ap_start_reg assign process. --
    grp_duc_imf3_fu_204_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_duc_imf3_fu_204_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_logic_0 = grp_duc_imf2_fu_249_ap_done)))) then 
                    grp_duc_imf3_fu_204_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_duc_imf3_fu_204_ap_ready)) then 
                    grp_duc_imf3_fu_204_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_duc_mixer_fu_225_ap_start_ap_start_reg assign process. --
    grp_duc_mixer_fu_225_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_duc_mixer_fu_225_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                    grp_duc_mixer_fu_225_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_duc_mixer_fu_225_ap_ready)) then 
                    grp_duc_mixer_fu_225_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                acc_1_reg_671 <= grp_fu_574_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                c_1_load_reg_698 <= c_1_q0;
                ch_1_load_reg_703 <= ch_1;
                sel_tmp1_i9_reg_714 <= sel_tmp1_i9_fu_456_p2;
                sel_tmp2_i1_reg_720 <= sel_tmp2_i1_fu_461_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                c_load_reg_614 <= c_q0;
                ch_load_reg_619 <= ch;
                sel_tmp1_i_reg_630 <= sel_tmp1_i_fu_312_p2;
                sel_tmp2_i_reg_636 <= sel_tmp2_i_fu_317_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = sel_tmp1_i_reg_630)))) then
                ch <= tmp_i_11_fu_381_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = sel_tmp1_i9_reg_714)))) then
                ch_1 <= tmp_6_i_fu_529_p2;
                cnt <= tmp_7_i_fu_540_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                i <= inc_1_fu_401_p3;
                i_1_load_reg_677 <= i_1;
                inc_2_reg_687 <= inc_2_fu_429_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_1 <= inc_3_fu_562_p3;
                imf1_o_reg_761 <= sum_reg_755(34 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                i_load_reg_593 <= i;
                inc_reg_603 <= inc_fu_285_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_logic_0 = grp_duc_imf2_fu_249_ap_done)))) then
                imf2_o_reg_766 <= grp_duc_imf2_fu_249_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_logic_0 = grp_duc_imf3_fu_204_ap_done)))) then
                imf3_o_reg_771 <= grp_duc_imf3_fu_204_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_i1_fu_417_p2)))) then
                in_1 <= acc_1_reg_671(34 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_i_fu_273_p2)))) then
                in_r <= din_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = sel_tmp1_i_reg_630)) and not((ap_const_lv1_0 = ch_load_reg_619)))) then
                init <= ap_const_lv1_0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = sel_tmp1_i9_reg_714)) and not((ap_const_lv1_0 = ch_1_load_reg_703)))) then
                init_1 <= ap_const_lv1_0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                s_assign_reg_750 <= s_assign_fu_501_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                sel_tmp5_i1_reg_735 <= sel_tmp5_i1_fu_484_p2;
                shift_reg_p_1_load_reg_730 <= shift_reg_p_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                sel_tmp5_i_reg_651 <= sel_tmp5_i_fu_340_p2;
                shift_reg_p_load_reg_646 <= shift_reg_p_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                sum_reg_755 <= grp_fu_581_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_5_i_reg_666 <= tmp_5_i_fu_357_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_duc_imf2_fu_249_ap_done, grp_duc_imf3_fu_204_ap_done, grp_duc_mixer_fu_225_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_logic_0 = grp_duc_imf2_fu_249_ap_done))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_logic_0 = grp_duc_imf3_fu_204_ap_done))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_logic_0 = grp_duc_mixer_fu_225_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_duc_mixer_fu_225_ap_done, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_logic_0 = grp_duc_mixer_fu_225_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_duc_mixer_fu_225_ap_done, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_logic_0 = grp_duc_mixer_fu_225_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_127 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_152 assign process. --
    ap_sig_bdd_152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_152 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_190 assign process. --
    ap_sig_bdd_190_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_190 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_224 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_246 assign process. --
    ap_sig_bdd_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_246 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_33 assign process. --
    ap_sig_bdd_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_340 assign process. --
    ap_sig_bdd_340_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_340 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_347 assign process. --
    ap_sig_bdd_347_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_347 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_598 assign process. --
    ap_sig_bdd_598_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_598 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_608 assign process. --
    ap_sig_bdd_608_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_608 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_608)
    begin
        if (ap_sig_bdd_608) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_246)
    begin
        if (ap_sig_bdd_246) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_340)
    begin
        if (ap_sig_bdd_340) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_347)
    begin
        if (ap_sig_bdd_347) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_33)
    begin
        if (ap_sig_bdd_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_127)
    begin
        if (ap_sig_bdd_127) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_598)
    begin
        if (ap_sig_bdd_598) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_152)
    begin
        if (ap_sig_bdd_152) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_190)
    begin
        if (ap_sig_bdd_190) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_address0 <= tmp_i3_fu_435_p1(5 - 1 downto 0);

    -- c_1_ce0 assign process. --
    c_1_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            c_1_ce0 <= ap_const_logic_1;
        else 
            c_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= tmp_2_i_fu_291_p1(6 - 1 downto 0);

    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dout_i <= grp_duc_mixer_fu_225_Dout_I;
    dout_i_ap_vld <= grp_duc_mixer_fu_225_Dout_I_ap_vld;
    dout_q <= grp_duc_mixer_fu_225_Dout_Q;
    dout_q_ap_vld <= grp_duc_mixer_fu_225_Dout_Q_ap_vld;
    grp_duc_imf2_fu_249_ap_start <= grp_duc_imf2_fu_249_ap_start_ap_start_reg;
    grp_duc_imf2_fu_249_x <= imf1_o_reg_761;
    grp_duc_imf3_fu_204_ap_start <= grp_duc_imf3_fu_204_ap_start_ap_start_reg;
    grp_duc_imf3_fu_204_x <= imf2_o_reg_766;
    grp_duc_mixer_fu_225_Din <= imf3_o_reg_771;
    grp_duc_mixer_fu_225_ap_start <= grp_duc_mixer_fu_225_ap_start_ap_start_reg;
    grp_duc_mixer_fu_225_freq <= freq;
    grp_fu_574_ce <= ap_const_logic_1;
    grp_fu_574_p0 <= c_load_reg_614;
    grp_fu_574_p1 <= in_r;
    grp_fu_574_p2 <= tmp_5_i_reg_666;
    grp_fu_581_ce <= ap_const_logic_1;
    grp_fu_581_p0 <= c_1_load_reg_698;
    grp_fu_581_p1 <= in_1;
    grp_fu_581_p2 <= s_assign_reg_750;
    inc_1_fu_401_p3 <= 
        ap_const_lv6_0 when (sel_tmp1_i_reg_630(0) = '1') else 
        inc_reg_603;
    inc_2_fu_429_p2 <= std_logic_vector(unsigned(i_1) + unsigned(ap_const_lv5_1));
    inc_3_fu_562_p3 <= 
        ap_const_lv5_0 when (sel_tmp1_i9_reg_714(0) = '1') else 
        inc_2_reg_687;
    inc_fu_285_p2 <= std_logic_vector(unsigned(i) + unsigned(ap_const_lv6_1));
    s_assign_fu_501_p3 <= 
        ap_const_lv38_0 when (tmp_1_fu_497_p2(0) = '1') else 
        shift_reg_p_1_load_reg_730;
    sel_tmp1_i9_fu_456_p2 <= "1" when (i_1_load_reg_677 = ap_const_lv5_17) else "0";
    sel_tmp1_i_fu_312_p2 <= "1" when (i_load_reg_593 = ap_const_lv6_2F) else "0";
    sel_tmp2_i1_fu_461_p2 <= "1" when (i_1_load_reg_677 = ap_const_lv5_B) else "0";
    sel_tmp2_i_fu_317_p2 <= "1" when (i_load_reg_593 = ap_const_lv6_17) else "0";
    sel_tmp3_i1_fu_474_p2 <= (init_1 xor ap_const_lv1_1);
    sel_tmp3_i_fu_330_p2 <= (init xor ap_const_lv1_1);
    sel_tmp4_i1_fu_480_p2 <= (sel_tmp1_i9_reg_714 or sel_tmp2_i1_reg_720);
    sel_tmp4_i_fu_336_p2 <= (sel_tmp1_i_reg_630 or sel_tmp2_i_reg_636);
    sel_tmp5_i1_fu_484_p2 <= (sel_tmp4_i1_fu_480_p2 and sel_tmp3_i1_fu_474_p2);
    sel_tmp5_i_fu_340_p2 <= (sel_tmp4_i_fu_336_p2 and sel_tmp3_i_fu_330_p2);

    -- shift_reg_p_1_address0 assign process. --
    shift_reg_p_1_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st13_fsm_12, tmp_7_fu_451_p1, tmp_9_fu_514_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            shift_reg_p_1_address0 <= tmp_9_fu_514_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            shift_reg_p_1_address0 <= tmp_7_fu_451_p1(6 - 1 downto 0);
        else 
            shift_reg_p_1_address0 <= "XXXXXX";
        end if; 
    end process;


    -- shift_reg_p_1_ce0 assign process. --
    shift_reg_p_1_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            shift_reg_p_1_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shift_reg_p_1_d0 <= sum_reg_755;

    -- shift_reg_p_1_we0 assign process. --
    shift_reg_p_1_we0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            shift_reg_p_1_we0 <= ap_const_logic_1;
        else 
            shift_reg_p_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- shift_reg_p_address0 assign process. --
    shift_reg_p_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, tmp_3_fu_307_p1, tmp_5_fu_370_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            shift_reg_p_address0 <= tmp_5_fu_370_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            shift_reg_p_address0 <= tmp_3_fu_307_p1(7 - 1 downto 0);
        else 
            shift_reg_p_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- shift_reg_p_ce0 assign process. --
    shift_reg_p_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            shift_reg_p_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shift_reg_p_d0 <= acc_1_reg_671;

    -- shift_reg_p_we0 assign process. --
    shift_reg_p_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            shift_reg_p_we0 <= ap_const_logic_1;
        else 
            shift_reg_p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_497_p2 <= (sel_tmp5_i1_reg_735 or init_1);
    tmp_2_fu_300_p3 <= (inc_reg_603 & ch);
    tmp_2_i_fu_291_p1 <= std_logic_vector(resize(unsigned(i),64));
    tmp_3_fu_307_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_300_p3),64));
    tmp_4_fu_364_p3 <= (i_load_reg_593 & ch_load_reg_619);
    tmp_5_fu_370_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_364_p3),64));
    tmp_5_i_fu_357_p3 <= 
        ap_const_lv38_0 when (tmp_fu_353_p2(0) = '1') else 
        shift_reg_p_load_reg_646;
    tmp_6_fu_444_p3 <= (inc_2_reg_687 & ch_1);
    tmp_6_i_fu_529_p2 <= (ch_1_load_reg_703 xor cnt);
    tmp_7_fu_451_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_444_p3),64));
    tmp_7_i_fu_540_p2 <= (cnt xor ap_const_lv1_1);
    tmp_8_fu_508_p3 <= (i_1_load_reg_677 & ch_1_load_reg_703);
    tmp_9_fu_514_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_508_p3),64));
    tmp_fu_353_p2 <= (sel_tmp5_i_reg_651 or init);
    tmp_i1_fu_417_p2 <= "1" when (i_1 = ap_const_lv5_0) else "0";
    tmp_i3_fu_435_p1 <= std_logic_vector(resize(unsigned(i_1),64));
    tmp_i_11_fu_381_p2 <= (ch_load_reg_619 xor ap_const_lv1_1);
    tmp_i_fu_273_p2 <= "1" when (i = ap_const_lv6_0) else "0";
end behav;
