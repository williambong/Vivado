// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module duc_mixer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        freq,
        Din,
        Dout_I,
        Dout_I_ap_vld,
        Dout_Q,
        Dout_Q_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv5_8 = 5'b1000;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] freq;
input  [17:0] Din;
output  [17:0] Dout_I;
output   Dout_I_ap_vld;
output  [17:0] Dout_Q;
output   Dout_Q_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Dout_I_ap_vld;
reg Dout_Q_ap_vld;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
reg   [2:0] i_4 = 3'b000;
reg   [0:0] init_4 = 1'b1;
reg   [0:0] ch_3 = 1'b1;
reg   [3:0] index = 4'b0000;
reg   [3:0] DI_cache_address0;
reg    DI_cache_ce0;
reg    DI_cache_we0;
wire   [17:0] DI_cache_d0;
wire   [17:0] DI_cache_q0;
reg   [15:0] acc = 16'b0000000000000000;
wire   [4:0] dds_table_address0;
reg    dds_table_ce0;
wire   [15:0] dds_table_q0;
wire   [4:0] dds_table_address1;
reg    dds_table_ce1;
wire   [15:0] dds_table_q1;
reg   [2:0] i_4_load_reg_367;
wire   [2:0] inc_fu_142_p2;
reg   [2:0] inc_reg_372;
wire   [0:0] valid_in_fu_158_p2;
reg   [0:0] valid_in_reg_377;
reg   [0:0] ch_3_load_reg_381;
wire   [0:0] brmerge_demorgan_fu_180_p2;
reg   [0:0] brmerge_demorgan_reg_386;
reg   [3:0] index_load_reg_390;
reg   [4:0] phase1_reg_398;
wire   [4:0] phase2_fu_221_p2;
reg   [4:0] phase2_reg_404;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_100;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_109;
reg   [15:0] sine_reg_419;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_119;
reg   [15:0] cosine_reg_425;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_129;
reg   [17:0] Din_re_reg_441;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_139;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_148;
wire  signed [31:0] grp_fu_353_p3;
reg  signed [31:0] tmp_2_reg_456;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_159;
wire  signed [31:0] grp_fu_344_p4;
reg  signed [31:0] tmp_3_reg_462;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_168;
wire  signed [31:0] grp_fu_335_p4;
reg  signed [31:0] tmp_6_reg_467;
wire   [63:0] tmp_fu_216_p1;
wire   [63:0] tmp_i_fu_226_p1;
wire   [63:0] tmp_53_i_fu_230_p1;
wire   [63:0] tmp_s_fu_234_p1;
wire   [2:0] inc_5_fu_322_p3;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_185;
wire   [0:0] tmp_10_fu_279_p2;
wire   [0:0] tmp_12_fu_295_p2;
wire   [0:0] tmp_11_fu_290_p2;
wire   [3:0] tmp_13_fu_306_p2;
wire   [15:0] acc_assign_i_fu_194_p2;
wire   [1:0] tmp_15_fu_148_p4;
wire   [15:0] freq_dds_fu_168_p3;
wire   [0:0] tmp_14_fu_317_p2;
wire  signed [17:0] grp_fu_335_p0;
wire  signed [18:0] tmp_i6_fu_250_p1;
wire  signed [17:0] grp_fu_335_p1;
wire  signed [18:0] tmp_i5_fu_247_p1;
wire  signed [15:0] grp_fu_335_p2;
wire  signed [31:0] grp_fu_335_p3;
wire  signed [17:0] grp_fu_344_p0;
wire  signed [17:0] grp_fu_344_p1;
wire  signed [15:0] grp_fu_344_p2;
wire  signed [31:0] grp_fu_344_p3;
wire  signed [15:0] grp_fu_353_p0;
wire  signed [15:0] grp_fu_353_p1;
wire  signed [17:0] grp_fu_353_p2;
wire    grp_fu_335_ce;
wire    grp_fu_344_ce;
wire    grp_fu_353_ce;
reg   [9:0] ap_NS_fsm;


duc_mixer_DI_cache #(
    .DataWidth( 18 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
DI_cache_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( DI_cache_address0 ),
    .ce0( DI_cache_ce0 ),
    .we0( DI_cache_we0 ),
    .d0( DI_cache_d0 ),
    .q0( DI_cache_q0 )
);

duc_mixer_dds_table #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dds_table_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dds_table_address0 ),
    .ce0( dds_table_ce0 ),
    .q0( dds_table_q0 ),
    .address1( dds_table_address1 ),
    .ce1( dds_table_ce1 ),
    .q1( dds_table_q1 )
);

duc_ama_addmuladd_18s_18s_16s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
duc_ama_addmuladd_18s_18s_16s_32s_32_3_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_335_p0 ),
    .din1( grp_fu_335_p1 ),
    .din2( grp_fu_335_p2 ),
    .din3( grp_fu_335_p3 ),
    .ce( grp_fu_335_ce ),
    .dout( grp_fu_335_p4 )
);

duc_ama_submuladd_18s_18s_16s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
duc_ama_submuladd_18s_18s_16s_32s_32_3_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_344_p0 ),
    .din1( grp_fu_344_p1 ),
    .din2( grp_fu_344_p2 ),
    .din3( grp_fu_344_p3 ),
    .ce( grp_fu_344_ce ),
    .dout( grp_fu_344_p4 )
);

duc_am_submul_16s_16s_18s_32_4 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
duc_am_submul_16s_16s_18s_32_4_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_353_p0 ),
    .din1( grp_fu_353_p1 ),
    .din2( grp_fu_353_p2 ),
    .ce( grp_fu_353_ce ),
    .dout( grp_fu_353_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        Din_re_reg_441 <= DI_cache_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (brmerge_demorgan_fu_180_p2 == ap_const_lv1_0) & ~(valid_in_fu_158_p2 == ap_const_lv1_0))) begin
        acc <= acc_assign_i_fu_194_p2;
        phase1_reg_398 <= {{acc_assign_i_fu_194_p2[ap_const_lv32_F : ap_const_lv32_B]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        brmerge_demorgan_reg_386 <= brmerge_demorgan_fu_180_p2;
        ch_3_load_reg_381 <= ch_3;
        i_4_load_reg_367 <= i_4;
        inc_reg_372 <= inc_fu_142_p2;
        index_load_reg_390 <= index;
        valid_in_reg_377 <= valid_in_fu_158_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == tmp_11_fu_290_p2))) begin
        ch_3 <= tmp_12_fu_295_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        cosine_reg_425 <= dds_table_q1;
        sine_reg_419 <= dds_table_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_4 <= inc_5_fu_322_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(valid_in_reg_377 == ap_const_lv1_0))) begin
        index <= tmp_13_fu_306_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (brmerge_demorgan_reg_386 == ap_const_lv1_0) & ~(valid_in_reg_377 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_10_fu_279_p2))) begin
        init_4 <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        phase2_reg_404 <= phase2_fu_221_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_2_reg_456 <= grp_fu_353_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_3_reg_462 <= grp_fu_344_p4;
        tmp_6_reg_467 <= grp_fu_335_p4;
    end
end

/// DI_cache_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st5_fsm_4 or tmp_fu_216_p1 or tmp_s_fu_234_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        DI_cache_address0 = tmp_fu_216_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        DI_cache_address0 = tmp_s_fu_234_p1;
    end else begin
        DI_cache_address0 = 'bx;
    end
end

/// DI_cache_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        DI_cache_ce0 = ap_const_logic_1;
    end else begin
        DI_cache_ce0 = ap_const_logic_0;
    end
end

/// DI_cache_we0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or brmerge_demorgan_fu_180_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(brmerge_demorgan_fu_180_p2 == ap_const_lv1_0))) begin
        DI_cache_we0 = ap_const_logic_1;
    end else begin
        DI_cache_we0 = ap_const_logic_0;
    end
end

/// Dout_I_ap_vld assign process. ///
always @ (valid_in_reg_377 or brmerge_demorgan_reg_386 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (brmerge_demorgan_reg_386 == ap_const_lv1_0) & ~(valid_in_reg_377 == ap_const_lv1_0))) begin
        Dout_I_ap_vld = ap_const_logic_1;
    end else begin
        Dout_I_ap_vld = ap_const_logic_0;
    end
end

/// Dout_Q_ap_vld assign process. ///
always @ (valid_in_reg_377 or brmerge_demorgan_reg_386 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (brmerge_demorgan_reg_386 == ap_const_lv1_0) & ~(valid_in_reg_377 == ap_const_lv1_0))) begin
        Dout_Q_ap_vld = ap_const_logic_1;
    end else begin
        Dout_Q_ap_vld = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_9)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_185)
begin
    if (ap_sig_bdd_185) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_28)
begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_100)
begin
    if (ap_sig_bdd_100) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_119)
begin
    if (ap_sig_bdd_119) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_129)
begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_139)
begin
    if (ap_sig_bdd_139) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_148)
begin
    if (ap_sig_bdd_148) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_159)
begin
    if (ap_sig_bdd_159) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_168)
begin
    if (ap_sig_bdd_168) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// dds_table_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dds_table_ce0 = ap_const_logic_1;
    end else begin
        dds_table_ce0 = ap_const_logic_0;
    end
end

/// dds_table_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dds_table_ce1 = ap_const_logic_1;
    end else begin
        dds_table_ce1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or valid_in_fu_158_p2 or brmerge_demorgan_fu_180_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & ((valid_in_fu_158_p2 == ap_const_lv1_0) | ~(brmerge_demorgan_fu_180_p2 == ap_const_lv1_0)))) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else if ((~(ap_start == ap_const_logic_0) & (brmerge_demorgan_fu_180_p2 == ap_const_lv1_0) & ~(valid_in_fu_158_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DI_cache_d0 = Din;
assign Dout_I = {{tmp_3_reg_462[ap_const_lv32_1F : ap_const_lv32_E]}};
assign Dout_Q = {{tmp_6_reg_467[ap_const_lv32_1F : ap_const_lv32_E]}};
assign acc_assign_i_fu_194_p2 = (acc + freq_dds_fu_168_p3);

/// ap_sig_bdd_100 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_100 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_119 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_119 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_129 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_139 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_139 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_148 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_148 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_159 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_159 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_168 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_168 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_185 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_185 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_28 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign brmerge_demorgan_fu_180_p2 = (ch_3 & valid_in_fu_158_p2);
assign dds_table_address0 = tmp_i_fu_226_p1;
assign dds_table_address1 = tmp_53_i_fu_230_p1;
assign freq_dds_fu_168_p3 = ((init_4[0:0]===1'b1)? ap_const_lv16_0: freq);
assign grp_fu_335_ce = ap_const_logic_1;
assign grp_fu_335_p0 = tmp_i6_fu_250_p1;
assign grp_fu_335_p1 = tmp_i5_fu_247_p1;
assign grp_fu_335_p2 = cosine_reg_425;
assign grp_fu_335_p3 = tmp_2_reg_456;
assign grp_fu_344_ce = ap_const_logic_1;
assign grp_fu_344_p0 = tmp_i5_fu_247_p1;
assign grp_fu_344_p1 = tmp_i6_fu_250_p1;
assign grp_fu_344_p2 = sine_reg_419;
assign grp_fu_344_p3 = tmp_2_reg_456;
assign grp_fu_353_ce = ap_const_logic_1;
assign grp_fu_353_p0 = sine_reg_419;
assign grp_fu_353_p1 = cosine_reg_425;
assign grp_fu_353_p2 = Din;
assign inc_5_fu_322_p3 = ((tmp_14_fu_317_p2[0:0]===1'b1)? ap_const_lv3_0: inc_reg_372);
assign inc_fu_142_p2 = (i_4 + ap_const_lv3_1);
assign phase2_fu_221_p2 = (ap_const_lv5_8 - phase1_reg_398);
assign tmp_10_fu_279_p2 = (index_load_reg_390 == ap_const_lv4_F? 1'b1: 1'b0);
assign tmp_11_fu_290_p2 = (index_load_reg_390 == ap_const_lv4_F? 1'b1: 1'b0);
assign tmp_12_fu_295_p2 = (ch_3_load_reg_381 ^ ap_const_lv1_1);
assign tmp_13_fu_306_p2 = (index_load_reg_390 + ap_const_lv4_1);
assign tmp_14_fu_317_p2 = (i_4_load_reg_367 == ap_const_lv3_5? 1'b1: 1'b0);
assign tmp_15_fu_148_p4 = {{i_4[ap_const_lv32_2 : ap_const_lv32_1]}};
assign tmp_53_i_fu_230_p1 = phase2_reg_404;
assign tmp_fu_216_p1 = index;
assign tmp_i5_fu_247_p1 = $signed(Din_re_reg_441);
assign tmp_i6_fu_250_p1 = $signed(Din);
assign tmp_i_fu_226_p1 = phase1_reg_398;
assign tmp_s_fu_234_p1 = index_load_reg_390;
assign valid_in_fu_158_p2 = (tmp_15_fu_148_p4 == ap_const_lv2_0? 1'b1: 1'b0);


endmodule //duc_mixer

