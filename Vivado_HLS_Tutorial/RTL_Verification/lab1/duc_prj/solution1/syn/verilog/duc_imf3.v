// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module duc_imf3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_5 = 6'b101;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv38_0 = 38'b00000000000000000000000000000000000000;
parameter    ap_const_lv35_0 = 35'b00000000000000000000000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv6_F = 6'b1111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x;
output  [17:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
reg   [5:0] i_3 = 6'b000000;
reg   [17:0] in_3 = 18'b000000000000000000;
reg   [5:0] j = 6'b000000;
wire   [2:0] c_3_0_address0;
reg    c_3_0_ce0;
wire   [17:0] c_3_0_q0;
reg   [0:0] init_3 = 1'b1;
reg   [3:0] shift_reg_p0_address0;
reg    shift_reg_p0_ce0;
reg    shift_reg_p0_we0;
wire   [37:0] shift_reg_p0_d0;
wire   [37:0] shift_reg_p0_q0;
wire   [2:0] c_3_1_address0;
reg    c_3_1_ce0;
wire   [0:0] c_3_1_q0;
reg   [3:0] shift_reg_p1_address0;
reg    shift_reg_p1_ce0;
reg    shift_reg_p1_we0;
wire   [37:0] shift_reg_p1_d0;
wire   [37:0] shift_reg_p1_q0;
reg   [5:0] i_3_load_reg_345;
wire   [0:0] tmp_fu_136_p2;
reg   [0:0] tmp_reg_353;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_86;
wire   [5:0] inc_fu_152_p2;
reg   [5:0] inc_reg_368;
reg   [5:0] p_Val2_s_reg_384;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_103;
wire   [0:0] ch_4_fu_166_p3;
reg   [0:0] ch_4_reg_390;
reg   [17:0] c_3_0_load_reg_395;
reg   [0:0] c_3_1_load_reg_405;
wire   [0:0] tmp_9_fu_187_p2;
reg   [0:0] tmp_9_reg_415;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_120;
reg   [37:0] shift_reg_p0_load_reg_422;
reg   [37:0] shift_reg_p1_load_reg_437;
wire  signed [34:0] mt_fu_211_p2;
reg  signed [34:0] mt_reg_442;
wire   [37:0] tmp_3_fu_226_p3;
reg   [37:0] tmp_3_reg_447;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_141;
wire   [37:0] tmp_4_fu_233_p3;
reg   [37:0] tmp_4_reg_452;
wire   [34:0] m_1_fu_240_p3;
reg   [34:0] m_1_reg_457;
wire  signed [37:0] acc1_fu_249_p2;
reg  signed [37:0] acc1_reg_462;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_154;
reg   [17:0] tmp_15_reg_467;
wire  signed [37:0] grp_fu_337_p3;
reg  signed [37:0] acc0_reg_472;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_167;
reg   [17:0] tmp_14_reg_477;
reg   [17:0] d_assign_reg_122;
wire   [63:0] tmp_s_fu_157_p1;
wire   [63:0] tmp_11_fu_181_p1;
wire   [63:0] tmp_13_fu_279_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_186;
wire   [5:0] inc_4_fu_325_p3;
wire   [5:0] tmp_1_fu_311_p3;
wire   [0:0] or_cond5_fu_295_p2;
wire   [6:0] tmp_10_fu_174_p3;
wire   [34:0] p_shl_fu_203_p3;
wire  signed [34:0] tmp_i_cast_fu_199_p1;
wire   [0:0] or_cond_fu_221_p2;
wire  signed [37:0] tmp_59_i6_fu_246_p1;
wire   [6:0] tmp_12_fu_273_p3;
wire   [0:0] tmp_7_fu_290_p2;
wire   [5:0] tmp_8_fu_306_p2;
wire  signed [17:0] grp_fu_337_p0;
wire  signed [17:0] grp_fu_337_p1;
wire   [37:0] grp_fu_337_p2;
wire    grp_fu_337_ce;
reg   [7:0] ap_NS_fsm;


duc_imf3_c_3_0 #(
    .DataWidth( 18 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
c_3_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( c_3_0_address0 ),
    .ce0( c_3_0_ce0 ),
    .q0( c_3_0_q0 )
);

duc_imf3_shift_reg_p0 #(
    .DataWidth( 38 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
shift_reg_p0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_p0_address0 ),
    .ce0( shift_reg_p0_ce0 ),
    .we0( shift_reg_p0_we0 ),
    .d0( shift_reg_p0_d0 ),
    .q0( shift_reg_p0_q0 )
);

duc_imf3_c_3_1 #(
    .DataWidth( 1 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
c_3_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( c_3_1_address0 ),
    .ce0( c_3_1_ce0 ),
    .q0( c_3_1_q0 )
);

duc_imf3_shift_reg_p0 #(
    .DataWidth( 38 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
shift_reg_p1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_p1_address0 ),
    .ce0( shift_reg_p1_ce0 ),
    .we0( shift_reg_p1_we0 ),
    .d0( shift_reg_p1_d0 ),
    .q0( shift_reg_p1_q0 )
);

duc_mac_muladd_18s_18s_38ns_38_4 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 38 ))
duc_mac_muladd_18s_18s_38ns_38_4_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_337_p0 ),
    .din1( grp_fu_337_p1 ),
    .din2( grp_fu_337_p2 ),
    .ce( grp_fu_337_ce ),
    .dout( grp_fu_337_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        if ((tmp_reg_353 == ap_const_lv1_0)) begin
            d_assign_reg_122 <= in_3;
        end else if (~(tmp_reg_353 == ap_const_lv1_0)) begin
            d_assign_reg_122 <= x;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        acc0_reg_472 <= grp_fu_337_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        acc1_reg_462 <= acc1_fu_249_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        c_3_0_load_reg_395 <= c_3_0_q0;
        c_3_1_load_reg_405 <= c_3_1_q0;
        ch_4_reg_390 <= j[ap_const_lv32_3];
        p_Val2_s_reg_384 <= j;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        i_3 <= inc_4_fu_325_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_3_load_reg_345 <= i_3;
        tmp_reg_353 <= tmp_fu_136_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_reg_353 == ap_const_lv1_0))) begin
        in_3 <= x;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        inc_reg_368 <= inc_fu_152_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(ap_const_lv1_0 == or_cond5_fu_295_p2))) begin
        init_3 <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(tmp_9_reg_415 == ap_const_lv1_0))) begin
        j <= tmp_1_fu_311_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        m_1_reg_457 <= m_1_fu_240_p3;
        tmp_3_reg_447 <= tmp_3_fu_226_p3;
        tmp_4_reg_452 <= tmp_4_fu_233_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(c_3_1_load_reg_405 == ap_const_lv1_0))) begin
        mt_reg_442 <= mt_fu_211_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        shift_reg_p0_load_reg_422 <= shift_reg_p0_q0;
        shift_reg_p1_load_reg_437 <= shift_reg_p1_q0;
        tmp_9_reg_415 <= tmp_9_fu_187_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(tmp_reg_353 == ap_const_lv1_0))) begin
        tmp_14_reg_477 <= {{grp_fu_337_p3[ap_const_lv32_22 : ap_const_lv32_11]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (tmp_reg_353 == ap_const_lv1_0))) begin
        tmp_15_reg_467 <= {{acc1_fu_249_p2[ap_const_lv32_22 : ap_const_lv32_11]}};
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_120)
begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_141)
begin
    if (ap_sig_bdd_141) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_167)
begin
    if (ap_sig_bdd_167) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_186)
begin
    if (ap_sig_bdd_186) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// c_3_0_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_3_0_ce0 = ap_const_logic_1;
    end else begin
        c_3_0_ce0 = ap_const_logic_0;
    end
end

/// c_3_1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_3_1_ce0 = ap_const_logic_1;
    end else begin
        c_3_1_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_p0_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_11_fu_181_p1 or tmp_13_fu_279_p1 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        shift_reg_p0_address0 = tmp_13_fu_279_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        shift_reg_p0_address0 = tmp_11_fu_181_p1;
    end else begin
        shift_reg_p0_address0 = 'bx;
    end
end

/// shift_reg_p0_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        shift_reg_p0_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_p0_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_p0_we0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        shift_reg_p0_we0 = ap_const_logic_1;
    end else begin
        shift_reg_p0_we0 = ap_const_logic_0;
    end
end

/// shift_reg_p1_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_11_fu_181_p1 or tmp_13_fu_279_p1 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        shift_reg_p1_address0 = tmp_13_fu_279_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        shift_reg_p1_address0 = tmp_11_fu_181_p1;
    end else begin
        shift_reg_p1_address0 = 'bx;
    end
end

/// shift_reg_p1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        shift_reg_p1_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_p1_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_p1_we0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        shift_reg_p1_we0 = ap_const_logic_1;
    end else begin
        shift_reg_p1_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc1_fu_249_p2 = ($signed(tmp_4_reg_452) + $signed(tmp_59_i6_fu_246_p1));
assign ap_return = ((tmp_reg_353[0:0]===1'b1)? tmp_14_reg_477: tmp_15_reg_467);

/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_141 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_141 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_167 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_167 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_186 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_186 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign c_3_0_address0 = tmp_s_fu_157_p1;
assign c_3_1_address0 = tmp_s_fu_157_p1;
assign ch_4_fu_166_p3 = j[ap_const_lv32_3];
assign grp_fu_337_ce = ap_const_logic_1;
assign grp_fu_337_p0 = d_assign_reg_122;
assign grp_fu_337_p1 = c_3_0_load_reg_395;
assign grp_fu_337_p2 = tmp_3_reg_447;
assign inc_4_fu_325_p3 = ((tmp_9_reg_415[0:0]===1'b1)? ap_const_lv6_0: inc_reg_368);
assign inc_fu_152_p2 = (i_3_load_reg_345 + ap_const_lv6_1);
assign m_1_fu_240_p3 = ((c_3_1_load_reg_405[0:0]===1'b1)? mt_reg_442: ap_const_lv35_0);
assign mt_fu_211_p2 = ($signed(p_shl_fu_203_p3) - $signed(tmp_i_cast_fu_199_p1));
assign or_cond5_fu_295_p2 = (tmp_9_reg_415 & tmp_7_fu_290_p2);
assign or_cond_fu_221_p2 = (init_3 | tmp_9_reg_415);
assign p_shl_fu_203_p3 = {{d_assign_reg_122}, {ap_const_lv17_0}};
assign shift_reg_p0_d0 = acc0_reg_472;
assign shift_reg_p1_d0 = acc1_reg_462;
assign tmp_10_fu_174_p3 = {{inc_reg_368}, {ch_4_fu_166_p3}};
assign tmp_11_fu_181_p1 = tmp_10_fu_174_p3;
assign tmp_12_fu_273_p3 = {{i_3_load_reg_345}, {ch_4_reg_390}};
assign tmp_13_fu_279_p1 = tmp_12_fu_273_p3;
assign tmp_1_fu_311_p3 = ((tmp_7_fu_290_p2[0:0]===1'b1)? ap_const_lv6_0: tmp_8_fu_306_p2);
assign tmp_3_fu_226_p3 = ((or_cond_fu_221_p2[0:0]===1'b1)? ap_const_lv38_0: shift_reg_p0_load_reg_422);
assign tmp_4_fu_233_p3 = ((or_cond_fu_221_p2[0:0]===1'b1)? ap_const_lv38_0: shift_reg_p1_load_reg_437);
assign tmp_59_i6_fu_246_p1 = $signed(m_1_reg_457);
assign tmp_7_fu_290_p2 = (p_Val2_s_reg_384 == ap_const_lv6_F? 1'b1: 1'b0);
assign tmp_8_fu_306_p2 = (p_Val2_s_reg_384 + ap_const_lv6_1);
assign tmp_9_fu_187_p2 = (i_3_load_reg_345 == ap_const_lv6_5? 1'b1: 1'b0);
assign tmp_fu_136_p2 = (i_3 == ap_const_lv6_0? 1'b1: 1'b0);
assign tmp_i_cast_fu_199_p1 = $signed(d_assign_reg_122);
assign tmp_s_fu_157_p1 = i_3_load_reg_345;


endmodule //duc_imf3

