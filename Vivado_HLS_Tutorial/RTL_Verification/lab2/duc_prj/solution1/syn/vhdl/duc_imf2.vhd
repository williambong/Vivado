-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity duc_imf2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of duc_imf2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal i_3 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal in_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal c_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_ce0 : STD_LOGIC;
    signal c_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init_3 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ch_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal shift_reg_p_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_reg_p_1_ce0 : STD_LOGIC;
    signal shift_reg_p_1_we0 : STD_LOGIC;
    signal shift_reg_p_1_d0 : STD_LOGIC_VECTOR (37 downto 0);
    signal shift_reg_p_1_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal cnt : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_3_load_reg_257 : STD_LOGIC_VECTOR (3 downto 0);
    signal inc_fu_100_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal inc_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_load_reg_278 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal ch_2_load_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal shift_reg_p_1_load_reg_310 : STD_LOGIC_VECTOR (37 downto 0);
    signal sel_tmp5_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_assign_fu_172_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal s_assign_reg_330 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal grp_fu_250_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_reg_335 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal tmp_s_fu_106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal inc_3_fu_238_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_217_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_115_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp4_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_179_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_218 : BOOLEAN;
    signal grp_fu_250_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component duc_mac_muladd_18s_18s_38ns_38_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (37 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component duc_imf2_c_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_imf2_shift_reg_p_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    c_1_U : component duc_imf2_c_1
    generic map (
        DataWidth => 18,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_1_address0,
        ce0 => c_1_ce0,
        q0 => c_1_q0);

    shift_reg_p_1_U : component duc_imf2_shift_reg_p_1
    generic map (
        DataWidth => 38,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p_1_address0,
        ce0 => shift_reg_p_1_ce0,
        we0 => shift_reg_p_1_we0,
        d0 => shift_reg_p_1_d0,
        q0 => shift_reg_p_1_q0);

    duc_mac_muladd_18s_18s_38ns_38_4_U0 : component duc_mac_muladd_18s_18s_38ns_38_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 38,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        din2 => grp_fu_250_p2,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                c_1_load_reg_278 <= c_1_q0;
                ch_2_load_reg_283 <= ch_2;
                sel_tmp1_reg_294 <= sel_tmp1_fu_127_p2;
                sel_tmp2_reg_300 <= sel_tmp2_fu_132_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = sel_tmp1_reg_294)) and not((ap_const_lv1_0 = tmp_21_fu_194_p2)))) then
                ch_2 <= tmp_22_fu_206_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = sel_tmp1_reg_294)))) then
                cnt <= tmp_23_fu_217_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                i_3 <= inc_3_fu_238_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                i_3_load_reg_257 <= i_3;
                inc_reg_267 <= inc_fu_100_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_88_p2)))) then
                in_2 <= x;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = sel_tmp1_reg_294)) and not((ap_const_lv1_0 = tmp_21_fu_194_p2)) and not((ap_const_lv1_0 = ch_2_load_reg_283)))) then
                init_3 <= ap_const_lv1_0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                s_assign_reg_330 <= s_assign_fu_172_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                sel_tmp5_reg_315 <= sel_tmp5_fu_155_p2;
                shift_reg_p_1_load_reg_310 <= shift_reg_p_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                sum_reg_335 <= grp_fu_250_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= sum_reg_335(34 downto 17);

    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_218 assign process. --
    ap_sig_bdd_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_218 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_73 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_73)
    begin
        if (ap_sig_bdd_73) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_218)
    begin
        if (ap_sig_bdd_218) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_address0 <= tmp_s_fu_106_p1(4 - 1 downto 0);

    -- c_1_ce0 assign process. --
    c_1_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            c_1_ce0 <= ap_const_logic_1;
        else 
            c_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_250_ce <= ap_const_logic_1;
    grp_fu_250_p0 <= c_1_load_reg_278;
    grp_fu_250_p1 <= in_2;
    grp_fu_250_p2 <= s_assign_reg_330;
    inc_3_fu_238_p3 <= 
        ap_const_lv4_0 when (sel_tmp1_reg_294(0) = '1') else 
        inc_reg_267;
    inc_fu_100_p2 <= std_logic_vector(unsigned(i_3) + unsigned(ap_const_lv4_1));
    s_assign_fu_172_p3 <= 
        ap_const_lv38_0 when (tmp_20_fu_168_p2(0) = '1') else 
        shift_reg_p_1_load_reg_310;
    sel_tmp1_fu_127_p2 <= "1" when (i_3_load_reg_257 = ap_const_lv4_B) else "0";
    sel_tmp2_fu_132_p2 <= "1" when (i_3_load_reg_257 = ap_const_lv4_5) else "0";
    sel_tmp3_fu_145_p2 <= (init_3 xor ap_const_lv1_1);
    sel_tmp4_fu_151_p2 <= (sel_tmp1_reg_294 or sel_tmp2_reg_300);
    sel_tmp5_fu_155_p2 <= (sel_tmp4_fu_151_p2 and sel_tmp3_fu_145_p2);

    -- shift_reg_p_1_address0 assign process. --
    shift_reg_p_1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_15_fu_122_p1, tmp_17_fu_185_p1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            shift_reg_p_1_address0 <= tmp_17_fu_185_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            shift_reg_p_1_address0 <= tmp_15_fu_122_p1(5 - 1 downto 0);
        else 
            shift_reg_p_1_address0 <= "XXXXX";
        end if; 
    end process;


    -- shift_reg_p_1_ce0 assign process. --
    shift_reg_p_1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            shift_reg_p_1_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shift_reg_p_1_d0 <= sum_reg_335;

    -- shift_reg_p_1_we0 assign process. --
    shift_reg_p_1_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            shift_reg_p_1_we0 <= ap_const_logic_1;
        else 
            shift_reg_p_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_14_fu_115_p3 <= (inc_reg_267 & ch_2);
    tmp_15_fu_122_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_115_p3),64));
    tmp_16_fu_179_p3 <= (i_3_load_reg_257 & ch_2_load_reg_283);
    tmp_17_fu_185_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_179_p3),64));
    tmp_20_fu_168_p2 <= (sel_tmp5_reg_315 or init_3);
    tmp_21_fu_194_p2 <= "1" when (cnt = ap_const_lv2_3) else "0";
    tmp_22_fu_206_p2 <= (ch_2_load_reg_283 xor ap_const_lv1_1);
    tmp_23_fu_217_p2 <= std_logic_vector(unsigned(cnt) + unsigned(ap_const_lv2_1));
    tmp_fu_88_p2 <= "1" when (i_3 = ap_const_lv4_0) else "0";
    tmp_s_fu_106_p1 <= std_logic_vector(resize(unsigned(i_3),64));
end behav;
