// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="duc,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.710000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.710000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=7,HLS_SYN_FF=1601,HLS_SYN_LUT=630}" *)

module duc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_i,
        freq,
        dout_i,
        dout_i_ap_vld,
        dout_q,
        dout_q_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 17'b1;
parameter    ap_ST_st2_fsm_1 = 17'b10;
parameter    ap_ST_st3_fsm_2 = 17'b100;
parameter    ap_ST_st4_fsm_3 = 17'b1000;
parameter    ap_ST_st5_fsm_4 = 17'b10000;
parameter    ap_ST_st6_fsm_5 = 17'b100000;
parameter    ap_ST_st7_fsm_6 = 17'b1000000;
parameter    ap_ST_st8_fsm_7 = 17'b10000000;
parameter    ap_ST_st9_fsm_8 = 17'b100000000;
parameter    ap_ST_st10_fsm_9 = 17'b1000000000;
parameter    ap_ST_st11_fsm_10 = 17'b10000000000;
parameter    ap_ST_st12_fsm_11 = 17'b100000000000;
parameter    ap_ST_st13_fsm_12 = 17'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 17'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 17'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 17'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_2F = 6'b101111;
parameter    ap_const_lv6_17 = 6'b10111;
parameter    ap_const_lv38_0 = 38'b00000000000000000000000000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_17 = 5'b10111;
parameter    ap_const_lv5_B = 5'b1011;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] din_i;
input  [15:0] freq;
output  [17:0] dout_i;
output   dout_i_ap_vld;
output  [17:0] dout_q;
output   dout_q_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm = 17'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_33;
reg   [5:0] i = 6'b000000;
reg   [17:0] in_r = 18'b000000000000000000;
wire   [5:0] c_address0;
reg    c_ce0;
wire   [17:0] c_q0;
reg   [0:0] init = 1'b1;
reg   [0:0] ch = 1'b0;
reg   [6:0] shift_reg_p_address0;
reg    shift_reg_p_ce0;
reg    shift_reg_p_we0;
wire   [37:0] shift_reg_p_d0;
wire   [37:0] shift_reg_p_q0;
reg   [4:0] i_4 = 5'b00000;
reg   [17:0] in_3 = 18'b000000000000000000;
wire   [4:0] c_2_address0;
reg    c_2_ce0;
wire   [17:0] c_2_q0;
reg   [0:0] init_4 = 1'b1;
reg   [0:0] ch_3 = 1'b0;
reg   [5:0] shift_reg_p_2_address0;
reg    shift_reg_p_2_ce0;
reg    shift_reg_p_2_we0;
wire   [37:0] shift_reg_p_2_d0;
wire   [37:0] shift_reg_p_2_q0;
reg   [0:0] cnt_1 = 1'b0;
reg   [5:0] i_load_reg_593;
wire   [5:0] inc_fu_285_p2;
reg   [5:0] inc_reg_603;
reg   [17:0] c_load_reg_614;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_110;
reg   [0:0] ch_load_reg_619;
wire   [0:0] sel_tmp1_i_fu_312_p2;
reg   [0:0] sel_tmp1_i_reg_630;
wire   [0:0] sel_tmp2_i_fu_317_p2;
reg   [0:0] sel_tmp2_i_reg_636;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_127;
reg   [37:0] shift_reg_p_load_reg_646;
wire   [0:0] sel_tmp5_i_fu_340_p2;
reg   [0:0] sel_tmp5_i_reg_651;
wire   [37:0] tmp_5_i_fu_357_p3;
reg   [37:0] tmp_5_i_reg_666;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_143;
wire  signed [37:0] grp_fu_574_p3;
reg  signed [37:0] acc_1_reg_671;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_152;
reg   [4:0] i_4_load_reg_677;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_161;
wire   [4:0] inc_5_fu_429_p2;
reg   [4:0] inc_5_reg_687;
reg   [17:0] c_2_load_reg_698;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_173;
reg   [0:0] ch_3_load_reg_703;
wire   [0:0] sel_tmp1_i7_fu_456_p2;
reg   [0:0] sel_tmp1_i7_reg_714;
wire   [0:0] sel_tmp2_i8_fu_461_p2;
reg   [0:0] sel_tmp2_i8_reg_720;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_190;
reg   [37:0] shift_reg_p_2_load_reg_730;
wire   [0:0] sel_tmp5_i1_fu_484_p2;
reg   [0:0] sel_tmp5_i1_reg_735;
wire   [37:0] s_assign_fu_501_p3;
reg   [37:0] s_assign_reg_750;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_206;
wire  signed [37:0] grp_fu_581_p3;
reg  signed [37:0] sum_reg_755;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_215;
reg   [17:0] imf1_o_reg_761;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_224;
wire   [17:0] grp_duc_imf2_fu_249_ap_return;
reg   [17:0] imf2_o_reg_766;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_233;
wire    grp_duc_imf2_fu_249_ap_done;
wire   [17:0] grp_duc_imf3_fu_204_ap_return;
reg   [17:0] imf3_o_reg_771;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_246;
wire    grp_duc_imf3_fu_204_ap_done;
wire    grp_duc_imf3_fu_204_ap_start;
wire    grp_duc_imf3_fu_204_ap_idle;
wire    grp_duc_imf3_fu_204_ap_ready;
wire   [17:0] grp_duc_imf3_fu_204_x;
wire    grp_duc_mixer_fu_225_ap_start;
wire    grp_duc_mixer_fu_225_ap_done;
wire    grp_duc_mixer_fu_225_ap_idle;
wire    grp_duc_mixer_fu_225_ap_ready;
wire   [15:0] grp_duc_mixer_fu_225_freq;
wire   [17:0] grp_duc_mixer_fu_225_Din;
wire   [17:0] grp_duc_mixer_fu_225_Dout_I;
wire    grp_duc_mixer_fu_225_Dout_I_ap_vld;
wire   [17:0] grp_duc_mixer_fu_225_Dout_Q;
wire    grp_duc_mixer_fu_225_Dout_Q_ap_vld;
wire    grp_duc_imf2_fu_249_ap_start;
wire    grp_duc_imf2_fu_249_ap_idle;
wire    grp_duc_imf2_fu_249_ap_ready;
wire   [17:0] grp_duc_imf2_fu_249_x;
reg    grp_duc_imf3_fu_204_ap_start_ap_start_reg = 1'b0;
reg    grp_duc_mixer_fu_225_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_340;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_347;
reg    grp_duc_imf2_fu_249_ap_start_ap_start_reg = 1'b0;
wire   [63:0] tmp_2_i_fu_291_p1;
wire   [63:0] tmp_19_fu_307_p1;
wire   [63:0] tmp_21_fu_370_p1;
wire   [63:0] tmp_i3_fu_435_p1;
wire   [63:0] tmp_s_fu_451_p1;
wire   [63:0] tmp_25_fu_514_p1;
wire   [5:0] inc_4_fu_401_p3;
wire   [0:0] tmp_i_fu_273_p2;
wire   [0:0] tmp_i_15_fu_381_p2;
wire   [4:0] inc_6_fu_562_p3;
wire   [0:0] tmp_i1_fu_417_p2;
wire   [0:0] tmp_41_i_fu_529_p2;
wire   [0:0] tmp_42_i_fu_540_p2;
wire   [6:0] tmp_18_fu_300_p3;
wire   [0:0] sel_tmp4_i_fu_336_p2;
wire   [0:0] sel_tmp3_i_fu_330_p2;
wire   [0:0] tmp_fu_353_p2;
wire   [6:0] tmp_20_fu_364_p3;
wire   [5:0] tmp_23_fu_444_p3;
wire   [0:0] sel_tmp4_i1_fu_480_p2;
wire   [0:0] sel_tmp3_i9_fu_474_p2;
wire   [0:0] tmp_22_fu_497_p2;
wire   [5:0] tmp_24_fu_508_p3;
wire  signed [17:0] grp_fu_574_p0;
wire  signed [17:0] grp_fu_574_p1;
wire   [37:0] grp_fu_574_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_598;
wire  signed [17:0] grp_fu_581_p0;
wire  signed [17:0] grp_fu_581_p1;
wire   [37:0] grp_fu_581_p2;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_608;
wire    grp_fu_574_ce;
wire    grp_fu_581_ce;
reg   [16:0] ap_NS_fsm;


duc_c #(
    .DataWidth( 18 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
c_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( c_address0 ),
    .ce0( c_ce0 ),
    .q0( c_q0 )
);

duc_shift_reg_p #(
    .DataWidth( 38 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
shift_reg_p_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_p_address0 ),
    .ce0( shift_reg_p_ce0 ),
    .we0( shift_reg_p_we0 ),
    .d0( shift_reg_p_d0 ),
    .q0( shift_reg_p_q0 )
);

duc_c_2 #(
    .DataWidth( 18 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
c_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( c_2_address0 ),
    .ce0( c_2_ce0 ),
    .q0( c_2_q0 )
);

duc_shift_reg_p_2 #(
    .DataWidth( 38 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
shift_reg_p_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_p_2_address0 ),
    .ce0( shift_reg_p_2_ce0 ),
    .we0( shift_reg_p_2_we0 ),
    .d0( shift_reg_p_2_d0 ),
    .q0( shift_reg_p_2_q0 )
);

duc_imf3 grp_duc_imf3_fu_204(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_duc_imf3_fu_204_ap_start ),
    .ap_done( grp_duc_imf3_fu_204_ap_done ),
    .ap_idle( grp_duc_imf3_fu_204_ap_idle ),
    .ap_ready( grp_duc_imf3_fu_204_ap_ready ),
    .x( grp_duc_imf3_fu_204_x ),
    .ap_return( grp_duc_imf3_fu_204_ap_return )
);

duc_mixer grp_duc_mixer_fu_225(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_duc_mixer_fu_225_ap_start ),
    .ap_done( grp_duc_mixer_fu_225_ap_done ),
    .ap_idle( grp_duc_mixer_fu_225_ap_idle ),
    .ap_ready( grp_duc_mixer_fu_225_ap_ready ),
    .freq( grp_duc_mixer_fu_225_freq ),
    .Din( grp_duc_mixer_fu_225_Din ),
    .Dout_I( grp_duc_mixer_fu_225_Dout_I ),
    .Dout_I_ap_vld( grp_duc_mixer_fu_225_Dout_I_ap_vld ),
    .Dout_Q( grp_duc_mixer_fu_225_Dout_Q ),
    .Dout_Q_ap_vld( grp_duc_mixer_fu_225_Dout_Q_ap_vld )
);

duc_imf2 grp_duc_imf2_fu_249(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_duc_imf2_fu_249_ap_start ),
    .ap_done( grp_duc_imf2_fu_249_ap_done ),
    .ap_idle( grp_duc_imf2_fu_249_ap_idle ),
    .ap_ready( grp_duc_imf2_fu_249_ap_ready ),
    .x( grp_duc_imf2_fu_249_x ),
    .ap_return( grp_duc_imf2_fu_249_ap_return )
);

duc_mac_muladd_18s_18s_38ns_38_4 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 38 ))
duc_mac_muladd_18s_18s_38ns_38_4_U18(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_574_p0 ),
    .din1( grp_fu_574_p1 ),
    .din2( grp_fu_574_p2 ),
    .ce( grp_fu_574_ce ),
    .dout( grp_fu_574_p3 )
);

duc_mac_muladd_18s_18s_38ns_38_4 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 38 ))
duc_mac_muladd_18s_18s_38ns_38_4_U19(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_581_p0 ),
    .din1( grp_fu_581_p1 ),
    .din2( grp_fu_581_p2 ),
    .ce( grp_fu_581_ce ),
    .dout( grp_fu_581_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_duc_imf2_fu_249_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_duc_imf2_fu_249_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_duc_imf2_fu_249_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
            grp_duc_imf2_fu_249_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_duc_imf2_fu_249_ap_ready)) begin
            grp_duc_imf2_fu_249_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_duc_imf3_fu_204_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_duc_imf3_fu_204_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_duc_imf3_fu_204_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_logic_0 == grp_duc_imf2_fu_249_ap_done))) begin
            grp_duc_imf3_fu_204_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_duc_imf3_fu_204_ap_ready)) begin
            grp_duc_imf3_fu_204_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_duc_mixer_fu_225_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_duc_mixer_fu_225_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_duc_mixer_fu_225_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
            grp_duc_mixer_fu_225_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_duc_mixer_fu_225_ap_ready)) begin
            grp_duc_mixer_fu_225_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        acc_1_reg_671 <= grp_fu_574_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        c_2_load_reg_698 <= c_2_q0;
        ch_3_load_reg_703 <= ch_3;
        sel_tmp1_i7_reg_714 <= sel_tmp1_i7_fu_456_p2;
        sel_tmp2_i8_reg_720 <= sel_tmp2_i8_fu_461_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_load_reg_614 <= c_q0;
        ch_load_reg_619 <= ch;
        sel_tmp1_i_reg_630 <= sel_tmp1_i_fu_312_p2;
        sel_tmp2_i_reg_636 <= sel_tmp2_i_fu_317_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == sel_tmp1_i_reg_630))) begin
        ch <= tmp_i_15_fu_381_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(ap_const_lv1_0 == sel_tmp1_i7_reg_714))) begin
        ch_3 <= tmp_41_i_fu_529_p2;
        cnt_1 <= tmp_42_i_fu_540_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i <= inc_4_fu_401_p3;
        i_4_load_reg_677 <= i_4;
        inc_5_reg_687 <= inc_5_fu_429_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        i_4 <= inc_6_fu_562_p3;
        imf1_o_reg_761 <= {{sum_reg_755[ap_const_lv32_22 : ap_const_lv32_11]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_load_reg_593 <= i;
        inc_reg_603 <= inc_fu_285_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_logic_0 == grp_duc_imf2_fu_249_ap_done))) begin
        imf2_o_reg_766 <= grp_duc_imf2_fu_249_ap_return;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_logic_0 == grp_duc_imf3_fu_204_ap_done))) begin
        imf3_o_reg_771 <= grp_duc_imf3_fu_204_ap_return;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == tmp_i1_fu_417_p2))) begin
        in_3 <= {{acc_1_reg_671[ap_const_lv32_22 : ap_const_lv32_11]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_i_fu_273_p2))) begin
        in_r <= din_i;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == sel_tmp1_i_reg_630) & ~(ap_const_lv1_0 == ch_load_reg_619))) begin
        init <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(ap_const_lv1_0 == sel_tmp1_i7_reg_714) & ~(ap_const_lv1_0 == ch_3_load_reg_703))) begin
        init_4 <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        s_assign_reg_750 <= s_assign_fu_501_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        sel_tmp5_i1_reg_735 <= sel_tmp5_i1_fu_484_p2;
        shift_reg_p_2_load_reg_730 <= shift_reg_p_2_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        sel_tmp5_i_reg_651 <= sel_tmp5_i_fu_340_p2;
        shift_reg_p_load_reg_646 <= shift_reg_p_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        sum_reg_755 <= grp_fu_581_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_5_i_reg_666 <= tmp_5_i_fu_357_p3;
    end
end

/// ap_done assign process. ///
always @ (grp_duc_mixer_fu_225_ap_done or ap_sig_cseq_ST_st17_fsm_16)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(ap_const_logic_0 == grp_duc_mixer_fu_225_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (grp_duc_mixer_fu_225_ap_done or ap_sig_cseq_ST_st17_fsm_16)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(ap_const_logic_0 == grp_duc_mixer_fu_225_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_206)
begin
    if (ap_sig_bdd_206) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_608)
begin
    if (ap_sig_bdd_608) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_215)
begin
    if (ap_sig_bdd_215) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_224)
begin
    if (ap_sig_bdd_224) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_233)
begin
    if (ap_sig_bdd_233) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_246)
begin
    if (ap_sig_bdd_246) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_340)
begin
    if (ap_sig_bdd_340) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_347)
begin
    if (ap_sig_bdd_347) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_33)
begin
    if (ap_sig_bdd_33) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_110)
begin
    if (ap_sig_bdd_110) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_127)
begin
    if (ap_sig_bdd_127) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_143)
begin
    if (ap_sig_bdd_143) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_598)
begin
    if (ap_sig_bdd_598) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_152)
begin
    if (ap_sig_bdd_152) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_161)
begin
    if (ap_sig_bdd_161) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_173)
begin
    if (ap_sig_bdd_173) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_190)
begin
    if (ap_sig_bdd_190) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// c_2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        c_2_ce0 = ap_const_logic_1;
    end else begin
        c_2_ce0 = ap_const_logic_0;
    end
end

/// c_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        c_ce0 = ap_const_logic_1;
    end else begin
        c_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_p_2_address0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st13_fsm_12 or tmp_s_fu_451_p1 or tmp_25_fu_514_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        shift_reg_p_2_address0 = tmp_25_fu_514_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        shift_reg_p_2_address0 = tmp_s_fu_451_p1;
    end else begin
        shift_reg_p_2_address0 = 'bx;
    end
end

/// shift_reg_p_2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st13_fsm_12)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        shift_reg_p_2_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_p_2_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_p_2_we0 assign process. ///
always @ (ap_sig_cseq_ST_st13_fsm_12)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        shift_reg_p_2_we0 = ap_const_logic_1;
    end else begin
        shift_reg_p_2_we0 = ap_const_logic_0;
    end
end

/// shift_reg_p_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or tmp_19_fu_307_p1 or tmp_21_fu_370_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        shift_reg_p_address0 = tmp_21_fu_370_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        shift_reg_p_address0 = tmp_19_fu_307_p1;
    end else begin
        shift_reg_p_address0 = 'bx;
    end
end

/// shift_reg_p_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        shift_reg_p_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_p_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_p_we0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        shift_reg_p_we0 = ap_const_logic_1;
    end else begin
        shift_reg_p_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or grp_duc_imf2_fu_249_ap_done or grp_duc_imf3_fu_204_ap_done or grp_duc_mixer_fu_225_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            if (~(ap_const_logic_0 == grp_duc_imf2_fu_249_ap_done)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st15_fsm_14 : 
        begin
            if (~(ap_const_logic_0 == grp_duc_imf3_fu_204_ap_done)) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            if (~(ap_const_logic_0 == grp_duc_mixer_fu_225_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_110 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_110 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_127 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_127 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_143 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_143 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_152 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_152 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_161 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_161 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_173 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_173 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_190 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_190 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_206 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_206 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_215 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_215 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_224 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_224 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_233 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_233 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_246 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_246 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_33 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_33 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_340 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_340 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_347 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_347 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_598 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_598 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_608 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_608 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end
assign c_2_address0 = tmp_i3_fu_435_p1;
assign c_address0 = tmp_2_i_fu_291_p1;
assign dout_i = grp_duc_mixer_fu_225_Dout_I;
assign dout_i_ap_vld = grp_duc_mixer_fu_225_Dout_I_ap_vld;
assign dout_q = grp_duc_mixer_fu_225_Dout_Q;
assign dout_q_ap_vld = grp_duc_mixer_fu_225_Dout_Q_ap_vld;
assign grp_duc_imf2_fu_249_ap_start = grp_duc_imf2_fu_249_ap_start_ap_start_reg;
assign grp_duc_imf2_fu_249_x = imf1_o_reg_761;
assign grp_duc_imf3_fu_204_ap_start = grp_duc_imf3_fu_204_ap_start_ap_start_reg;
assign grp_duc_imf3_fu_204_x = imf2_o_reg_766;
assign grp_duc_mixer_fu_225_Din = imf3_o_reg_771;
assign grp_duc_mixer_fu_225_ap_start = grp_duc_mixer_fu_225_ap_start_ap_start_reg;
assign grp_duc_mixer_fu_225_freq = freq;
assign grp_fu_574_ce = ap_const_logic_1;
assign grp_fu_574_p0 = c_load_reg_614;
assign grp_fu_574_p1 = in_r;
assign grp_fu_574_p2 = tmp_5_i_reg_666;
assign grp_fu_581_ce = ap_const_logic_1;
assign grp_fu_581_p0 = c_2_load_reg_698;
assign grp_fu_581_p1 = in_3;
assign grp_fu_581_p2 = s_assign_reg_750;
assign inc_4_fu_401_p3 = ((sel_tmp1_i_reg_630[0:0]===1'b1)? ap_const_lv6_0: inc_reg_603);
assign inc_5_fu_429_p2 = (i_4 + ap_const_lv5_1);
assign inc_6_fu_562_p3 = ((sel_tmp1_i7_reg_714[0:0]===1'b1)? ap_const_lv5_0: inc_5_reg_687);
assign inc_fu_285_p2 = (i + ap_const_lv6_1);
assign s_assign_fu_501_p3 = ((tmp_22_fu_497_p2[0:0]===1'b1)? ap_const_lv38_0: shift_reg_p_2_load_reg_730);
assign sel_tmp1_i7_fu_456_p2 = (i_4_load_reg_677 == ap_const_lv5_17? 1'b1: 1'b0);
assign sel_tmp1_i_fu_312_p2 = (i_load_reg_593 == ap_const_lv6_2F? 1'b1: 1'b0);
assign sel_tmp2_i8_fu_461_p2 = (i_4_load_reg_677 == ap_const_lv5_B? 1'b1: 1'b0);
assign sel_tmp2_i_fu_317_p2 = (i_load_reg_593 == ap_const_lv6_17? 1'b1: 1'b0);
assign sel_tmp3_i9_fu_474_p2 = (init_4 ^ ap_const_lv1_1);
assign sel_tmp3_i_fu_330_p2 = (init ^ ap_const_lv1_1);
assign sel_tmp4_i1_fu_480_p2 = (sel_tmp1_i7_reg_714 | sel_tmp2_i8_reg_720);
assign sel_tmp4_i_fu_336_p2 = (sel_tmp1_i_reg_630 | sel_tmp2_i_reg_636);
assign sel_tmp5_i1_fu_484_p2 = (sel_tmp4_i1_fu_480_p2 & sel_tmp3_i9_fu_474_p2);
assign sel_tmp5_i_fu_340_p2 = (sel_tmp4_i_fu_336_p2 & sel_tmp3_i_fu_330_p2);
assign shift_reg_p_2_d0 = sum_reg_755;
assign shift_reg_p_d0 = acc_1_reg_671;
assign tmp_18_fu_300_p3 = {{inc_reg_603}, {ch}};
assign tmp_19_fu_307_p1 = tmp_18_fu_300_p3;
assign tmp_20_fu_364_p3 = {{i_load_reg_593}, {ch_load_reg_619}};
assign tmp_21_fu_370_p1 = tmp_20_fu_364_p3;
assign tmp_22_fu_497_p2 = (sel_tmp5_i1_reg_735 | init_4);
assign tmp_23_fu_444_p3 = {{inc_5_reg_687}, {ch_3}};
assign tmp_24_fu_508_p3 = {{i_4_load_reg_677}, {ch_3_load_reg_703}};
assign tmp_25_fu_514_p1 = tmp_24_fu_508_p3;
assign tmp_2_i_fu_291_p1 = i;
assign tmp_41_i_fu_529_p2 = (ch_3_load_reg_703 ^ cnt_1);
assign tmp_42_i_fu_540_p2 = (cnt_1 ^ ap_const_lv1_1);
assign tmp_5_i_fu_357_p3 = ((tmp_fu_353_p2[0:0]===1'b1)? ap_const_lv38_0: shift_reg_p_load_reg_646);
assign tmp_fu_353_p2 = (sel_tmp5_i_reg_651 | init);
assign tmp_i1_fu_417_p2 = (i_4 == ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_i3_fu_435_p1 = i_4;
assign tmp_i_15_fu_381_p2 = (ch_load_reg_619 ^ ap_const_lv1_1);
assign tmp_i_fu_273_p2 = (i == ap_const_lv6_0? 1'b1: 1'b0);
assign tmp_s_fu_451_p1 = tmp_23_fu_444_p3;


endmodule //duc

